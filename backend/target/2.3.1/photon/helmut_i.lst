
c:/Users/Helmut/Schulprojekte/IoT/Helmut/helmut_i/target/2.3.1/photon/helmut_i.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000048d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a48f0  080a48f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a48f8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080a48fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000678  2000006c  2000006c  0004006c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a4968  080a4968  00034968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a4990  080a4990  00034990  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001a07c5  00000000  00000000  00034994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001b551  00000000  00000000  001d5159  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00022877  00000000  00000000  001f06aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002580  00000000  00000000  00212f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005dd0  00000000  00000000  002154a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002f987  00000000  00000000  0021b271  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003da38  00000000  00000000  0024abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b9a0b  00000000  00000000  00288630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006818  00000000  00000000  0034203c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 f9a5 	bl	80a437c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f9ad 	bl	80a4398 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a48fc 	.word	0x080a48fc
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200006e1 	.word	0x200006e1
 80a0058:	200006e1 	.word	0x200006e1

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f9d1 	bl	80a2404 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a48c8 	.word	0x080a48c8
 80a0080:	080a48e8 	.word	0x080a48e8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b82a 	b.w	80a00dc <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f86f 	bl	80a016c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b96f 	b.w	80a2374 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 bd6b 	b.w	80a1b70 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 bd69 	b.w	80a1b70 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 bd6f 	b.w	80a1b80 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a00b4:	b513      	push	{r0, r1, r4, lr}
 80a00b6:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a00b8:	4b04      	ldr	r3, [pc, #16]	; (80a00cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a00ba:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00bc:	f88d 3000 	strb.w	r3, [sp]
 80a00c0:	233c      	movs	r3, #60	; 0x3c
 80a00c2:	f002 faf7 	bl	80a26b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a00c6:	4620      	mov	r0, r4
 80a00c8:	b002      	add	sp, #8
 80a00ca:	bd10      	pop	{r4, pc}
 80a00cc:	2000006c 	.word	0x2000006c

080a00d0 <_Z11setupSensorv>:
{
  // 1.) Set the accelerometer range
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_4G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_8G);
  lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_16G);
 80a00d0:	2108      	movs	r1, #8
 80a00d2:	4801      	ldr	r0, [pc, #4]	; (80a00d8 <_Z11setupSensorv+0x8>)
 80a00d4:	f000 bfd6 	b.w	80a1084 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE>
 80a00d8:	20000074 	.word	0x20000074

080a00dc <setup>:
  //lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_2000DPS);
}


void setup() 
{
 80a00dc:	b508      	push	{r3, lr}
        spark_cloud_flag_connect();
 80a00de:	f001 fd27 	bl	80a1b30 <spark_cloud_flag_connect>
  Particle.connect();

  Serial.begin(115200);
 80a00e2:	f002 fd33 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a00e6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00ea:	f002 fd0f 	bl	80a2b0c <_ZN9USBSerial5beginEl>

  while (!Serial) {
 80a00ee:	f002 fd2d 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a00f2:	f002 fd12 	bl	80a2b1a <_ZN9USBSerialcvbEv>
 80a00f6:	b918      	cbnz	r0, 80a0100 <setup+0x24>
    delay(1); // will pause Zero, Leonardo, etc until serial console opens
 80a00f8:	2001      	movs	r0, #1
 80a00fa:	f002 f8e1 	bl	80a22c0 <delay>
  while (!Serial) {
 80a00fe:	e7f6      	b.n	80a00ee <setup+0x12>
  }
  
  Serial.println("LSM9DS1 data read demo");
 80a0100:	f002 fd24 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0104:	490a      	ldr	r1, [pc, #40]	; (80a0130 <setup+0x54>)
 80a0106:	f001 ff78 	bl	80a1ffa <_ZN5Print7printlnEPKc>
  
  // Try to initialise and warn if we couldn't detect the chip
  if (!lsm.begin())
 80a010a:	480a      	ldr	r0, [pc, #40]	; (80a0134 <setup+0x58>)
 80a010c:	f001 f802 	bl	80a1114 <_ZN16Adafruit_LSM9DS15beginEv>
 80a0110:	b928      	cbnz	r0, 80a011e <setup+0x42>
  {
    Serial.println("Oops ... unable to initialize the LSM9DS1. Check your wiring!");
 80a0112:	f002 fd1b 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0116:	4908      	ldr	r1, [pc, #32]	; (80a0138 <setup+0x5c>)
 80a0118:	f001 ff6f 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    while (1);
 80a011c:	e7fe      	b.n	80a011c <setup+0x40>
  }
  Serial.println("Found LSM9DS1 9DOF");
 80a011e:	f002 fd15 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0122:	4906      	ldr	r1, [pc, #24]	; (80a013c <setup+0x60>)
 80a0124:	f001 ff69 	bl	80a1ffa <_ZN5Print7printlnEPKc>

  // helper to just set the default scaling we want, see above!
  setupSensor();
}
 80a0128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setupSensor();
 80a012c:	f7ff bfd0 	b.w	80a00d0 <_Z11setupSensorv>
 80a0130:	080a4540 	.word	0x080a4540
 80a0134:	20000074 	.word	0x20000074
 80a0138:	080a4557 	.word	0x080a4557
 80a013c:	080a4595 	.word	0x080a4595

080a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0140:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0142:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0144:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0146:	b17c      	cbz	r4, 80a0168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0148:	6863      	ldr	r3, [r4, #4]
 80a014a:	3b01      	subs	r3, #1
 80a014c:	6063      	str	r3, [r4, #4]
 80a014e:	b95b      	cbnz	r3, 80a0168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0150:	6823      	ldr	r3, [r4, #0]
 80a0152:	4620      	mov	r0, r4
 80a0154:	689b      	ldr	r3, [r3, #8]
 80a0156:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0158:	68a3      	ldr	r3, [r4, #8]
 80a015a:	3b01      	subs	r3, #1
 80a015c:	60a3      	str	r3, [r4, #8]
 80a015e:	b91b      	cbnz	r3, 80a0168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0160:	6823      	ldr	r3, [r4, #0]
 80a0162:	4620      	mov	r0, r4
 80a0164:	68db      	ldr	r3, [r3, #12]
 80a0166:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0168:	4628      	mov	r0, r5
 80a016a:	bd38      	pop	{r3, r4, r5, pc}

080a016c <loop>:
float pmax_x = 0;
float pmax_y = 0;
float pmax_z = 0;

void loop() 
{
 80a016c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  lsm.read();  /* ask it to read in the data */ 
 80a0170:	4880      	ldr	r0, [pc, #512]	; (80a0374 <loop+0x208>)
{
 80a0172:	b0ac      	sub	sp, #176	; 0xb0
  lsm.read();  /* ask it to read in the data */ 
 80a0174:	f000 ff04 	bl	80a0f80 <_ZN16Adafruit_LSM9DS14readEv>

  /* Get a new sensor event */ 
  sensors_event_t a, m, g, temp;

  lsm.getEvent(&a, &m, &g, &temp); 
 80a0178:	ab23      	add	r3, sp, #140	; 0x8c
 80a017a:	9300      	str	r3, [sp, #0]
 80a017c:	a908      	add	r1, sp, #32
 80a017e:	487d      	ldr	r0, [pc, #500]	; (80a0374 <loop+0x208>)


  if (fabs(a.acceleration.x) > fabs(max_x)) {
 80a0180:	4e7d      	ldr	r6, [pc, #500]	; (80a0378 <loop+0x20c>)
  lsm.getEvent(&a, &m, &g, &temp); 
 80a0182:	ab1a      	add	r3, sp, #104	; 0x68
 80a0184:	aa11      	add	r2, sp, #68	; 0x44
 80a0186:	f001 f875 	bl	80a1274 <_ZN16Adafruit_LSM9DS18getEventEP15sensors_event_tS1_S1_S1_>
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80a018a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a018c:	6831      	ldr	r1, [r6, #0]
 80a018e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  if (fabs(a.acceleration.x) > fabs(max_x)) {
 80a0192:	4620      	mov	r0, r4
 80a0194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a0198:	f003 ff46 	bl	80a4028 <__aeabi_fcmpgt>
 80a019c:	b100      	cbz	r0, 80a01a0 <loop+0x34>
    max_x = fabs(a.acceleration.x);
 80a019e:	6034      	str	r4, [r6, #0]
  }

  if (fabs(a.acceleration.y) > fabs(max_y)) {
 80a01a0:	4d76      	ldr	r5, [pc, #472]	; (80a037c <loop+0x210>)
 80a01a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80a01a4:	6829      	ldr	r1, [r5, #0]
 80a01a6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80a01aa:	4620      	mov	r0, r4
 80a01ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a01b0:	f003 ff3a 	bl	80a4028 <__aeabi_fcmpgt>
 80a01b4:	b100      	cbz	r0, 80a01b8 <loop+0x4c>
    max_y = fabs(a.acceleration.y);
 80a01b6:	602c      	str	r4, [r5, #0]
  }

  if (fabs(a.acceleration.z) > fabs(max_z)) {
 80a01b8:	4c71      	ldr	r4, [pc, #452]	; (80a0380 <loop+0x214>)
 80a01ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80a01bc:	6821      	ldr	r1, [r4, #0]
 80a01be:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 80a01c2:	4638      	mov	r0, r7
 80a01c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a01c8:	f003 ff2e 	bl	80a4028 <__aeabi_fcmpgt>
 80a01cc:	b100      	cbz	r0, 80a01d0 <loop+0x64>
    max_z = fabs(a.acceleration.z);
 80a01ce:	6027      	str	r7, [r4, #0]
  }

  if(count > 2000) {
 80a01d0:	4f6c      	ldr	r7, [pc, #432]	; (80a0384 <loop+0x218>)
 80a01d2:	683b      	ldr	r3, [r7, #0]
 80a01d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a01d8:	f340 80c6 	ble.w	80a0368 <loop+0x1fc>
    count = 0;
 80a01dc:	2300      	movs	r3, #0
    if (fabs(max_x) > fabs(pmax_x)) {
 80a01de:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80a03c4 <loop+0x258>
 80a01e2:	f8d6 9000 	ldr.w	r9, [r6]
 80a01e6:	f8d8 1000 	ldr.w	r1, [r8]
    count = 0;
 80a01ea:	603b      	str	r3, [r7, #0]
 80a01ec:	f029 4000 	bic.w	r0, r9, #2147483648	; 0x80000000
 80a01f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    if (fabs(max_x) > fabs(pmax_x)) {
 80a01f4:	f003 ff18 	bl	80a4028 <__aeabi_fcmpgt>
 80a01f8:	b108      	cbz	r0, 80a01fe <loop+0x92>
      pmax_x = max_x;
 80a01fa:	f8c8 9000 	str.w	r9, [r8]
    }
    if (fabs(max_y) > fabs(pmax_y)) {
 80a01fe:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80a03b4 <loop+0x248>
 80a0202:	f8d5 a000 	ldr.w	sl, [r5]
 80a0206:	f8d9 1000 	ldr.w	r1, [r9]
 80a020a:	f02a 4000 	bic.w	r0, sl, #2147483648	; 0x80000000
 80a020e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a0212:	f003 ff09 	bl	80a4028 <__aeabi_fcmpgt>
 80a0216:	b108      	cbz	r0, 80a021c <loop+0xb0>
      pmax_y = max_y;
 80a0218:	f8c9 a000 	str.w	sl, [r9]
    }
    if (fabs(max_z) > fabs(pmax_z)) {
 80a021c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80a03bc <loop+0x250>
 80a0220:	f8d4 a000 	ldr.w	sl, [r4]
 80a0224:	f8d9 1000 	ldr.w	r1, [r9]
 80a0228:	f02a 4000 	bic.w	r0, sl, #2147483648	; 0x80000000
 80a022c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a0230:	f003 fefa 	bl	80a4028 <__aeabi_fcmpgt>
 80a0234:	b108      	cbz	r0, 80a023a <loop+0xce>
      pmax_z = max_z;
 80a0236:	f8c9 a000 	str.w	sl, [r9]
    }
    Serial.println("Max values over last 1000 ticks: "); 
 80a023a:	f002 fc87 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a023e:	4952      	ldr	r1, [pc, #328]	; (80a0388 <loop+0x21c>)
 80a0240:	f001 fedb 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    Serial.print("max_x: "); Serial.print(max_x); Serial.print("  max_y: "); Serial.print(max_y); Serial.print("  max_z: "); Serial.println(max_z);
 80a0244:	f002 fc82 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0248:	4950      	ldr	r1, [pc, #320]	; (80a038c <loop+0x220>)
 80a024a:	f001 fec3 	bl	80a1fd4 <_ZN5Print5printEPKc>
 80a024e:	f002 fc7d 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0252:	2202      	movs	r2, #2
 80a0254:	6831      	ldr	r1, [r6, #0]
 80a0256:	f001 ffb7 	bl	80a21c8 <_ZN5Print5printEfi>
 80a025a:	f002 fc77 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a025e:	494c      	ldr	r1, [pc, #304]	; (80a0390 <loop+0x224>)
 80a0260:	f001 feb8 	bl	80a1fd4 <_ZN5Print5printEPKc>
 80a0264:	f002 fc72 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0268:	2202      	movs	r2, #2
 80a026a:	6829      	ldr	r1, [r5, #0]
 80a026c:	f001 ffac 	bl	80a21c8 <_ZN5Print5printEfi>
 80a0270:	f002 fc6c 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0274:	4947      	ldr	r1, [pc, #284]	; (80a0394 <loop+0x228>)
 80a0276:	f001 fead 	bl	80a1fd4 <_ZN5Print5printEPKc>
 80a027a:	f002 fc67 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a027e:	2202      	movs	r2, #2
 80a0280:	6821      	ldr	r1, [r4, #0]
 80a0282:	f001 ffbe 	bl	80a2202 <_ZN5Print7printlnEfi>
    Particle.publish("max_x", String(max_x));
 80a0286:	2206      	movs	r2, #6
 80a0288:	6831      	ldr	r1, [r6, #0]
 80a028a:	a804      	add	r0, sp, #16
 80a028c:	f001 fe65 	bl	80a1f5a <_ZN6StringC1Efi>
 80a0290:	9a04      	ldr	r2, [sp, #16]
 80a0292:	4941      	ldr	r1, [pc, #260]	; (80a0398 <loop+0x22c>)
 80a0294:	a802      	add	r0, sp, #8
 80a0296:	f7ff ff0d 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a029a:	a803      	add	r0, sp, #12
 80a029c:	f7ff ff50 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02a0:	a804      	add	r0, sp, #16
 80a02a2:	f001 fdff 	bl	80a1ea4 <_ZN6StringD1Ev>
    Particle.publish("max_y", String(max_y));
 80a02a6:	2206      	movs	r2, #6
 80a02a8:	6829      	ldr	r1, [r5, #0]
 80a02aa:	a804      	add	r0, sp, #16
 80a02ac:	f001 fe55 	bl	80a1f5a <_ZN6StringC1Efi>
 80a02b0:	9a04      	ldr	r2, [sp, #16]
 80a02b2:	493a      	ldr	r1, [pc, #232]	; (80a039c <loop+0x230>)
 80a02b4:	a802      	add	r0, sp, #8
 80a02b6:	f7ff fefd 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a02ba:	a803      	add	r0, sp, #12
 80a02bc:	f7ff ff40 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02c0:	a804      	add	r0, sp, #16
 80a02c2:	f001 fdef 	bl	80a1ea4 <_ZN6StringD1Ev>
    Particle.publish("max_z", String(max_z));
 80a02c6:	2206      	movs	r2, #6
 80a02c8:	6821      	ldr	r1, [r4, #0]
 80a02ca:	a804      	add	r0, sp, #16
 80a02cc:	f001 fe45 	bl	80a1f5a <_ZN6StringC1Efi>
 80a02d0:	9a04      	ldr	r2, [sp, #16]
 80a02d2:	4933      	ldr	r1, [pc, #204]	; (80a03a0 <loop+0x234>)
 80a02d4:	a802      	add	r0, sp, #8
 80a02d6:	f7ff feed 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a02da:	a803      	add	r0, sp, #12
 80a02dc:	f7ff ff30 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02e0:	a804      	add	r0, sp, #16
 80a02e2:	f001 fddf 	bl	80a1ea4 <_ZN6StringD1Ev>
    Serial.println("");
 80a02e6:	f002 fc31 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a02ea:	492e      	ldr	r1, [pc, #184]	; (80a03a4 <loop+0x238>)
 80a02ec:	f001 fe85 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    Serial.println("Max values over all ticks: ");
 80a02f0:	f002 fc2c 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a02f4:	492c      	ldr	r1, [pc, #176]	; (80a03a8 <loop+0x23c>)
 80a02f6:	f001 fe80 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    Serial.print("pmax_x: "); Serial.print(pmax_x); Serial.print("  pmax_y: "); Serial.print(pmax_y); Serial.print("  pmax_z: "); Serial.println(pmax_z);
 80a02fa:	f002 fc27 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a02fe:	492b      	ldr	r1, [pc, #172]	; (80a03ac <loop+0x240>)
 80a0300:	f001 fe68 	bl	80a1fd4 <_ZN5Print5printEPKc>
 80a0304:	f002 fc22 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0308:	2202      	movs	r2, #2
 80a030a:	f8d8 1000 	ldr.w	r1, [r8]
 80a030e:	f001 ff5b 	bl	80a21c8 <_ZN5Print5printEfi>
 80a0312:	f002 fc1b 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0316:	4926      	ldr	r1, [pc, #152]	; (80a03b0 <loop+0x244>)
 80a0318:	f001 fe5c 	bl	80a1fd4 <_ZN5Print5printEPKc>
 80a031c:	f002 fc16 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0320:	4b24      	ldr	r3, [pc, #144]	; (80a03b4 <loop+0x248>)
 80a0322:	2202      	movs	r2, #2
 80a0324:	6819      	ldr	r1, [r3, #0]
 80a0326:	f001 ff4f 	bl	80a21c8 <_ZN5Print5printEfi>
 80a032a:	f002 fc0f 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a032e:	4922      	ldr	r1, [pc, #136]	; (80a03b8 <loop+0x24c>)
 80a0330:	f001 fe50 	bl	80a1fd4 <_ZN5Print5printEPKc>
 80a0334:	f002 fc0a 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0338:	4b20      	ldr	r3, [pc, #128]	; (80a03bc <loop+0x250>)
 80a033a:	2202      	movs	r2, #2
 80a033c:	6819      	ldr	r1, [r3, #0]
 80a033e:	f001 ff60 	bl	80a2202 <_ZN5Print7printlnEfi>
    Serial.println("");
 80a0342:	f002 fc03 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0346:	4917      	ldr	r1, [pc, #92]	; (80a03a4 <loop+0x238>)
 80a0348:	f001 fe57 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    Serial.println("-----------------------------------------------------------------------------------------------------");
 80a034c:	f002 fbfe 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a0350:	491b      	ldr	r1, [pc, #108]	; (80a03c0 <loop+0x254>)
 80a0352:	f001 fe52 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    Serial.println("");
 80a0356:	f002 fbf9 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a035a:	4912      	ldr	r1, [pc, #72]	; (80a03a4 <loop+0x238>)
 80a035c:	f001 fe4d 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    max_x = 0;
 80a0360:	2300      	movs	r3, #0
 80a0362:	6033      	str	r3, [r6, #0]
    max_y = 0;
 80a0364:	602b      	str	r3, [r5, #0]
    max_z = 0;
 80a0366:	6023      	str	r3, [r4, #0]
  }
  count++;
 80a0368:	683b      	ldr	r3, [r7, #0]
 80a036a:	3301      	adds	r3, #1
 80a036c:	603b      	str	r3, [r7, #0]
 80a036e:	b02c      	add	sp, #176	; 0xb0
 80a0370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0374:	20000074 	.word	0x20000074
 80a0378:	20000158 	.word	0x20000158
 80a037c:	2000015c 	.word	0x2000015c
 80a0380:	20000160 	.word	0x20000160
 80a0384:	20000070 	.word	0x20000070
 80a0388:	080a45a8 	.word	0x080a45a8
 80a038c:	080a460d 	.word	0x080a460d
 80a0390:	080a45ca 	.word	0x080a45ca
 80a0394:	080a45d4 	.word	0x080a45d4
 80a0398:	080a45de 	.word	0x080a45de
 80a039c:	080a45e4 	.word	0x080a45e4
 80a03a0:	080a45ea 	.word	0x080a45ea
 80a03a4:	080a45c9 	.word	0x080a45c9
 80a03a8:	080a45f0 	.word	0x080a45f0
 80a03ac:	080a460c 	.word	0x080a460c
 80a03b0:	080a4615 	.word	0x080a4615
 80a03b4:	20000168 	.word	0x20000168
 80a03b8:	080a4620 	.word	0x080a4620
 80a03bc:	2000016c 	.word	0x2000016c
 80a03c0:	080a462b 	.word	0x080a462b
 80a03c4:	20000164 	.word	0x20000164

080a03c8 <_GLOBAL__sub_I_lsm>:
        val_(val) {
 80a03c8:	2100      	movs	r1, #0
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <_GLOBAL__sub_I_lsm+0xc>)
Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();
 80a03cc:	4802      	ldr	r0, [pc, #8]	; (80a03d8 <_GLOBAL__sub_I_lsm+0x10>)
 80a03ce:	7019      	strb	r1, [r3, #0]
 80a03d0:	f000 be26 	b.w	80a1020 <_ZN16Adafruit_LSM9DS1C1El>
 80a03d4:	2000006c 	.word	0x2000006c
 80a03d8:	20000074 	.word	0x20000074

080a03dc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a03dc:	4770      	bx	lr

080a03de <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a03de:	4770      	bx	lr

080a03e0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a03e0:	b510      	push	{r4, lr}
 80a03e2:	4604      	mov	r4, r0
  }
 80a03e4:	2110      	movs	r1, #16
 80a03e6:	f002 fe99 	bl	80a311c <_ZdlPvj>
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	bd10      	pop	{r4, pc}
	...

080a03f0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a03f0:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <__tcf_0+0xc>)
 80a03f2:	6898      	ldr	r0, [r3, #8]
 80a03f4:	b108      	cbz	r0, 80a03fa <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a03f6:	f001 b9d3 	b.w	80a17a0 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a03fa:	4770      	bx	lr
 80a03fc:	20000174 	.word	0x20000174

080a0400 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0400:	b40e      	push	{r1, r2, r3}
 80a0402:	b503      	push	{r0, r1, lr}
 80a0404:	ab03      	add	r3, sp, #12
 80a0406:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a040a:	2100      	movs	r1, #0
        va_start(args, format);
 80a040c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a040e:	f001 ff06 	bl	80a221e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0412:	b002      	add	sp, #8
 80a0414:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0418:	b003      	add	sp, #12
 80a041a:	4770      	bx	lr

080a041c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a041c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a041e:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 80a0420:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a0422:	4608      	mov	r0, r1
 80a0424:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 80a0426:	b132      	cbz	r2, 80a0436 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a0428:	b9a3      	cbnz	r3, 80a0454 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a042a:	490b      	ldr	r1, [pc, #44]	; (80a0458 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 80a042c:	b002      	add	sp, #8
 80a042e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a0432:	f001 bdcf 	b.w	80a1fd4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0436:	4a09      	ldr	r2, [pc, #36]	; (80a045c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a0438:	7b26      	ldrb	r6, [r4, #12]
 80a043a:	4d09      	ldr	r5, [pc, #36]	; (80a0460 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a043c:	4909      	ldr	r1, [pc, #36]	; (80a0464 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a043e:	7b64      	ldrb	r4, [r4, #13]
 80a0440:	2e01      	cmp	r6, #1
 80a0442:	bf18      	it	ne
 80a0444:	4629      	movne	r1, r5
 80a0446:	e9cd 1400 	strd	r1, r4, [sp]
 80a044a:	4907      	ldr	r1, [pc, #28]	; (80a0468 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a044c:	f7ff ffd8 	bl	80a0400 <_ZN5Print6printfEPKcz>
  }
 80a0450:	b002      	add	sp, #8
 80a0452:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0454:	4a05      	ldr	r2, [pc, #20]	; (80a046c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a0456:	e7ef      	b.n	80a0438 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a0458:	080a46a2 	.word	0x080a46a2
 80a045c:	080a45c9 	.word	0x080a45c9
 80a0460:	080a469e 	.word	0x080a469e
 80a0464:	080a469a 	.word	0x080a469a
 80a0468:	080a46b8 	.word	0x080a46b8
 80a046c:	080a4691 	.word	0x080a4691

080a0470 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a0470:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a0472:	4d0b      	ldr	r5, [pc, #44]	; (80a04a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 80a0474:	7829      	ldrb	r1, [r5, #0]
 80a0476:	f3bf 8f5b 	dmb	ish
 80a047a:	f011 0401 	ands.w	r4, r1, #1
 80a047e:	d10d      	bne.n	80a049c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a0480:	4628      	mov	r0, r5
 80a0482:	f7ff fe0e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0486:	b148      	cbz	r0, 80a049c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a0488:	4621      	mov	r1, r4
 80a048a:	4806      	ldr	r0, [pc, #24]	; (80a04a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a048c:	f001 fbab 	bl	80a1be6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0490:	4628      	mov	r0, r5
 80a0492:	f7ff fe0b 	bl	80a00ac <__cxa_guard_release>
 80a0496:	4804      	ldr	r0, [pc, #16]	; (80a04a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a0498:	f003 ff6a 	bl	80a4370 <atexit>
        return instance;
    }
 80a049c:	4801      	ldr	r0, [pc, #4]	; (80a04a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a049e:	bd38      	pop	{r3, r4, r5, pc}
 80a04a0:	20000170 	.word	0x20000170
 80a04a4:	20000174 	.word	0x20000174
 80a04a8:	080a03f1 	.word	0x080a03f1

080a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 80a04ac:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 80a04ae:	2500      	movs	r5, #0
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
 80a04b0:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
 80a04b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
  _i2cdevice = i2cdevice;
 80a04b6:	e9c0 1200 	strd	r1, r2, [r0]
  _addrwidth = address_width;
 80a04ba:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
 80a04bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint8_t byteorder, uint8_t address_width) {
 80a04c0:	6145      	str	r5, [r0, #20]
  _address = reg_addr;
 80a04c2:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
 80a04c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a04c8:	7383      	strb	r3, [r0, #14]
  _width = width;
 80a04ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80a04ce:	7303      	strb	r3, [r0, #12]
}
 80a04d0:	bd30      	pop	{r4, r5, pc}

080a04d2 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a04d2:	4603      	mov	r3, r0
 80a04d4:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 80a04d6:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a04d8:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 80a04da:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 80a04de:	f8ad 000c 	strh.w	r0, [sp, #12]

  if (_i2cdevice) {
 80a04e2:	6818      	ldr	r0, [r3, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 80a04e4:	460e      	mov	r6, r1
 80a04e6:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 80a04e8:	7a9c      	ldrb	r4, [r3, #10]
  if (_i2cdevice) {
 80a04ea:	b140      	cbz	r0, 80a04fe <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 80a04ec:	7b5b      	ldrb	r3, [r3, #13]
 80a04ee:	9301      	str	r3, [sp, #4]
 80a04f0:	ab03      	add	r3, sp, #12
 80a04f2:	9300      	str	r3, [sp, #0]
 80a04f4:	2301      	movs	r3, #1
 80a04f6:	f000 faf3 	bl	80a0ae0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 80a04fa:	b005      	add	sp, #20
 80a04fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 80a04fe:	6858      	ldr	r0, [r3, #4]
 80a0500:	2800      	cmp	r0, #0
 80a0502:	d0fa      	beq.n	80a04fa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 80a0504:	f893 c008 	ldrb.w	ip, [r3, #8]
 80a0508:	7b5d      	ldrb	r5, [r3, #13]
 80a050a:	f1bc 0f03 	cmp.w	ip, #3
 80a050e:	d10b      	bne.n	80a0528 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 80a0510:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 80a0514:	3501      	adds	r5, #1
      addrbuffer[0] =
 80a0516:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 80a051a:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 80a051e:	9500      	str	r5, [sp, #0]
 80a0520:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 80a0522:	f000 fa4c 	bl	80a09be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a0526:	e7e8      	b.n	80a04fa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 80a0528:	f1bc 0f00 	cmp.w	ip, #0
 80a052c:	d108      	bne.n	80a0540 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
 80a052e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 80a0532:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 80a0536:	463a      	mov	r2, r7
 80a0538:	4631      	mov	r1, r6
 80a053a:	9500      	str	r5, [sp, #0]
 80a053c:	ab03      	add	r3, sp, #12
 80a053e:	e7f0      	b.n	80a0522 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 80a0540:	f1bc 0f02 	cmp.w	ip, #2
 80a0544:	d102      	bne.n	80a054c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
 80a0546:	f064 047f 	orn	r4, r4, #127	; 0x7f
 80a054a:	e7f2      	b.n	80a0532 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 80a054c:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
 80a0550:	bf01      	itttt	eq
 80a0552:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80a0556:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 80a055a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 80a055e:	f88d 300c 	strbeq.w	r3, [sp, #12]
 80a0562:	e7e8      	b.n	80a0536 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

080a0564 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 80a0564:	b4f0      	push	{r4, r5, r6, r7}
 80a0566:	4603      	mov	r3, r0
 80a0568:	460c      	mov	r4, r1
  if (numbytes == 0) {
 80a056a:	b902      	cbnz	r2, 80a056e <_ZN23Adafruit_BusIO_Register5writeEmh+0xa>
    numbytes = _width;
 80a056c:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 80a056e:	2a04      	cmp	r2, #4
 80a0570:	d813      	bhi.n	80a059a <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 80a0572:	f103 050f 	add.w	r5, r3, #15
 80a0576:	4629      	mov	r1, r5
 80a0578:	615c      	str	r4, [r3, #20]

  for (int i = 0; i < numbytes; i++) {
 80a057a:	1898      	adds	r0, r3, r2
 80a057c:	4298      	cmp	r0, r3
 80a057e:	d009      	beq.n	80a0594 <_ZN23Adafruit_BusIO_Register5writeEmh+0x30>
    if (_byteorder == LSBFIRST) {
 80a0580:	7b9f      	ldrb	r7, [r3, #14]
 80a0582:	b2e6      	uxtb	r6, r4
 80a0584:	b927      	cbnz	r7, 80a0590 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2c>
      _buffer[i] = value & 0xFF;
 80a0586:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 80a0588:	0a24      	lsrs	r4, r4, #8
  for (int i = 0; i < numbytes; i++) {
 80a058a:	3501      	adds	r5, #1
 80a058c:	3801      	subs	r0, #1
 80a058e:	e7f5      	b.n	80a057c <_ZN23Adafruit_BusIO_Register5writeEmh+0x18>
      _buffer[numbytes - i - 1] = value & 0xFF;
 80a0590:	7386      	strb	r6, [r0, #14]
 80a0592:	e7f9      	b.n	80a0588 <_ZN23Adafruit_BusIO_Register5writeEmh+0x24>
  }
  return write(_buffer, numbytes);
}
 80a0594:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 80a0596:	f7ff bf9c 	b.w	80a04d2 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 80a059a:	2000      	movs	r0, #0
 80a059c:	bcf0      	pop	{r4, r5, r6, r7}
 80a059e:	4770      	bx	lr

080a05a0 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a05a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a05a2:	460b      	mov	r3, r1
 80a05a4:	4604      	mov	r4, r0
 80a05a6:	4611      	mov	r1, r2
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
 80a05a8:	7a85      	ldrb	r5, [r0, #10]
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 80a05aa:	8942      	ldrh	r2, [r0, #10]

  if (_i2cdevice) {
 80a05ac:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 80a05ae:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 80a05b0:	0a17      	lsrs	r7, r2, #8
 80a05b2:	f8ad 200c 	strh.w	r2, [sp, #12]
  if (_i2cdevice) {
 80a05b6:	b140      	cbz	r0, 80a05ca <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a05b8:	2200      	movs	r2, #0
 80a05ba:	e9cd 1200 	strd	r1, r2, [sp]
 80a05be:	a903      	add	r1, sp, #12
 80a05c0:	7b62      	ldrb	r2, [r4, #13]
 80a05c2:	f000 fafb 	bl	80a0bbc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 80a05c6:	b005      	add	sp, #20
 80a05c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 80a05ca:	6860      	ldr	r0, [r4, #4]
 80a05cc:	2800      	cmp	r0, #0
 80a05ce:	d0fa      	beq.n	80a05c6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 80a05d0:	7a26      	ldrb	r6, [r4, #8]
 80a05d2:	7b62      	ldrb	r2, [r4, #13]
 80a05d4:	2e03      	cmp	r6, #3
 80a05d6:	d10d      	bne.n	80a05f4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 80a05d8:	24ff      	movs	r4, #255	; 0xff
 80a05da:	e9cd 1400 	strd	r1, r4, [sp]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 80a05de:	f047 0701 	orr.w	r7, r7, #1
      addrbuffer[0] =
 80a05e2:	f88d 700c 	strb.w	r7, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 80a05e6:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 80a05ea:	3201      	adds	r2, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a05ec:	a903      	add	r1, sp, #12
 80a05ee:	f000 fa18 	bl	80a0a22 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 80a05f2:	e7e8      	b.n	80a05c6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 80a05f4:	b93e      	cbnz	r6, 80a0606 <_ZN23Adafruit_BusIO_Register4readEPhh+0x66>
      addrbuffer[0] |= 0x80;
 80a05f6:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 80a05fa:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 80a05fe:	24ff      	movs	r4, #255	; 0xff
 80a0600:	e9cd 1400 	strd	r1, r4, [sp]
 80a0604:	e7f2      	b.n	80a05ec <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 80a0606:	2e02      	cmp	r6, #2
 80a0608:	d102      	bne.n	80a0610 <_ZN23Adafruit_BusIO_Register4readEPhh+0x70>
      addrbuffer[0] &= ~0x80;
 80a060a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 80a060e:	e7f4      	b.n	80a05fa <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 80a0610:	2e01      	cmp	r6, #1
      addrbuffer[0] |= 0x80 | 0x40;
 80a0612:	bf02      	ittt	eq
 80a0614:	f89d 400c 	ldrbeq.w	r4, [sp, #12]
 80a0618:	f064 043f 	orneq	r4, r4, #63	; 0x3f
 80a061c:	f88d 400c 	strbeq.w	r4, [sp, #12]
 80a0620:	e7ed      	b.n	80a05fe <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

080a0622 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
 80a0622:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
 80a0624:	f100 050f 	add.w	r5, r0, #15
 80a0628:	4629      	mov	r1, r5
 80a062a:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
 80a062c:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
 80a062e:	f7ff ffb7 	bl	80a05a0 <_ZN23Adafruit_BusIO_Register4readEPhh>
 80a0632:	b178      	cbz	r0, 80a0654 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
 80a0634:	4629      	mov	r1, r5
  uint32_t value = 0;
 80a0636:	2000      	movs	r0, #0
 80a0638:	7b23      	ldrb	r3, [r4, #12]
 80a063a:	4423      	add	r3, r4
  for (int i = 0; i < _width; i++) {
 80a063c:	42a3      	cmp	r3, r4
 80a063e:	d00b      	beq.n	80a0658 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    if (_byteorder == LSBFIRST) {
 80a0640:	7ba2      	ldrb	r2, [r4, #14]
    value <<= 8;
 80a0642:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
 80a0644:	b922      	cbnz	r2, 80a0650 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
 80a0646:	7b9a      	ldrb	r2, [r3, #14]
      value |= _buffer[i];
 80a0648:	4310      	orrs	r0, r2
  for (int i = 0; i < _width; i++) {
 80a064a:	3b01      	subs	r3, #1
 80a064c:	3101      	adds	r1, #1
 80a064e:	e7f5      	b.n	80a063c <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
 80a0650:	780a      	ldrb	r2, [r1, #0]
 80a0652:	e7f9      	b.n	80a0648 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
 80a0654:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a0658:	bd38      	pop	{r3, r4, r5, pc}

080a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 80a065a:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 80a065c:	6001      	str	r1, [r0, #0]
  _bits = bits;
 80a065e:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 80a0660:	7143      	strb	r3, [r0, #5]
}
 80a0662:	bd10      	pop	{r4, pc}

080a0664 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 80a0664:	b510      	push	{r4, lr}
 80a0666:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 80a0668:	6800      	ldr	r0, [r0, #0]
 80a066a:	f7ff ffda 	bl	80a0622 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
 80a066e:	2301      	movs	r3, #1
 80a0670:	7922      	ldrb	r2, [r4, #4]
 80a0672:	4093      	lsls	r3, r2
  val >>= _shift;
 80a0674:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
 80a0676:	3b01      	subs	r3, #1
  val >>= _shift;
 80a0678:	40d0      	lsrs	r0, r2
}
 80a067a:	4018      	ands	r0, r3
 80a067c:	bd10      	pop	{r4, pc}

080a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 80a067e:	b570      	push	{r4, r5, r6, lr}
 80a0680:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 80a0682:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 80a0684:	460e      	mov	r6, r1
  uint32_t val = _register->read();
 80a0686:	f7ff ffcc 	bl	80a0622 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 80a068a:	2201      	movs	r2, #1
 80a068c:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
 80a068e:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
 80a0690:	409a      	lsls	r2, r3
 80a0692:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
 80a0694:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
 80a0698:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
 80a069c:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
 80a069e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
 80a06a0:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
 80a06a4:	4329      	orrs	r1, r5
 80a06a6:	7b02      	ldrb	r2, [r0, #12]
}
 80a06a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
 80a06ac:	f7ff bf5a 	b.w	80a0564 <_ZN23Adafruit_BusIO_Register5writeEmh>

080a06b0 <_ZN18Adafruit_SPIDeviceC1Eam9_BitOrderhP8SPIClass>:
 *    @param  dataOrder The SPI data order to use for bits within each byte,
 * defaults to SPI_BITORDER_MSBFIRST
 *    @param  dataMode The SPI mode to use, defaults to SPI_MODE0
 *    @param  theSPI The SPI bus to use, defaults to &theSPI
 */
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, uint32_t freq,
 80a06b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a06b4:	461d      	mov	r5, r3
                                       BusIOBitOrder dataOrder,
                                       uint8_t dataMode, SPIClass *theSPI) {
  _cs = cspin;
  _sck = _mosi = _miso = -1;
 80a06b6:	23ff      	movs	r3, #255	; 0xff
 80a06b8:	73c3      	strb	r3, [r0, #15]
 80a06ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
  _spi = theSPI;
  _begun = false;
 80a06be:	f04f 0800 	mov.w	r8, #0
  _sck = _mosi = _miso = -1;
 80a06c2:	8203      	strh	r3, [r0, #16]
  _spi = theSPI;
 80a06c4:	9b07      	ldr	r3, [sp, #28]
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, uint32_t freq,
 80a06c6:	4604      	mov	r4, r0
  _cs = cspin;
 80a06c8:	7381      	strb	r1, [r0, #14]
  _spi = theSPI;
 80a06ca:	6003      	str	r3, [r0, #0]
  _begun = false;
 80a06cc:	f880 8034 	strb.w	r8, [r0, #52]	; 0x34
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 80a06d0:	2010      	movs	r0, #16
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, uint32_t freq,
 80a06d2:	4616      	mov	r6, r2
 80a06d4:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 80a06d8:	f7ff fcdd 	bl	80a0096 <_Znwj>
 80a06dc:	b130      	cbz	r0, 80a06ec <_ZN18Adafruit_SPIDeviceC1Eam9_BitOrderhP8SPIClass+0x3c>
      dataMode_{dataMode}
 80a06de:	4b07      	ldr	r3, [pc, #28]	; (80a06fc <_ZN18Adafruit_SPIDeviceC1Eam9_BitOrderhP8SPIClass+0x4c>)
 80a06e0:	f880 8004 	strb.w	r8, [r0, #4]
 80a06e4:	6003      	str	r3, [r0, #0]
 80a06e6:	6086      	str	r6, [r0, #8]
 80a06e8:	7305      	strb	r5, [r0, #12]
 80a06ea:	7347      	strb	r7, [r0, #13]
  _freq = freq;
 80a06ec:	e9c4 0601 	strd	r0, r6, [r4, #4]
  _dataOrder = dataOrder;
 80a06f0:	7325      	strb	r5, [r4, #12]
  _dataMode = dataMode;
}
 80a06f2:	4620      	mov	r0, r4
  _dataMode = dataMode;
 80a06f4:	7367      	strb	r7, [r4, #13]
}
 80a06f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a06fa:	bf00      	nop
 80a06fc:	080a46e0 	.word	0x080a46e0

080a0700 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>:
 *    @param  freq The SPI clock frequency to use, defaults to 1MHz
 *    @param  dataOrder The SPI data order to use for bits within each byte,
 * defaults to SPI_BITORDER_MSBFIRST
 *    @param  dataMode The SPI mode to use, defaults to SPI_MODE0
 */
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
 80a0700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0704:	468b      	mov	fp, r1
  _sck = sckpin;
  _miso = misopin;
  _mosi = mosipin;

#ifdef BUSIO_USE_FAST_PINIO
  csPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(cspin));
 80a0706:	261c      	movs	r6, #28
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
 80a0708:	f99d 9028 	ldrsb.w	r9, [sp, #40]	; 0x28
  _cs = cspin;
 80a070c:	7381      	strb	r1, [r0, #14]
  _sck = sckpin;
 80a070e:	73c2      	strb	r2, [r0, #15]
  _miso = misopin;
 80a0710:	7443      	strb	r3, [r0, #17]
  _mosi = mosipin;
 80a0712:	f880 9010 	strb.w	r9, [r0, #16]
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
 80a0716:	4604      	mov	r4, r0
 80a0718:	4692      	mov	sl, r2
 80a071a:	461d      	mov	r5, r3
 80a071c:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 80a0720:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
  csPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(cspin));
 80a0724:	f000 fffc 	bl	80a1720 <HAL_Pin_Map>
 80a0728:	fb06 fb0b 	mul.w	fp, r6, fp
 80a072c:	f850 200b 	ldr.w	r2, [r0, fp]
 80a0730:	3214      	adds	r2, #20
 80a0732:	6222      	str	r2, [r4, #32]
  csPinMask = digitalPinToBitMask(cspin);
 80a0734:	f000 fff4 	bl	80a1720 <HAL_Pin_Map>
 80a0738:	4483      	add	fp, r0
 80a073a:	f8bb 2004 	ldrh.w	r2, [fp, #4]
  if (mosipin != -1) {
 80a073e:	f1b9 3fff 	cmp.w	r9, #4294967295
  csPinMask = digitalPinToBitMask(cspin);
 80a0742:	6322      	str	r2, [r4, #48]	; 0x30
  if (mosipin != -1) {
 80a0744:	d00b      	beq.n	80a075e <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0x5e>
    mosiPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(mosipin));
 80a0746:	f000 ffeb 	bl	80a1720 <HAL_Pin_Map>
 80a074a:	fb06 f609 	mul.w	r6, r6, r9
 80a074e:	5983      	ldr	r3, [r0, r6]
 80a0750:	3314      	adds	r3, #20
 80a0752:	6163      	str	r3, [r4, #20]
    mosiPinMask = digitalPinToBitMask(mosipin);
 80a0754:	f000 ffe4 	bl	80a1720 <HAL_Pin_Map>
 80a0758:	4406      	add	r6, r0
 80a075a:	88b3      	ldrh	r3, [r6, #4]
 80a075c:	6263      	str	r3, [r4, #36]	; 0x24
  }
  if (misopin != -1) {
 80a075e:	1c6b      	adds	r3, r5, #1
 80a0760:	d00b      	beq.n	80a077a <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0x7a>
    misoPort = (BusIO_PortReg *)portInputRegister(digitalPinToPort(misopin));
 80a0762:	f000 ffdd 	bl	80a1720 <HAL_Pin_Map>
 80a0766:	231c      	movs	r3, #28
 80a0768:	435d      	muls	r5, r3
 80a076a:	5943      	ldr	r3, [r0, r5]
 80a076c:	3310      	adds	r3, #16
 80a076e:	61e3      	str	r3, [r4, #28]
    misoPinMask = digitalPinToBitMask(misopin);
 80a0770:	f000 ffd6 	bl	80a1720 <HAL_Pin_Map>
 80a0774:	4405      	add	r5, r0
 80a0776:	88ab      	ldrh	r3, [r5, #4]
 80a0778:	62a3      	str	r3, [r4, #40]	; 0x28
  }
  clkPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(sckpin));
 80a077a:	251c      	movs	r5, #28
 80a077c:	f000 ffd0 	bl	80a1720 <HAL_Pin_Map>
 80a0780:	fb05 f50a 	mul.w	r5, r5, sl
 80a0784:	5943      	ldr	r3, [r0, r5]
 80a0786:	3314      	adds	r3, #20
 80a0788:	61a3      	str	r3, [r4, #24]
  clkPinMask = digitalPinToBitMask(sckpin);
 80a078a:	f000 ffc9 	bl	80a1720 <HAL_Pin_Map>
 80a078e:	4405      	add	r5, r0
 80a0790:	88ab      	ldrh	r3, [r5, #4]
#endif

  _freq = freq;
  _dataOrder = dataOrder;
  _dataMode = dataMode;
  _begun = false;
 80a0792:	2500      	movs	r5, #0
  clkPinMask = digitalPinToBitMask(sckpin);
 80a0794:	62e3      	str	r3, [r4, #44]	; 0x2c
  _freq = freq;
 80a0796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 80a0798:	2010      	movs	r0, #16
  _freq = freq;
 80a079a:	60a3      	str	r3, [r4, #8]
  _dataOrder = dataOrder;
 80a079c:	f884 800c 	strb.w	r8, [r4, #12]
  _dataMode = dataMode;
 80a07a0:	7367      	strb	r7, [r4, #13]
  _begun = false;
 80a07a2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 80a07a6:	f7ff fc76 	bl	80a0096 <_Znwj>
 80a07aa:	b138      	cbz	r0, 80a07bc <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xbc>
 80a07ac:	4b06      	ldr	r3, [pc, #24]	; (80a07c8 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xc8>)
 80a07ae:	7105      	strb	r5, [r0, #4]
 80a07b0:	6003      	str	r3, [r0, #0]
 80a07b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a07b4:	f880 800c 	strb.w	r8, [r0, #12]
 80a07b8:	6083      	str	r3, [r0, #8]
 80a07ba:	7347      	strb	r7, [r0, #13]
  _spi = NULL;
 80a07bc:	2300      	movs	r3, #0
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
 80a07be:	6060      	str	r0, [r4, #4]
  _spi = NULL;
 80a07c0:	6023      	str	r3, [r4, #0]
}
 80a07c2:	4620      	mov	r0, r4
 80a07c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a07c8:	080a46e0 	.word	0x080a46e0

080a07cc <_ZN18Adafruit_SPIDeviceD1Ev>:

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 80a07cc:	b510      	push	{r4, lr}
 80a07ce:	4604      	mov	r4, r0
  if (_spiSetting) {
 80a07d0:	6840      	ldr	r0, [r0, #4]
 80a07d2:	b110      	cbz	r0, 80a07da <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 80a07d4:	6803      	ldr	r3, [r0, #0]
 80a07d6:	689b      	ldr	r3, [r3, #8]
 80a07d8:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 80a07da:	4620      	mov	r0, r4
 80a07dc:	bd10      	pop	{r4, pc}

080a07de <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 80a07de:	b538      	push	{r3, r4, r5, lr}
 80a07e0:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
 80a07e2:	f990 000e 	ldrsb.w	r0, [r0, #14]
 80a07e6:	2101      	movs	r1, #1
 80a07e8:	b280      	uxth	r0, r0
 80a07ea:	f002 fc21 	bl	80a3030 <pinMode>
  digitalWrite(_cs, HIGH);
 80a07ee:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a07f2:	2101      	movs	r1, #1
 80a07f4:	b280      	uxth	r0, r0
 80a07f6:	f002 fc2c 	bl	80a3052 <digitalWrite>

  if (_spi) { // hardware SPI
 80a07fa:	6825      	ldr	r5, [r4, #0]
 80a07fc:	b135      	cbz	r5, 80a080c <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
 80a07fe:	4628      	mov	r0, r5
 80a0800:	f001 fa00 	bl	80a1c04 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 80a0804:	2001      	movs	r0, #1
 80a0806:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 80a080a:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 80a080c:	f994 000f 	ldrsb.w	r0, [r4, #15]
 80a0810:	2101      	movs	r1, #1
 80a0812:	b280      	uxth	r0, r0
 80a0814:	f002 fc0c 	bl	80a3030 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 80a0818:	7b63      	ldrb	r3, [r4, #13]
 80a081a:	f994 000f 	ldrsb.w	r0, [r4, #15]
 80a081e:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 80a0820:	bf94      	ite	ls
 80a0822:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 80a0824:	2101      	movhi	r1, #1
 80a0826:	b280      	uxth	r0, r0
 80a0828:	f002 fc13 	bl	80a3052 <digitalWrite>
    if (_mosi != -1) {
 80a082c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0830:	1c42      	adds	r2, r0, #1
 80a0832:	d009      	beq.n	80a0848 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
 80a0834:	2101      	movs	r1, #1
 80a0836:	b280      	uxth	r0, r0
 80a0838:	f002 fbfa 	bl	80a3030 <pinMode>
      digitalWrite(_mosi, HIGH);
 80a083c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0840:	2101      	movs	r1, #1
 80a0842:	b280      	uxth	r0, r0
 80a0844:	f002 fc05 	bl	80a3052 <digitalWrite>
    if (_miso != -1) {
 80a0848:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a084c:	1c43      	adds	r3, r0, #1
 80a084e:	d0d9      	beq.n	80a0804 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
 80a0850:	2100      	movs	r1, #0
 80a0852:	b280      	uxth	r0, r0
 80a0854:	f002 fbec 	bl	80a3030 <pinMode>
 80a0858:	e7d4      	b.n	80a0804 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

080a085c <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 80a085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0860:	4604      	mov	r4, r0
  if (_spi) {
 80a0862:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 80a0864:	460d      	mov	r5, r1
 80a0866:	4613      	mov	r3, r2
 80a0868:	b085      	sub	sp, #20
  if (_spi) {
 80a086a:	b138      	cbz	r0, 80a087c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 80a086c:	2200      	movs	r2, #0
 80a086e:	9200      	str	r2, [sp, #0]
 80a0870:	460a      	mov	r2, r1
 80a0872:	f001 fa5b 	bl	80a1d2c <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 80a0876:	b005      	add	sp, #20
 80a0878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 80a087c:	7b22      	ldrb	r2, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a087e:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 80a0880:	2a00      	cmp	r2, #0
 80a0882:	bf0c      	ite	eq
 80a0884:	f04f 0b01 	moveq.w	fp, #1
 80a0888:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a088c:	780a      	ldrb	r2, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a088e:	4f44      	ldr	r7, [pc, #272]	; (80a09a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a0890:	ea1b 0f02 	tst.w	fp, r2
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a0894:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 80a0898:	bf0c      	ite	eq
 80a089a:	f04f 0901 	moveq.w	r9, #1
 80a089e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 80a08a2:	18cb      	adds	r3, r1, r3
 80a08a4:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 80a08a6:	9303      	str	r3, [sp, #12]
 80a08a8:	9b03      	ldr	r3, [sp, #12]
 80a08aa:	42ab      	cmp	r3, r5
 80a08ac:	d0e3      	beq.n	80a0876 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 80a08ae:	465e      	mov	r6, fp
    uint8_t reply = 0;
 80a08b0:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 80a08b4:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 80a08b8:	b117      	cbz	r7, 80a08c0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a08ba:	4638      	mov	r0, r7
 80a08bc:	f000 ff58 	bl	80a1770 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 80a08c0:	7b63      	ldrb	r3, [r4, #13]
 80a08c2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80a08c6:	d141      	bne.n	80a094c <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 80a08c8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80a08cc:	1c5a      	adds	r2, r3, #1
 80a08ce:	d00f      	beq.n	80a08f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 80a08d0:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 80a08d4:	bf14      	ite	ne
 80a08d6:	2301      	movne	r3, #1
 80a08d8:	2300      	moveq	r3, #0
 80a08da:	454b      	cmp	r3, r9
 80a08dc:	d008      	beq.n	80a08f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
          if (towrite)
 80a08de:	6963      	ldr	r3, [r4, #20]
 80a08e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
 80a08e2:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 80a08e4:	2900      	cmp	r1, #0
 80a08e6:	d02c      	beq.n	80a0942 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 80a08e8:	f04f 0901 	mov.w	r9, #1
 80a08ec:	4302      	orrs	r2, r0
 80a08ee:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 80a08f0:	69a1      	ldr	r1, [r4, #24]
 80a08f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a08f4:	680a      	ldr	r2, [r1, #0]
 80a08f6:	4313      	orrs	r3, r2
 80a08f8:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 80a08fa:	b117      	cbz	r7, 80a0902 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 80a08fc:	4638      	mov	r0, r7
 80a08fe:	f000 ff37 	bl	80a1770 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 80a0902:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a0906:	3301      	adds	r3, #1
 80a0908:	d006      	beq.n	80a0918 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 80a090a:	69e3      	ldr	r3, [r4, #28]
 80a090c:	681a      	ldr	r2, [r3, #0]
 80a090e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0910:	421a      	tst	r2, r3
            reply |= b;
 80a0912:	bf18      	it	ne
 80a0914:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 80a0918:	69a1      	ldr	r1, [r4, #24]
 80a091a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a091c:	680a      	ldr	r2, [r1, #0]
 80a091e:	ea22 0303 	bic.w	r3, r2, r3
 80a0922:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 80a0924:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a0928:	3301      	adds	r3, #1
        buffer[i] = reply;
 80a092a:	bf18      	it	ne
 80a092c:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 80a0930:	7b23      	ldrb	r3, [r4, #12]
 80a0932:	2b00      	cmp	r3, #0
 80a0934:	d132      	bne.n	80a099c <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 80a0936:	0076      	lsls	r6, r6, #1
 80a0938:	b2f6      	uxtb	r6, r6
 80a093a:	2e00      	cmp	r6, #0
 80a093c:	d1bc      	bne.n	80a08b8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 80a093e:	3501      	adds	r5, #1
 80a0940:	e7b2      	b.n	80a08a8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 80a0942:	ea22 0200 	bic.w	r2, r2, r0
 80a0946:	4689      	mov	r9, r1
 80a0948:	601a      	str	r2, [r3, #0]
 80a094a:	e7d1      	b.n	80a08f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 80a094c:	69a1      	ldr	r1, [r4, #24]
 80a094e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a0950:	680a      	ldr	r2, [r1, #0]
 80a0952:	4313      	orrs	r3, r2
 80a0954:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 80a0956:	b117      	cbz	r7, 80a095e <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 80a0958:	4638      	mov	r0, r7
 80a095a:	f000 ff09 	bl	80a1770 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 80a095e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80a0962:	3301      	adds	r3, #1
 80a0964:	d008      	beq.n	80a0978 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
          if (send & b)
 80a0966:	6963      	ldr	r3, [r4, #20]
 80a0968:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
 80a096a:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 80a096c:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 80a0970:	bf14      	ite	ne
 80a0972:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 80a0974:	438a      	biceq	r2, r1
 80a0976:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 80a0978:	69a1      	ldr	r1, [r4, #24]
 80a097a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a097c:	680a      	ldr	r2, [r1, #0]
 80a097e:	ea22 0303 	bic.w	r3, r2, r3
 80a0982:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 80a0984:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80a0988:	3301      	adds	r3, #1
 80a098a:	d0cb      	beq.n	80a0924 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 80a098c:	69e3      	ldr	r3, [r4, #28]
 80a098e:	681a      	ldr	r2, [r3, #0]
 80a0990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0992:	421a      	tst	r2, r3
            reply |= b;
 80a0994:	bf18      	it	ne
 80a0996:	ea46 0808 	orrne.w	r8, r6, r8
 80a099a:	e7c3      	b.n	80a0924 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 80a099c:	0876      	lsrs	r6, r6, #1
 80a099e:	e7cc      	b.n	80a093a <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 80a09a0:	0007a120 	.word	0x0007a120

080a09a4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 80a09a4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 80a09a6:	2201      	movs	r2, #1
  uint8_t data = send;
 80a09a8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 80a09ac:	f10d 0107 	add.w	r1, sp, #7
 80a09b0:	f7ff ff54 	bl	80a085c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 80a09b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a09b8:	b003      	add	sp, #12
 80a09ba:	f85d fb04 	ldr.w	pc, [sp], #4

080a09be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 80a09be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a09c2:	4604      	mov	r4, r0
  if (_spi) {
 80a09c4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 80a09c6:	460e      	mov	r6, r1
 80a09c8:	4617      	mov	r7, r2
 80a09ca:	461d      	mov	r5, r3
  if (_spi) {
 80a09cc:	b110      	cbz	r0, 80a09d4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 80a09ce:	6861      	ldr	r1, [r4, #4]
 80a09d0:	f001 f940 	bl	80a1c54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 80a09d4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a09d8:	2100      	movs	r1, #0
 80a09da:	b280      	uxth	r0, r0
 80a09dc:	f002 fb39 	bl	80a3052 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 80a09e0:	9b06      	ldr	r3, [sp, #24]
 80a09e2:	eb05 0803 	add.w	r8, r5, r3
 80a09e6:	4545      	cmp	r5, r8
 80a09e8:	d108      	bne.n	80a09fc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 80a09ea:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 80a09ec:	42b7      	cmp	r7, r6
 80a09ee:	d00b      	beq.n	80a0a08 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 80a09f0:	4620      	mov	r0, r4
 80a09f2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a09f6:	f7ff ffd5 	bl	80a09a4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 80a09fa:	e7f7      	b.n	80a09ec <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 80a09fc:	4620      	mov	r0, r4
 80a09fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a02:	f7ff ffcf 	bl	80a09a4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 80a0a06:	e7ee      	b.n	80a09e6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 80a0a08:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a0a0c:	2101      	movs	r1, #1
 80a0a0e:	b280      	uxth	r0, r0
 80a0a10:	f002 fb1f 	bl	80a3052 <digitalWrite>

  if (_spi) {
 80a0a14:	6820      	ldr	r0, [r4, #0]
 80a0a16:	b108      	cbz	r0, 80a0a1c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 80a0a18:	f001 f902 	bl	80a1c20 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a0a1c:	2001      	movs	r0, #1
 80a0a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a22 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 80a0a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a26:	4604      	mov	r4, r0
  if (_spi) {
 80a0a28:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 80a0a2a:	460e      	mov	r6, r1
 80a0a2c:	4617      	mov	r7, r2
 80a0a2e:	461d      	mov	r5, r3
 80a0a30:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 80a0a34:	b110      	cbz	r0, 80a0a3c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 80a0a36:	6861      	ldr	r1, [r4, #4]
 80a0a38:	f001 f90c 	bl	80a1c54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 80a0a3c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a0a40:	2100      	movs	r1, #0
 80a0a42:	b280      	uxth	r0, r0
 80a0a44:	f002 fb05 	bl	80a3052 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 80a0a48:	4437      	add	r7, r6
 80a0a4a:	42be      	cmp	r6, r7
 80a0a4c:	d10a      	bne.n	80a0a64 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 80a0a4e:	9b06      	ldr	r3, [sp, #24]
 80a0a50:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 80a0a52:	42ae      	cmp	r6, r5
 80a0a54:	d00c      	beq.n	80a0a70 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 80a0a56:	4641      	mov	r1, r8
 80a0a58:	4620      	mov	r0, r4
 80a0a5a:	f7ff ffa3 	bl	80a09a4 <_ZN18Adafruit_SPIDevice8transferEh>
 80a0a5e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 80a0a62:	e7f6      	b.n	80a0a52 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a0a6a:	f7ff ff9b 	bl	80a09a4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 80a0a6e:	e7ec      	b.n	80a0a4a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 80a0a70:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80a0a74:	2101      	movs	r1, #1
 80a0a76:	b280      	uxth	r0, r0
 80a0a78:	f002 faeb 	bl	80a3052 <digitalWrite>

  if (_spi) {
 80a0a7c:	6820      	ldr	r0, [r4, #0]
 80a0a7e:	b108      	cbz	r0, 80a0a84 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 80a0a80:	f001 f8ce 	bl	80a1c20 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 80a0a84:	2001      	movs	r0, #1
 80a0a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a8a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a0a8a:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a0a8c:	2200      	movs	r2, #0
 80a0a8e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 80a0a90:	2220      	movs	r2, #32
  _addr = addr;
 80a0a92:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80a0a94:	60c2      	str	r2, [r0, #12]
#endif
}
 80a0a96:	4770      	bx	lr

080a0a98 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80a0a98:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a0a9a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80a0a9c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80a0a9e:	b153      	cbz	r3, 80a0ab6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a0aa0:	7821      	ldrb	r1, [r4, #0]
 80a0aa2:	6860      	ldr	r0, [r4, #4]
 80a0aa4:	f002 f9a7 	bl	80a2df6 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 80a0aa8:	6860      	ldr	r0, [r4, #4]
 80a0aaa:	f002 f9ac 	bl	80a2e06 <_ZN7TwoWire15endTransmissionEv>
 80a0aae:	fab0 f080 	clz	r0, r0
 80a0ab2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 80a0ab4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80a0ab6:	2101      	movs	r1, #1
 80a0ab8:	f000 f803 	bl	80a0ac2 <_ZN18Adafruit_I2CDevice5beginEb>
 80a0abc:	2800      	cmp	r0, #0
 80a0abe:	d1ef      	bne.n	80a0aa0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80a0ac0:	e7f8      	b.n	80a0ab4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080a0ac2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a0ac2:	b538      	push	{r3, r4, r5, lr}
 80a0ac4:	4604      	mov	r4, r0
  _wire->begin();
 80a0ac6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80a0ac8:	460d      	mov	r5, r1
  _wire->begin();
 80a0aca:	f002 f965 	bl	80a2d98 <_ZN7TwoWire5beginEv>
  _begun = true;
 80a0ace:	2001      	movs	r0, #1
 80a0ad0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80a0ad2:	b125      	cbz	r5, 80a0ade <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80a0ad4:	4620      	mov	r0, r4
}
 80a0ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80a0ada:	f7ff bfdd 	b.w	80a0a98 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80a0ade:	bd38      	pop	{r3, r4, r5, pc}

080a0ae0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80a0ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0ae4:	461f      	mov	r7, r3
 80a0ae6:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80a0aea:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80a0aec:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80a0aee:	4432      	add	r2, r6
 80a0af0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80a0af2:	4604      	mov	r4, r0
 80a0af4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80a0af6:	d902      	bls.n	80a0afe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a0af8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 80a0afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 80a0afe:	7801      	ldrb	r1, [r0, #0]
 80a0b00:	6840      	ldr	r0, [r0, #4]
 80a0b02:	f002 f978 	bl	80a2df6 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0b06:	b97e      	cbnz	r6, 80a0b28 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 80a0b08:	6860      	ldr	r0, [r4, #4]
 80a0b0a:	462a      	mov	r2, r5
 80a0b0c:	6803      	ldr	r3, [r0, #0]
 80a0b0e:	4641      	mov	r1, r8
 80a0b10:	68db      	ldr	r3, [r3, #12]
 80a0b12:	4798      	blx	r3
 80a0b14:	4285      	cmp	r5, r0
 80a0b16:	d1ef      	bne.n	80a0af8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 80a0b18:	4639      	mov	r1, r7
 80a0b1a:	6860      	ldr	r0, [r4, #4]
 80a0b1c:	f002 f96f 	bl	80a2dfe <_ZN7TwoWire15endTransmissionEh>
 80a0b20:	fab0 f080 	clz	r0, r0
 80a0b24:	0940      	lsrs	r0, r0, #5
 80a0b26:	e7e8      	b.n	80a0afa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0b28:	f1b9 0f00 	cmp.w	r9, #0
 80a0b2c:	d0ec      	beq.n	80a0b08 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
 80a0b2e:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a0b30:	4632      	mov	r2, r6
 80a0b32:	6803      	ldr	r3, [r0, #0]
 80a0b34:	4649      	mov	r1, r9
 80a0b36:	68db      	ldr	r3, [r3, #12]
 80a0b38:	4798      	blx	r3
 80a0b3a:	42b0      	cmp	r0, r6
 80a0b3c:	d1dc      	bne.n	80a0af8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 80a0b3e:	e7e3      	b.n	80a0b08 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

080a0b40 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 80a0b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b44:	4615      	mov	r5, r2
 80a0b46:	4604      	mov	r4, r0
 80a0b48:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 80a0b4a:	b2d2      	uxtb	r2, r2
 80a0b4c:	7801      	ldrb	r1, [r0, #0]
 80a0b4e:	6840      	ldr	r0, [r0, #4]
 80a0b50:	f002 f93f 	bl	80a2dd2 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 80a0b54:	4285      	cmp	r5, r0
 80a0b56:	d10d      	bne.n	80a0b74 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 80a0b58:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 80a0b5a:	fa1f f887 	uxth.w	r8, r7
 80a0b5e:	45a8      	cmp	r8, r5
 80a0b60:	f107 0701 	add.w	r7, r7, #1
 80a0b64:	d209      	bcs.n	80a0b7a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 80a0b66:	6860      	ldr	r0, [r4, #4]
 80a0b68:	6803      	ldr	r3, [r0, #0]
 80a0b6a:	695b      	ldr	r3, [r3, #20]
 80a0b6c:	4798      	blx	r3
 80a0b6e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 80a0b72:	e7f2      	b.n	80a0b5a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 80a0b74:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a0b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b7a:	2001      	movs	r0, #1
 80a0b7c:	e7fb      	b.n	80a0b76 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

080a0b7e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a0b7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0b82:	4607      	mov	r7, r0
 80a0b84:	4688      	mov	r8, r1
 80a0b86:	4616      	mov	r6, r2
 80a0b88:	4699      	mov	r9, r3
  size_t pos = 0;
 80a0b8a:	2500      	movs	r5, #0
  while (pos < len) {
 80a0b8c:	42b5      	cmp	r5, r6
 80a0b8e:	d212      	bcs.n	80a0bb6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80a0b90:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80a0b92:	1b74      	subs	r4, r6, r5
 80a0b94:	4294      	cmp	r4, r2
 80a0b96:	bf28      	it	cs
 80a0b98:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80a0b9a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80a0b9c:	42ab      	cmp	r3, r5
 80a0b9e:	bf94      	ite	ls
 80a0ba0:	464b      	movls	r3, r9
 80a0ba2:	2300      	movhi	r3, #0
 80a0ba4:	4622      	mov	r2, r4
 80a0ba6:	4638      	mov	r0, r7
 80a0ba8:	eb08 0105 	add.w	r1, r8, r5
 80a0bac:	f7ff ffc8 	bl	80a0b40 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80a0bb0:	b110      	cbz	r0, 80a0bb8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80a0bb2:	4425      	add	r5, r4
  while (pos < len) {
 80a0bb4:	e7ea      	b.n	80a0b8c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80a0bb6:	2001      	movs	r0, #1
}
 80a0bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0bbc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80a0bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0bbe:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 80a0bc0:	2300      	movs	r3, #0
 80a0bc2:	e9cd 3300 	strd	r3, r3, [sp]
 80a0bc6:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 80a0bca:	4604      	mov	r4, r0
 80a0bcc:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 80a0bce:	f7ff ff87 	bl	80a0ae0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80a0bd2:	b140      	cbz	r0, 80a0be6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 80a0bd4:	2301      	movs	r3, #1
 80a0bd6:	4632      	mov	r2, r6
 80a0bd8:	4629      	mov	r1, r5
 80a0bda:	4620      	mov	r0, r4
}
 80a0bdc:	b002      	add	sp, #8
 80a0bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 80a0be2:	f7ff bfcc 	b.w	80a0b7e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 80a0be6:	b002      	add	sp, #8
 80a0be8:	bd70      	pop	{r4, r5, r6, pc}

080a0bea <_ZN16Adafruit_LSM9DS16Sensor9getSensorEP8sensor_t>:
      return true;
    }

    /*! @brief Get sensor metadata - type and range information
        @param sensor Pointer to sensor_t to fill in */
    virtual void getSensor(sensor_t *sensor) {
 80a0bea:	4603      	mov	r3, r0
 80a0bec:	b430      	push	{r4, r5}
      (_parent->*_sensorFunc)(sensor);
 80a0bee:	6a02      	ldr	r2, [r0, #32]
 80a0bf0:	6884      	ldr	r4, [r0, #8]
 80a0bf2:	1055      	asrs	r5, r2, #1
 80a0bf4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80a0bf8:	07d2      	lsls	r2, r2, #31
 80a0bfa:	bf48      	it	mi
 80a0bfc:	5962      	ldrmi	r2, [r4, r5]
 80a0bfe:	69db      	ldr	r3, [r3, #28]
    }
 80a0c00:	bc30      	pop	{r4, r5}
      (_parent->*_sensorFunc)(sensor);
 80a0c02:	bf48      	it	mi
 80a0c04:	58d3      	ldrmi	r3, [r2, r3]
 80a0c06:	4718      	bx	r3

080a0c08 <_ZN16Adafruit_LSM9DS16SensorD1Ev>:
  class Sensor : public Adafruit_Sensor {
 80a0c08:	4770      	bx	lr

080a0c0a <_ZN16Adafruit_LSM9DS16Sensor8getEventEP15sensors_event_t>:
    virtual bool getEvent(sensors_event_t *event) {
 80a0c0a:	b570      	push	{r4, r5, r6, lr}
 80a0c0c:	4604      	mov	r4, r0
      (_parent->*_readFunc)();
 80a0c0e:	6902      	ldr	r2, [r0, #16]
    virtual bool getEvent(sensors_event_t *event) {
 80a0c10:	460d      	mov	r5, r1
      (_parent->*_readFunc)();
 80a0c12:	6881      	ldr	r1, [r0, #8]
 80a0c14:	1056      	asrs	r6, r2, #1
 80a0c16:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80a0c1a:	07d2      	lsls	r2, r2, #31
 80a0c1c:	bf48      	it	mi
 80a0c1e:	598a      	ldrmi	r2, [r1, r6]
 80a0c20:	68e3      	ldr	r3, [r4, #12]
 80a0c22:	bf48      	it	mi
 80a0c24:	58d3      	ldrmi	r3, [r2, r3]
 80a0c26:	4798      	blx	r3
      (_parent->*_eventFunc)(event, millis());
 80a0c28:	69a3      	ldr	r3, [r4, #24]
 80a0c2a:	68a2      	ldr	r2, [r4, #8]
 80a0c2c:	1059      	asrs	r1, r3, #1
 80a0c2e:	f013 0f01 	tst.w	r3, #1
 80a0c32:	eb02 0663 	add.w	r6, r2, r3, asr #1
 80a0c36:	6964      	ldr	r4, [r4, #20]
 80a0c38:	bf1c      	itt	ne
 80a0c3a:	5853      	ldrne	r3, [r2, r1]
 80a0c3c:	591c      	ldrne	r4, [r3, r4]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0c3e:	f000 fd9f 	bl	80a1780 <HAL_Timer_Get_Milli_Seconds>
 80a0c42:	4629      	mov	r1, r5
 80a0c44:	4602      	mov	r2, r0
 80a0c46:	4630      	mov	r0, r6
 80a0c48:	47a0      	blx	r4
    }
 80a0c4a:	2001      	movs	r0, #1
 80a0c4c:	bd70      	pop	{r4, r5, r6, pc}

080a0c4e <_ZN16Adafruit_LSM9DS16SensorD0Ev>:
  class Sensor : public Adafruit_Sensor {
 80a0c4e:	b510      	push	{r4, lr}
 80a0c50:	4604      	mov	r4, r0
 80a0c52:	2124      	movs	r1, #36	; 0x24
 80a0c54:	f002 fa62 	bl	80a311c <_ZdlPvj>
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	bd10      	pop	{r4, pc}

080a0c5c <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm>:
    @param event The sensor_event_t object we will fill!
    @param timestamp Unused
*/
/**************************************************************************/
void Adafruit_LSM9DS1::getAccelEvent(sensors_event_t *event,
                                     uint32_t timestamp) {
 80a0c5c:	b570      	push	{r4, r5, r6, lr}
 80a0c5e:	460c      	mov	r4, r1
 80a0c60:	4605      	mov	r5, r0
 80a0c62:	4616      	mov	r6, r2
  memset(event, 0, sizeof(sensors_event_t));
 80a0c64:	2100      	movs	r1, #0
 80a0c66:	2220      	movs	r2, #32
 80a0c68:	1d20      	adds	r0, r4, #4
 80a0c6a:	f003 fb95 	bl	80a4398 <memset>
  event->version = sizeof(sensors_event_t);
 80a0c6e:	2324      	movs	r3, #36	; 0x24
 80a0c70:	6023      	str	r3, [r4, #0]
  event->sensor_id = _lsm9dso_sensorid_accel;
 80a0c72:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  event->type = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = timestamp;
 80a0c74:	6126      	str	r6, [r4, #16]
  event->sensor_id = _lsm9dso_sensorid_accel;
 80a0c76:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ACCELEROMETER;
 80a0c78:	2301      	movs	r3, #1
 80a0c7a:	60a3      	str	r3, [r4, #8]
  event->acceleration.x = accelData.x * _accel_mg_lsb;
 80a0c7c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a0c7e:	6828      	ldr	r0, [r5, #0]
 80a0c80:	f003 f816 	bl	80a3cb0 <__aeabi_fmul>
  event->acceleration.x /= 1000;
 80a0c84:	490e      	ldr	r1, [pc, #56]	; (80a0cc0 <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm+0x64>)
 80a0c86:	f003 f8c7 	bl	80a3e18 <__aeabi_fdiv>
  event->acceleration.x *= SENSORS_GRAVITY_STANDARD;
 80a0c8a:	490e      	ldr	r1, [pc, #56]	; (80a0cc4 <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm+0x68>)
 80a0c8c:	f003 f810 	bl	80a3cb0 <__aeabi_fmul>
 80a0c90:	6160      	str	r0, [r4, #20]
  event->acceleration.y = accelData.y * _accel_mg_lsb;
 80a0c92:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a0c94:	6868      	ldr	r0, [r5, #4]
 80a0c96:	f003 f80b 	bl	80a3cb0 <__aeabi_fmul>
  event->acceleration.y /= 1000;
 80a0c9a:	4909      	ldr	r1, [pc, #36]	; (80a0cc0 <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm+0x64>)
 80a0c9c:	f003 f8bc 	bl	80a3e18 <__aeabi_fdiv>
  event->acceleration.y *= SENSORS_GRAVITY_STANDARD;
 80a0ca0:	4908      	ldr	r1, [pc, #32]	; (80a0cc4 <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm+0x68>)
 80a0ca2:	f003 f805 	bl	80a3cb0 <__aeabi_fmul>
 80a0ca6:	61a0      	str	r0, [r4, #24]
  event->acceleration.z = accelData.z * _accel_mg_lsb;
 80a0ca8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a0caa:	68a8      	ldr	r0, [r5, #8]
 80a0cac:	f003 f800 	bl	80a3cb0 <__aeabi_fmul>
  event->acceleration.z /= 1000;
 80a0cb0:	4903      	ldr	r1, [pc, #12]	; (80a0cc0 <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm+0x64>)
 80a0cb2:	f003 f8b1 	bl	80a3e18 <__aeabi_fdiv>
  event->acceleration.z *= SENSORS_GRAVITY_STANDARD;
 80a0cb6:	4903      	ldr	r1, [pc, #12]	; (80a0cc4 <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm+0x68>)
 80a0cb8:	f002 fffa 	bl	80a3cb0 <__aeabi_fmul>
 80a0cbc:	61e0      	str	r0, [r4, #28]
}
 80a0cbe:	bd70      	pop	{r4, r5, r6, pc}
 80a0cc0:	447a0000 	.word	0x447a0000
 80a0cc4:	411ce80a 	.word	0x411ce80a

080a0cc8 <_ZN16Adafruit_LSM9DS112getGyroEventEP15sensors_event_tm>:
    @param event The sensor_event_t object we will fill!
    @param timestamp The millis timestamp when the read occured
*/
/**************************************************************************/
void Adafruit_LSM9DS1::getGyroEvent(sensors_event_t *event,
                                    uint32_t timestamp) {
 80a0cc8:	b570      	push	{r4, r5, r6, lr}
 80a0cca:	460c      	mov	r4, r1
 80a0ccc:	4605      	mov	r5, r0
 80a0cce:	4616      	mov	r6, r2
  memset(event, 0, sizeof(sensors_event_t));
 80a0cd0:	2100      	movs	r1, #0
 80a0cd2:	2220      	movs	r2, #32
 80a0cd4:	1d20      	adds	r0, r4, #4
 80a0cd6:	f003 fb5f 	bl	80a4398 <memset>
  event->version = sizeof(sensors_event_t);
 80a0cda:	2324      	movs	r3, #36	; 0x24
 80a0cdc:	6023      	str	r3, [r4, #0]
  event->sensor_id = _lsm9dso_sensorid_accel;
 80a0cde:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  event->type = SENSOR_TYPE_GYROSCOPE;
  event->timestamp = timestamp;
 80a0ce0:	6126      	str	r6, [r4, #16]
  event->sensor_id = _lsm9dso_sensorid_accel;
 80a0ce2:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_GYROSCOPE;
 80a0ce4:	2304      	movs	r3, #4
 80a0ce6:	60a3      	str	r3, [r4, #8]
  event->gyro.x = gyroData.x * _gyro_dps_digit * SENSORS_DPS_TO_RADS;
 80a0ce8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80a0cea:	68e8      	ldr	r0, [r5, #12]
 80a0cec:	f002 ffe0 	bl	80a3cb0 <__aeabi_fmul>
 80a0cf0:	490a      	ldr	r1, [pc, #40]	; (80a0d1c <_ZN16Adafruit_LSM9DS112getGyroEventEP15sensors_event_tm+0x54>)
 80a0cf2:	f002 ffdd 	bl	80a3cb0 <__aeabi_fmul>
 80a0cf6:	6160      	str	r0, [r4, #20]
  event->gyro.y = gyroData.y * _gyro_dps_digit * SENSORS_DPS_TO_RADS;
 80a0cf8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80a0cfa:	6928      	ldr	r0, [r5, #16]
 80a0cfc:	f002 ffd8 	bl	80a3cb0 <__aeabi_fmul>
 80a0d00:	4906      	ldr	r1, [pc, #24]	; (80a0d1c <_ZN16Adafruit_LSM9DS112getGyroEventEP15sensors_event_tm+0x54>)
 80a0d02:	f002 ffd5 	bl	80a3cb0 <__aeabi_fmul>
 80a0d06:	61a0      	str	r0, [r4, #24]
  event->gyro.z = gyroData.z * _gyro_dps_digit * SENSORS_DPS_TO_RADS;
 80a0d08:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80a0d0a:	6968      	ldr	r0, [r5, #20]
 80a0d0c:	f002 ffd0 	bl	80a3cb0 <__aeabi_fmul>
 80a0d10:	4902      	ldr	r1, [pc, #8]	; (80a0d1c <_ZN16Adafruit_LSM9DS112getGyroEventEP15sensors_event_tm+0x54>)
 80a0d12:	f002 ffcd 	bl	80a3cb0 <__aeabi_fmul>
 80a0d16:	61e0      	str	r0, [r4, #28]
}
 80a0d18:	bd70      	pop	{r4, r5, r6, pc}
 80a0d1a:	bf00      	nop
 80a0d1c:	3c8efa35 	.word	0x3c8efa35

080a0d20 <_ZN16Adafruit_LSM9DS112getTempEventEP15sensors_event_tm>:
    @param event The sensor_event_t object we will fill!
    @param timestamp The millis timestamp when the read occured
*/
/**************************************************************************/
void Adafruit_LSM9DS1::getTempEvent(sensors_event_t *event,
                                    uint32_t timestamp) {
 80a0d20:	b570      	push	{r4, r5, r6, lr}
 80a0d22:	460c      	mov	r4, r1
 80a0d24:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 80a0d26:	2100      	movs	r1, #0
                                    uint32_t timestamp) {
 80a0d28:	4616      	mov	r6, r2
  memset(event, 0, sizeof(sensors_event_t));
 80a0d2a:	1d20      	adds	r0, r4, #4
 80a0d2c:	2220      	movs	r2, #32
 80a0d2e:	f003 fb33 	bl	80a4398 <memset>
  event->version = sizeof(sensors_event_t);
 80a0d32:	2324      	movs	r3, #36	; 0x24
 80a0d34:	6023      	str	r3, [r4, #0]
  event->sensor_id = _lsm9dso_sensorid_temp;
 80a0d36:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  event->timestamp = timestamp;
 80a0d38:	6126      	str	r6, [r4, #16]
  event->sensor_id = _lsm9dso_sensorid_temp;
 80a0d3a:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 80a0d3c:	230d      	movs	r3, #13
 80a0d3e:	60a3      	str	r3, [r4, #8]
  // This is just a guess since the staring point (21C here) isn't documented :(
  event->temperature = 21.0 + (float)temperature / 8;
 80a0d40:	f9b5 0024 	ldrsh.w	r0, [r5, #36]	; 0x24
 80a0d44:	f002 ff60 	bl	80a3c08 <__aeabi_i2f>
 80a0d48:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80a0d4c:	f002 ffb0 	bl	80a3cb0 <__aeabi_fmul>
 80a0d50:	4902      	ldr	r1, [pc, #8]	; (80a0d5c <_ZN16Adafruit_LSM9DS112getTempEventEP15sensors_event_tm+0x3c>)
 80a0d52:	f002 fea5 	bl	80a3aa0 <__addsf3>
 80a0d56:	6160      	str	r0, [r4, #20]
  // event->temperature /= LSM9DS1_TEMP_LSB_DEGREE_CELSIUS;
}
 80a0d58:	bd70      	pop	{r4, r5, r6, pc}
 80a0d5a:	bf00      	nop
 80a0d5c:	41a80000 	.word	0x41a80000

080a0d60 <_ZN16Adafruit_LSM9DS114getAccelSensorEP8sensor_t>:
/*!
    @brief Fill in the details about the accelerometer sensor component
    @param sensor The sensor_t object we will fill!
*/
/**************************************************************************/
void Adafruit_LSM9DS1::getAccelSensor(sensor_t *sensor) {
 80a0d60:	460b      	mov	r3, r1
 80a0d62:	b510      	push	{r4, lr}
  memset(sensor, 0, sizeof(sensor_t));
 80a0d64:	2228      	movs	r2, #40	; 0x28
void Adafruit_LSM9DS1::getAccelSensor(sensor_t *sensor) {
 80a0d66:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 80a0d68:	2100      	movs	r1, #0
 80a0d6a:	4618      	mov	r0, r3
 80a0d6c:	f003 fb14 	bl	80a4398 <memset>
  strncpy(sensor->name, "LSM9DS1_A", sizeof(sensor->name) - 1);
 80a0d70:	220b      	movs	r2, #11
 80a0d72:	4909      	ldr	r1, [pc, #36]	; (80a0d98 <_ZN16Adafruit_LSM9DS114getAccelSensorEP8sensor_t+0x38>)
 80a0d74:	f003 fb5f 	bl	80a4436 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a0d78:	2200      	movs	r2, #0
  sensor->version = 1;
 80a0d7a:	2101      	movs	r1, #1
  strncpy(sensor->name, "LSM9DS1_A", sizeof(sensor->name) - 1);
 80a0d7c:	4603      	mov	r3, r0
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a0d7e:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
 80a0d80:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _lsm9dso_sensorid_accel;
 80a0d82:	6c60      	ldr	r0, [r4, #68]	; 0x44
  sensor->type = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay = 0;
 80a0d84:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value = 156.8;      // +16 g = 156.8 m/s^s
 80a0d86:	4a05      	ldr	r2, [pc, #20]	; (80a0d9c <_ZN16Adafruit_LSM9DS114getAccelSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_ACCELEROMETER;
 80a0d88:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value = 156.8;      // +16 g = 156.8 m/s^s
 80a0d8c:	619a      	str	r2, [r3, #24]
  sensor->min_value = -156.8;     // -16 g = 156.8 m/s^s
 80a0d8e:	4a04      	ldr	r2, [pc, #16]	; (80a0da0 <_ZN16Adafruit_LSM9DS114getAccelSensorEP8sensor_t+0x40>)
 80a0d90:	61da      	str	r2, [r3, #28]
  sensor->resolution = 0.0005978; // 0.061 mg = 0.0005978 m/s^2
 80a0d92:	4a04      	ldr	r2, [pc, #16]	; (80a0da4 <_ZN16Adafruit_LSM9DS114getAccelSensorEP8sensor_t+0x44>)
 80a0d94:	621a      	str	r2, [r3, #32]
}
 80a0d96:	bd10      	pop	{r4, pc}
 80a0d98:	080a46ec 	.word	0x080a46ec
 80a0d9c:	431ccccd 	.word	0x431ccccd
 80a0da0:	c31ccccd 	.word	0xc31ccccd
 80a0da4:	3a1cb5ae 	.word	0x3a1cb5ae

080a0da8 <_ZN16Adafruit_LSM9DS113getGyroSensorEP8sensor_t>:
/*!
    @brief Fill in the details about the gyroscope sensor component
    @param sensor The sensor_t object we will fill!
*/
/**************************************************************************/
void Adafruit_LSM9DS1::getGyroSensor(sensor_t *sensor) {
 80a0da8:	460b      	mov	r3, r1
 80a0daa:	b510      	push	{r4, lr}
  memset(sensor, 0, sizeof(sensor_t));
 80a0dac:	2228      	movs	r2, #40	; 0x28
void Adafruit_LSM9DS1::getGyroSensor(sensor_t *sensor) {
 80a0dae:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 80a0db0:	2100      	movs	r1, #0
 80a0db2:	4618      	mov	r0, r3
 80a0db4:	f003 faf0 	bl	80a4398 <memset>
  strncpy(sensor->name, "LSM9DS1_G", sizeof(sensor->name) - 1);
 80a0db8:	220b      	movs	r2, #11
 80a0dba:	4909      	ldr	r1, [pc, #36]	; (80a0de0 <_ZN16Adafruit_LSM9DS113getGyroSensorEP8sensor_t+0x38>)
 80a0dbc:	f003 fb3b 	bl	80a4436 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a0dc0:	2200      	movs	r2, #0
  sensor->version = 1;
 80a0dc2:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a0dc4:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
 80a0dc6:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _lsm9dso_sensorid_gyro;
 80a0dc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  sensor->type = SENSOR_TYPE_GYROSCOPE;
  sensor->min_delay = 0;
 80a0dca:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->sensor_id = _lsm9dso_sensorid_gyro;
 80a0dcc:	6101      	str	r1, [r0, #16]
  sensor->type = SENSOR_TYPE_GYROSCOPE;
 80a0dce:	2104      	movs	r1, #4
  sensor->max_value = 34.91;             // +2000 dps = 34.906586 rad/s
 80a0dd0:	4a04      	ldr	r2, [pc, #16]	; (80a0de4 <_ZN16Adafruit_LSM9DS113getGyroSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_GYROSCOPE;
 80a0dd2:	6141      	str	r1, [r0, #20]
  sensor->max_value = 34.91;             // +2000 dps = 34.906586 rad/s
 80a0dd4:	6182      	str	r2, [r0, #24]
  sensor->min_value = -34.91;            // "
 80a0dd6:	4a04      	ldr	r2, [pc, #16]	; (80a0de8 <_ZN16Adafruit_LSM9DS113getGyroSensorEP8sensor_t+0x40>)
 80a0dd8:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.00015271631375; // 8.75 mdps = 0.00015271631375 rad/s
 80a0dda:	4a04      	ldr	r2, [pc, #16]	; (80a0dec <_ZN16Adafruit_LSM9DS113getGyroSensorEP8sensor_t+0x44>)
 80a0ddc:	6202      	str	r2, [r0, #32]
}
 80a0dde:	bd10      	pop	{r4, pc}
 80a0de0:	080a46f6 	.word	0x080a46f6
 80a0de4:	420ba3d7 	.word	0x420ba3d7
 80a0de8:	c20ba3d7 	.word	0xc20ba3d7
 80a0dec:	39202279 	.word	0x39202279

080a0df0 <_ZN16Adafruit_LSM9DS113getTempSensorEP8sensor_t>:
/*!
    @brief Fill in the details about the temperature sensor component
    @param sensor The sensor_t object we will fill!
*/
/**************************************************************************/
void Adafruit_LSM9DS1::getTempSensor(sensor_t *sensor) {
 80a0df0:	460b      	mov	r3, r1
 80a0df2:	b510      	push	{r4, lr}
  memset(sensor, 0, sizeof(sensor_t));
 80a0df4:	2228      	movs	r2, #40	; 0x28
void Adafruit_LSM9DS1::getTempSensor(sensor_t *sensor) {
 80a0df6:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 80a0df8:	2100      	movs	r1, #0
 80a0dfa:	4618      	mov	r0, r3
 80a0dfc:	f003 facc 	bl	80a4398 <memset>
  strncpy(sensor->name, "LSM9DS1_T", sizeof(sensor->name) - 1);
 80a0e00:	220b      	movs	r2, #11
 80a0e02:	4908      	ldr	r1, [pc, #32]	; (80a0e24 <_ZN16Adafruit_LSM9DS113getTempSensorEP8sensor_t+0x34>)
 80a0e04:	f003 fb17 	bl	80a4436 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a0e08:	2200      	movs	r2, #0
  sensor->version = 1;
 80a0e0a:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a0e0c:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
 80a0e0e:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _lsm9dso_sensorid_temp;
 80a0e10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  sensor->min_delay = 0;
 80a0e12:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->sensor_id = _lsm9dso_sensorid_temp;
 80a0e14:	6101      	str	r1, [r0, #16]
  sensor->max_value = 0.0;  // ToDo
 80a0e16:	2200      	movs	r2, #0
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 80a0e18:	210d      	movs	r1, #13
  sensor->max_value = 0.0;  // ToDo
 80a0e1a:	6182      	str	r2, [r0, #24]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 80a0e1c:	6141      	str	r1, [r0, #20]
  sensor->min_value = 0.0;  // ToDo
 80a0e1e:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0.0; // ToDo
 80a0e20:	6202      	str	r2, [r0, #32]
}
 80a0e22:	bd10      	pop	{r4, pc}
 80a0e24:	080a4700 	.word	0x080a4700

080a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>:
  _tempSensor =
      Sensor(this, &Adafruit_LSM9DS1::readTemp, &Adafruit_LSM9DS1::getTempEvent,
             &Adafruit_LSM9DS1::getTempSensor);
}

void Adafruit_LSM9DS1::write8(boolean type, byte reg, byte value) {
 80a0e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0e2a:	4604      	mov	r4, r0
  // support for writing directly to magnetometer registers removed
  // should access via _magSensor methods
  if (type == MAGTYPE)
    return;

  uint8_t buffer[2] = {i2c_dev ? uint8_t(reg) : uint8_t(reg & 0x7F), value};
 80a0e2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a0e2e:	b908      	cbnz	r0, 80a0e34 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0+0xc>
 80a0e30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80a0e34:	f88d 100c 	strb.w	r1, [sp, #12]
 80a0e38:	f88d 200d 	strb.w	r2, [sp, #13]
  if (i2c_dev) {
 80a0e3c:	b148      	cbz	r0, 80a0e52 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0+0x2a>
    i2c_dev->write(buffer, 2);
 80a0e3e:	2300      	movs	r3, #0
 80a0e40:	2202      	movs	r2, #2
 80a0e42:	e9cd 3300 	strd	r3, r3, [sp]
 80a0e46:	a903      	add	r1, sp, #12
 80a0e48:	2301      	movs	r3, #1
 80a0e4a:	f7ff fe49 	bl	80a0ae0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  } else {
    spi_dev->write(buffer, 2);
  }
}
 80a0e4e:	b004      	add	sp, #16
 80a0e50:	bd10      	pop	{r4, pc}
    spi_dev->write(buffer, 2);
 80a0e52:	4603      	mov	r3, r0
 80a0e54:	9000      	str	r0, [sp, #0]
 80a0e56:	2202      	movs	r2, #2
 80a0e58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0e5a:	a903      	add	r1, sp, #12
 80a0e5c:	f7ff fdaf 	bl	80a09be <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 80a0e60:	e7f5      	b.n	80a0e4e <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0+0x26>

080a0e62 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0>:
  readBuffer(type, reg, 1, &value);

  return value;
}

byte Adafruit_LSM9DS1::readBuffer(boolean type, byte reg, byte len,
 80a0e62:	b530      	push	{r4, r5, lr}
 80a0e64:	4605      	mov	r5, r0
  // support for writing directly to magnetometer registers removed
  // should access via _magSensor methods
  if (type == MAGTYPE)
    return 0;

  uint8_t regbuf[1] = {i2c_dev ? uint8_t(reg) : uint8_t(reg | 0x80)};
 80a0e66:	6a80      	ldr	r0, [r0, #40]	; 0x28
byte Adafruit_LSM9DS1::readBuffer(boolean type, byte reg, byte len,
 80a0e68:	4614      	mov	r4, r2
 80a0e6a:	b085      	sub	sp, #20
  uint8_t regbuf[1] = {i2c_dev ? uint8_t(reg) : uint8_t(reg | 0x80)};
 80a0e6c:	b908      	cbnz	r0, 80a0e72 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0+0x10>
 80a0e6e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a0e72:	f88d 100c 	strb.w	r1, [sp, #12]
  if (i2c_dev) {
 80a0e76:	b148      	cbz	r0, 80a0e8c <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0+0x2a>
    i2c_dev->write_then_read(regbuf, 1, buffer, len);
 80a0e78:	2200      	movs	r2, #0
 80a0e7a:	a903      	add	r1, sp, #12
 80a0e7c:	e9cd 4200 	strd	r4, r2, [sp]
 80a0e80:	2201      	movs	r2, #1
 80a0e82:	f7ff fe9b 	bl	80a0bbc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
  } else {
    spi_dev->write_then_read(regbuf, 1, buffer, len);
  }

  return len;
}
 80a0e86:	4620      	mov	r0, r4
 80a0e88:	b005      	add	sp, #20
 80a0e8a:	bd30      	pop	{r4, r5, pc}
    spi_dev->write_then_read(regbuf, 1, buffer, len);
 80a0e8c:	22ff      	movs	r2, #255	; 0xff
 80a0e8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a0e90:	e9cd 4200 	strd	r4, r2, [sp]
 80a0e94:	a903      	add	r1, sp, #12
 80a0e96:	2201      	movs	r2, #1
 80a0e98:	f7ff fdc3 	bl	80a0a22 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 80a0e9c:	e7f3      	b.n	80a0e86 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0+0x24>

080a0e9e <_ZN16Adafruit_LSM9DS19readAccelEv>:
void Adafruit_LSM9DS1::readAccel() {
 80a0e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0ea0:	2206      	movs	r2, #6
 80a0ea2:	21a8      	movs	r1, #168	; 0xa8
 80a0ea4:	466b      	mov	r3, sp
 80a0ea6:	4604      	mov	r4, r0
  if (type == MAGTYPE)
 80a0ea8:	f7ff ffdb 	bl	80a0e62 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0>
  yhi <<= 8;
 80a0eac:	f99d 3003 	ldrsb.w	r3, [sp, #3]
  yhi |= ylo;
 80a0eb0:	f89d 6002 	ldrb.w	r6, [sp, #2]
  zhi |= zlo;
 80a0eb4:	f89d 5004 	ldrb.w	r5, [sp, #4]
  yhi |= ylo;
 80a0eb8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  zhi <<= 8;
 80a0ebc:	f99d 3005 	ldrsb.w	r3, [sp, #5]
  xhi <<= 8;
 80a0ec0:	f99d 0001 	ldrsb.w	r0, [sp, #1]
  zhi |= zlo;
 80a0ec4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  xhi |= xlo;
 80a0ec8:	f89d 3000 	ldrb.w	r3, [sp]
  accelData.x = xhi;
 80a0ecc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0ed0:	f002 fe9a 	bl	80a3c08 <__aeabi_i2f>
 80a0ed4:	6020      	str	r0, [r4, #0]
  accelData.y = yhi;
 80a0ed6:	4630      	mov	r0, r6
 80a0ed8:	f002 fe96 	bl	80a3c08 <__aeabi_i2f>
 80a0edc:	6060      	str	r0, [r4, #4]
  accelData.z = zhi;
 80a0ede:	4628      	mov	r0, r5
 80a0ee0:	f002 fe92 	bl	80a3c08 <__aeabi_i2f>
 80a0ee4:	60a0      	str	r0, [r4, #8]
}
 80a0ee6:	b002      	add	sp, #8
 80a0ee8:	bd70      	pop	{r4, r5, r6, pc}

080a0eea <_ZN16Adafruit_LSM9DS18readGyroEv>:
void Adafruit_LSM9DS1::readGyro() {
 80a0eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0eec:	2206      	movs	r2, #6
 80a0eee:	2198      	movs	r1, #152	; 0x98
 80a0ef0:	466b      	mov	r3, sp
 80a0ef2:	4604      	mov	r4, r0
  if (type == MAGTYPE)
 80a0ef4:	f7ff ffb5 	bl	80a0e62 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0>
  yhi <<= 8;
 80a0ef8:	f99d 3003 	ldrsb.w	r3, [sp, #3]
  yhi |= ylo;
 80a0efc:	f89d 6002 	ldrb.w	r6, [sp, #2]
  zhi |= zlo;
 80a0f00:	f89d 5004 	ldrb.w	r5, [sp, #4]
  yhi |= ylo;
 80a0f04:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  zhi <<= 8;
 80a0f08:	f99d 3005 	ldrsb.w	r3, [sp, #5]
  xhi <<= 8;
 80a0f0c:	f99d 0001 	ldrsb.w	r0, [sp, #1]
  zhi |= zlo;
 80a0f10:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  xhi |= xlo;
 80a0f14:	f89d 3000 	ldrb.w	r3, [sp]
  gyroData.x = xhi;
 80a0f18:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0f1c:	f002 fe74 	bl	80a3c08 <__aeabi_i2f>
 80a0f20:	60e0      	str	r0, [r4, #12]
  gyroData.y = yhi;
 80a0f22:	4630      	mov	r0, r6
 80a0f24:	f002 fe70 	bl	80a3c08 <__aeabi_i2f>
 80a0f28:	6120      	str	r0, [r4, #16]
  gyroData.z = zhi;
 80a0f2a:	4628      	mov	r0, r5
 80a0f2c:	f002 fe6c 	bl	80a3c08 <__aeabi_i2f>
 80a0f30:	6160      	str	r0, [r4, #20]
}
 80a0f32:	b002      	add	sp, #8
 80a0f34:	bd70      	pop	{r4, r5, r6, pc}

080a0f36 <_ZN16Adafruit_LSM9DS18readTempEv>:
void Adafruit_LSM9DS1::readTemp() {
 80a0f36:	b513      	push	{r0, r1, r4, lr}
 80a0f38:	2202      	movs	r2, #2
 80a0f3a:	ab01      	add	r3, sp, #4
 80a0f3c:	2195      	movs	r1, #149	; 0x95
 80a0f3e:	4604      	mov	r4, r0
  if (type == MAGTYPE)
 80a0f40:	f7ff ff8f 	bl	80a0e62 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0>
  xhi <<= 8;
 80a0f44:	f99d 2005 	ldrsb.w	r2, [sp, #5]
  xhi |= xlo;
 80a0f48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0f4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  temperature = xhi;
 80a0f50:	84a3      	strh	r3, [r4, #36]	; 0x24
}
 80a0f52:	b002      	add	sp, #8
 80a0f54:	bd10      	pop	{r4, pc}

080a0f56 <_ZN16Adafruit_LSM9DS17readMagEv>:
void Adafruit_LSM9DS1::readMag() {
 80a0f56:	b510      	push	{r4, lr}
 80a0f58:	4604      	mov	r4, r0
  _magSensor.read();
 80a0f5a:	3074      	adds	r0, #116	; 0x74
 80a0f5c:	f000 f9ee 	bl	80a133c <_ZN16Adafruit_LIS3MDL4readEv>
  magData.x = _magSensor.x;
 80a0f60:	f9b4 007a 	ldrsh.w	r0, [r4, #122]	; 0x7a
 80a0f64:	f002 fe50 	bl	80a3c08 <__aeabi_i2f>
 80a0f68:	61a0      	str	r0, [r4, #24]
  magData.y = _magSensor.y;
 80a0f6a:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 80a0f6e:	f002 fe4b 	bl	80a3c08 <__aeabi_i2f>
 80a0f72:	61e0      	str	r0, [r4, #28]
  magData.z = _magSensor.z;
 80a0f74:	f9b4 007e 	ldrsh.w	r0, [r4, #126]	; 0x7e
 80a0f78:	f002 fe46 	bl	80a3c08 <__aeabi_i2f>
 80a0f7c:	6220      	str	r0, [r4, #32]
}
 80a0f7e:	bd10      	pop	{r4, pc}

080a0f80 <_ZN16Adafruit_LSM9DS14readEv>:
void Adafruit_LSM9DS1::read() {
 80a0f80:	b510      	push	{r4, lr}
 80a0f82:	4604      	mov	r4, r0
  readAccel();
 80a0f84:	f7ff ff8b 	bl	80a0e9e <_ZN16Adafruit_LSM9DS19readAccelEv>
  readGyro();
 80a0f88:	4620      	mov	r0, r4
 80a0f8a:	f7ff ffae 	bl	80a0eea <_ZN16Adafruit_LSM9DS18readGyroEv>
  readTemp();
 80a0f8e:	4620      	mov	r0, r4
 80a0f90:	f7ff ffd1 	bl	80a0f36 <_ZN16Adafruit_LSM9DS18readTempEv>
  readMag();
 80a0f94:	4620      	mov	r0, r4
}
 80a0f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  readMag();
 80a0f9a:	f7ff bfdc 	b.w	80a0f56 <_ZN16Adafruit_LSM9DS17readMagEv>
	...

080a0fa0 <_ZN16Adafruit_LSM9DS110initSensorEl>:
void Adafruit_LSM9DS1::initSensor(int32_t sensorID) {
 80a0fa0:	2300      	movs	r3, #0
  _lsm9dso_sensorid_accel = sensorID + 1;
 80a0fa2:	1c4a      	adds	r2, r1, #1
 80a0fa4:	6442      	str	r2, [r0, #68]	; 0x44
  _lsm9dso_sensorid_gyro = sensorID + 3;
 80a0fa6:	1cca      	adds	r2, r1, #3
 80a0fa8:	6482      	str	r2, [r0, #72]	; 0x48
 80a0faa:	4a14      	ldr	r2, [pc, #80]	; (80a0ffc <_ZN16Adafruit_LSM9DS110initSensorEl+0x5c>)
  _lsm9dso_sensorid_temp = sensorID + 4;
 80a0fac:	3104      	adds	r1, #4
 80a0fae:	e9c0 2317 	strd	r2, r3, [r0, #92]	; 0x5c
 80a0fb2:	4a13      	ldr	r2, [pc, #76]	; (80a1000 <_ZN16Adafruit_LSM9DS110initSensorEl+0x60>)
 80a0fb4:	64c1      	str	r1, [r0, #76]	; 0x4c
 80a0fb6:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 80a0fba:	4a12      	ldr	r2, [pc, #72]	; (80a1004 <_ZN16Adafruit_LSM9DS110initSensorEl+0x64>)
class Adafruit_Sensor {
 80a0fbc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 80a0fc0:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 80a0fc4:	4a10      	ldr	r2, [pc, #64]	; (80a1008 <_ZN16Adafruit_LSM9DS110initSensorEl+0x68>)
 80a0fc6:	6580      	str	r0, [r0, #88]	; 0x58
 80a0fc8:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
 80a0fcc:	4a0f      	ldr	r2, [pc, #60]	; (80a100c <_ZN16Adafruit_LSM9DS110initSensorEl+0x6c>)
 80a0fce:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80a0fd2:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
 80a0fd6:	4a0e      	ldr	r2, [pc, #56]	; (80a1010 <_ZN16Adafruit_LSM9DS110initSensorEl+0x70>)
 80a0fd8:	f8c0 00a4 	str.w	r0, [r0, #164]	; 0xa4
 80a0fdc:	e9c0 232e 	strd	r2, r3, [r0, #184]	; 0xb8
 80a0fe0:	4a0c      	ldr	r2, [pc, #48]	; (80a1014 <_ZN16Adafruit_LSM9DS110initSensorEl+0x74>)
 80a0fe2:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
 80a0fe6:	e9c0 2333 	strd	r2, r3, [r0, #204]	; 0xcc
 80a0fea:	4a0b      	ldr	r2, [pc, #44]	; (80a1018 <_ZN16Adafruit_LSM9DS110initSensorEl+0x78>)
 80a0fec:	f8c0 00c8 	str.w	r0, [r0, #200]	; 0xc8
 80a0ff0:	e9c0 2335 	strd	r2, r3, [r0, #212]	; 0xd4
 80a0ff4:	4a09      	ldr	r2, [pc, #36]	; (80a101c <_ZN16Adafruit_LSM9DS110initSensorEl+0x7c>)
 80a0ff6:	e9c0 2337 	strd	r2, r3, [r0, #220]	; 0xdc
}
 80a0ffa:	4770      	bx	lr
 80a0ffc:	080a0e9f 	.word	0x080a0e9f
 80a1000:	080a0c5d 	.word	0x080a0c5d
 80a1004:	080a0d61 	.word	0x080a0d61
 80a1008:	080a0eeb 	.word	0x080a0eeb
 80a100c:	080a0cc9 	.word	0x080a0cc9
 80a1010:	080a0da9 	.word	0x080a0da9
 80a1014:	080a0f37 	.word	0x080a0f37
 80a1018:	080a0d21 	.word	0x080a0d21
 80a101c:	080a0df1 	.word	0x080a0df1

080a1020 <_ZN16Adafruit_LSM9DS1C1El>:
Adafruit_LSM9DS1::Adafruit_LSM9DS1(int32_t sensorID) {
 80a1020:	2300      	movs	r3, #0
 80a1022:	b570      	push	{r4, r5, r6, lr}
 80a1024:	4604      	mov	r4, r0
    Sensor() {}
 80a1026:	4e0a      	ldr	r6, [pc, #40]	; (80a1050 <_ZN16Adafruit_LSM9DS1C1El+0x30>)
 80a1028:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80a102c:	6303      	str	r3, [r0, #48]	; 0x30
 80a102e:	6506      	str	r6, [r0, #80]	; 0x50
 80a1030:	3074      	adds	r0, #116	; 0x74
 80a1032:	460d      	mov	r5, r1
 80a1034:	f000 f978 	bl	80a1328 <_ZN16Adafruit_LIS3MDLC1Ev>
 80a1038:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
 80a103c:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  _wire = &Wire;
 80a1040:	f002 f848 	bl	80a30d4 <_Z19__fetch_global_Wirev>
  initSensor(sensorID);
 80a1044:	4629      	mov	r1, r5
  _wire = &Wire;
 80a1046:	6320      	str	r0, [r4, #48]	; 0x30
  initSensor(sensorID);
 80a1048:	4620      	mov	r0, r4
 80a104a:	f7ff ffa9 	bl	80a0fa0 <_ZN16Adafruit_LSM9DS110initSensorEl>
}
 80a104e:	bd70      	pop	{r4, r5, r6, pc}
 80a1050:	080a4714 	.word	0x080a4714

080a1054 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh>:
                                  uint8_t *buffer) {
 80a1054:	b410      	push	{r4}
 80a1056:	460c      	mov	r4, r1
 80a1058:	4611      	mov	r1, r2
 80a105a:	461a      	mov	r2, r3
 80a105c:	9b01      	ldr	r3, [sp, #4]
  if (type == MAGTYPE)
 80a105e:	b914      	cbnz	r4, 80a1066 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh+0x12>
}
 80a1060:	bc10      	pop	{r4}
 80a1062:	f7ff befe 	b.w	80a0e62 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh.part.0>
 80a1066:	2000      	movs	r0, #0
 80a1068:	bc10      	pop	{r4}
 80a106a:	4770      	bx	lr

080a106c <_ZN16Adafruit_LSM9DS15read8Ebh>:
byte Adafruit_LSM9DS1::read8(boolean type, byte reg) {
 80a106c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  readBuffer(type, reg, 1, &value);
 80a106e:	f10d 030f 	add.w	r3, sp, #15
 80a1072:	9300      	str	r3, [sp, #0]
 80a1074:	2301      	movs	r3, #1
 80a1076:	f7ff ffed 	bl	80a1054 <_ZN16Adafruit_LSM9DS110readBufferEbhhPh>
}
 80a107a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80a107e:	b005      	add	sp, #20
 80a1080:	f85d fb04 	ldr.w	pc, [sp], #4

080a1084 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE>:
void Adafruit_LSM9DS1::setupAccel(lsm9ds1AccelRange_t range) {
 80a1084:	b538      	push	{r3, r4, r5, lr}
  uint8_t reg = read8(XGTYPE, LSM9DS1_REGISTER_CTRL_REG6_XL);
 80a1086:	2220      	movs	r2, #32
void Adafruit_LSM9DS1::setupAccel(lsm9ds1AccelRange_t range) {
 80a1088:	460d      	mov	r5, r1
  uint8_t reg = read8(XGTYPE, LSM9DS1_REGISTER_CTRL_REG6_XL);
 80a108a:	2100      	movs	r1, #0
void Adafruit_LSM9DS1::setupAccel(lsm9ds1AccelRange_t range) {
 80a108c:	4604      	mov	r4, r0
  uint8_t reg = read8(XGTYPE, LSM9DS1_REGISTER_CTRL_REG6_XL);
 80a108e:	f7ff ffed 	bl	80a106c <_ZN16Adafruit_LSM9DS15read8Ebh>
  reg &= ~(0b00011000);
 80a1092:	f000 02e7 	and.w	r2, r0, #231	; 0xe7
  if (type == MAGTYPE)
 80a1096:	2120      	movs	r1, #32
 80a1098:	4620      	mov	r0, r4
 80a109a:	432a      	orrs	r2, r5
 80a109c:	f7ff fec4 	bl	80a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>
  switch (range) {
 80a10a0:	2d10      	cmp	r5, #16
 80a10a2:	d00b      	beq.n	80a10bc <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x38>
 80a10a4:	d803      	bhi.n	80a10ae <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x2a>
 80a10a6:	b135      	cbz	r5, 80a10b6 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x32>
 80a10a8:	2d08      	cmp	r5, #8
 80a10aa:	d009      	beq.n	80a10c0 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x3c>
}
 80a10ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (range) {
 80a10ae:	2d18      	cmp	r5, #24
 80a10b0:	d1fc      	bne.n	80a10ac <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x28>
    _accel_mg_lsb = LSM9DS1_ACCEL_MG_LSB_8G;
 80a10b2:	4b04      	ldr	r3, [pc, #16]	; (80a10c4 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x40>)
 80a10b4:	e000      	b.n	80a10b8 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x34>
    _accel_mg_lsb = LSM9DS1_ACCEL_MG_LSB_2G;
 80a10b6:	4b04      	ldr	r3, [pc, #16]	; (80a10c8 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x44>)
    _accel_mg_lsb = LSM9DS1_ACCEL_MG_LSB_16G;
 80a10b8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80a10ba:	e7f7      	b.n	80a10ac <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x28>
    _accel_mg_lsb = LSM9DS1_ACCEL_MG_LSB_4G;
 80a10bc:	4b03      	ldr	r3, [pc, #12]	; (80a10cc <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x48>)
 80a10be:	e7fb      	b.n	80a10b8 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x34>
    _accel_mg_lsb = LSM9DS1_ACCEL_MG_LSB_16G;
 80a10c0:	4b03      	ldr	r3, [pc, #12]	; (80a10d0 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x4c>)
 80a10c2:	e7f9      	b.n	80a10b8 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE+0x34>
 80a10c4:	3e79db23 	.word	0x3e79db23
 80a10c8:	3d79db23 	.word	0x3d79db23
 80a10cc:	3df9db23 	.word	0x3df9db23
 80a10d0:	3f3b645a 	.word	0x3f3b645a

080a10d4 <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE>:
void Adafruit_LSM9DS1::setupGyro(lsm9ds1GyroScale_t scale) {
 80a10d4:	b538      	push	{r3, r4, r5, lr}
  uint8_t reg = read8(XGTYPE, LSM9DS1_REGISTER_CTRL_REG1_G);
 80a10d6:	2210      	movs	r2, #16
void Adafruit_LSM9DS1::setupGyro(lsm9ds1GyroScale_t scale) {
 80a10d8:	460d      	mov	r5, r1
  uint8_t reg = read8(XGTYPE, LSM9DS1_REGISTER_CTRL_REG1_G);
 80a10da:	2100      	movs	r1, #0
void Adafruit_LSM9DS1::setupGyro(lsm9ds1GyroScale_t scale) {
 80a10dc:	4604      	mov	r4, r0
  uint8_t reg = read8(XGTYPE, LSM9DS1_REGISTER_CTRL_REG1_G);
 80a10de:	f7ff ffc5 	bl	80a106c <_ZN16Adafruit_LSM9DS15read8Ebh>
  reg &= ~(0b00011000);
 80a10e2:	f000 02e7 	and.w	r2, r0, #231	; 0xe7
  if (type == MAGTYPE)
 80a10e6:	2110      	movs	r1, #16
 80a10e8:	4620      	mov	r0, r4
 80a10ea:	432a      	orrs	r2, r5
 80a10ec:	f7ff fe9c 	bl	80a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>
  switch (scale) {
 80a10f0:	2d08      	cmp	r5, #8
 80a10f2:	d005      	beq.n	80a1100 <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x2c>
 80a10f4:	2d18      	cmp	r5, #24
 80a10f6:	d005      	beq.n	80a1104 <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x30>
 80a10f8:	b90d      	cbnz	r5, 80a10fe <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x2a>
    _gyro_dps_digit = LSM9DS1_GYRO_DPS_DIGIT_245DPS;
 80a10fa:	4b03      	ldr	r3, [pc, #12]	; (80a1108 <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x34>)
    _gyro_dps_digit = LSM9DS1_GYRO_DPS_DIGIT_2000DPS;
 80a10fc:	6423      	str	r3, [r4, #64]	; 0x40
}
 80a10fe:	bd38      	pop	{r3, r4, r5, pc}
    _gyro_dps_digit = LSM9DS1_GYRO_DPS_DIGIT_500DPS;
 80a1100:	4b02      	ldr	r3, [pc, #8]	; (80a110c <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x38>)
 80a1102:	e7fb      	b.n	80a10fc <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x28>
    _gyro_dps_digit = LSM9DS1_GYRO_DPS_DIGIT_2000DPS;
 80a1104:	4b02      	ldr	r3, [pc, #8]	; (80a1110 <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x3c>)
 80a1106:	e7f9      	b.n	80a10fc <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE+0x28>
 80a1108:	3c0f5c29 	.word	0x3c0f5c29
 80a110c:	3c8f5c29 	.word	0x3c8f5c29
 80a1110:	3d8f5c29 	.word	0x3d8f5c29

080a1114 <_ZN16Adafruit_LSM9DS15beginEv>:
bool Adafruit_LSM9DS1::begin() {
 80a1114:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_wire) {
 80a1116:	6b03      	ldr	r3, [r0, #48]	; 0x30
bool Adafruit_LSM9DS1::begin() {
 80a1118:	4604      	mov	r4, r0
 80a111a:	b085      	sub	sp, #20
  if (_wire) {
 80a111c:	2b00      	cmp	r3, #0
 80a111e:	d050      	beq.n	80a11c2 <_ZN16Adafruit_LSM9DS15beginEv+0xae>
    if (i2c_dev)
 80a1120:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a1122:	b110      	cbz	r0, 80a112a <_ZN16Adafruit_LSM9DS15beginEv+0x16>
      delete i2c_dev;
 80a1124:	2110      	movs	r1, #16
 80a1126:	f001 fff9 	bl	80a311c <_ZdlPvj>
    i2c_dev = new Adafruit_I2CDevice(LSM9DS1_ADDRESS_ACCELGYRO, _wire);
 80a112a:	2010      	movs	r0, #16
 80a112c:	f7fe ffb3 	bl	80a0096 <_Znwj>
 80a1130:	4605      	mov	r5, r0
 80a1132:	b118      	cbz	r0, 80a113c <_ZN16Adafruit_LSM9DS15beginEv+0x28>
 80a1134:	216b      	movs	r1, #107	; 0x6b
 80a1136:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80a1138:	f7ff fca7 	bl	80a0a8a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    if (!i2c_dev->begin())
 80a113c:	2101      	movs	r1, #1
 80a113e:	4628      	mov	r0, r5
    i2c_dev = new Adafruit_I2CDevice(LSM9DS1_ADDRESS_ACCELGYRO, _wire);
 80a1140:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev->begin())
 80a1142:	f7ff fcbe 	bl	80a0ac2 <_ZN18Adafruit_I2CDevice5beginEb>
 80a1146:	b910      	cbnz	r0, 80a114e <_ZN16Adafruit_LSM9DS15beginEv+0x3a>
      return false;
 80a1148:	2000      	movs	r0, #0
}
 80a114a:	b005      	add	sp, #20
 80a114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!_magSensor.begin_I2C(LSM9DS1_ADDRESS_MAG, _wire))
 80a114e:	211e      	movs	r1, #30
 80a1150:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80a1152:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80a1156:	f000 fa6e 	bl	80a1636 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
    if (!spi_dev->begin())
 80a115a:	2800      	cmp	r0, #0
 80a115c:	d0f4      	beq.n	80a1148 <_ZN16Adafruit_LSM9DS15beginEv+0x34>
  if (type == MAGTYPE)
 80a115e:	2205      	movs	r2, #5
 80a1160:	2122      	movs	r1, #34	; 0x22
 80a1162:	4620      	mov	r0, r4
 80a1164:	f7ff fe60 	bl	80a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>
  delay(10);
 80a1168:	200a      	movs	r0, #10
 80a116a:	f001 f8a9 	bl	80a22c0 <delay>
  uint8_t id = read8(XGTYPE, LSM9DS1_REGISTER_WHO_AM_I_XG);
 80a116e:	220f      	movs	r2, #15
 80a1170:	2100      	movs	r1, #0
 80a1172:	4620      	mov	r0, r4
 80a1174:	f7ff ff7a 	bl	80a106c <_ZN16Adafruit_LSM9DS15read8Ebh>
  if (id != LSM9DS1_XG_ID)
 80a1178:	2868      	cmp	r0, #104	; 0x68
 80a117a:	d1e5      	bne.n	80a1148 <_ZN16Adafruit_LSM9DS15beginEv+0x34>
  if (type == MAGTYPE)
 80a117c:	22c0      	movs	r2, #192	; 0xc0
 80a117e:	2110      	movs	r1, #16
 80a1180:	4620      	mov	r0, r4
 80a1182:	f7ff fe51 	bl	80a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>
 80a1186:	2238      	movs	r2, #56	; 0x38
 80a1188:	211f      	movs	r1, #31
 80a118a:	4620      	mov	r0, r4
 80a118c:	f7ff fe4c 	bl	80a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>
  _magSensor.setOperationMode(LIS3MDL_CONTINUOUSMODE);
 80a1190:	f104 0574 	add.w	r5, r4, #116	; 0x74
 80a1194:	22c0      	movs	r2, #192	; 0xc0
 80a1196:	2120      	movs	r1, #32
 80a1198:	4620      	mov	r0, r4
 80a119a:	f7ff fe45 	bl	80a0e28 <_ZN16Adafruit_LSM9DS16write8Ebhh.part.0>
 80a119e:	2100      	movs	r1, #0
 80a11a0:	4628      	mov	r0, r5
 80a11a2:	f000 f9a5 	bl	80a14f0 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
  setupAccel(LSM9DS1_ACCELRANGE_2G);
 80a11a6:	2100      	movs	r1, #0
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	f7ff ff6b 	bl	80a1084 <_ZN16Adafruit_LSM9DS110setupAccelENS_19lsm9ds1AccelRange_tE>
    _magSensor.setRange(LIS3MDL_RANGE_4_GAUSS);
 80a11ae:	2100      	movs	r1, #0
 80a11b0:	4628      	mov	r0, r5
 80a11b2:	f000 f9b8 	bl	80a1526 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setupGyro(LSM9DS1_GYROSCALE_245DPS);
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	2100      	movs	r1, #0
 80a11ba:	f7ff ff8b 	bl	80a10d4 <_ZN16Adafruit_LSM9DS19setupGyroENS_18lsm9ds1GyroScale_tE>
  return true;
 80a11be:	2001      	movs	r0, #1
 80a11c0:	e7c3      	b.n	80a114a <_ZN16Adafruit_LSM9DS15beginEv+0x36>
    if (spi_dev)
 80a11c2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a11c4:	b135      	cbz	r5, 80a11d4 <_ZN16Adafruit_LSM9DS15beginEv+0xc0>
      delete spi_dev;
 80a11c6:	4628      	mov	r0, r5
 80a11c8:	f7ff fb00 	bl	80a07cc <_ZN18Adafruit_SPIDeviceD1Ev>
 80a11cc:	2138      	movs	r1, #56	; 0x38
 80a11ce:	4628      	mov	r0, r5
 80a11d0:	f001 ffa4 	bl	80a311c <_ZdlPvj>
    if (_clk == -1) {
 80a11d4:	f994 3038 	ldrsb.w	r3, [r4, #56]	; 0x38
 80a11d8:	f104 0774 	add.w	r7, r4, #116	; 0x74
 80a11dc:	3301      	adds	r3, #1
 80a11de:	d121      	bne.n	80a1224 <_ZN16Adafruit_LSM9DS15beginEv+0x110>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
 80a11e0:	f7ff f946 	bl	80a0470 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a11e4:	4606      	mov	r6, r0
      spi_dev = new Adafruit_SPIDevice(_csxg);
 80a11e6:	2038      	movs	r0, #56	; 0x38
 80a11e8:	f7fe ff55 	bl	80a0096 <_Znwj>
 80a11ec:	4605      	mov	r5, r0
 80a11ee:	b140      	cbz	r0, 80a1202 <_ZN16Adafruit_LSM9DS15beginEv+0xee>
 80a11f0:	2300      	movs	r3, #0
 80a11f2:	4a1f      	ldr	r2, [pc, #124]	; (80a1270 <_ZN16Adafruit_LSM9DS15beginEv+0x15c>)
 80a11f4:	9300      	str	r3, [sp, #0]
 80a11f6:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80a11fa:	2301      	movs	r3, #1
 80a11fc:	9601      	str	r6, [sp, #4]
 80a11fe:	f7ff fa57 	bl	80a06b0 <_ZN18Adafruit_SPIDeviceC1Eam9_BitOrderhP8SPIClass>
 80a1202:	62e5      	str	r5, [r4, #44]	; 0x2c
      if (!_magSensor.begin_SPI(_csm))
 80a1204:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 80a1208:	f7ff f932 	bl	80a0470 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a120c:	4629      	mov	r1, r5
 80a120e:	4602      	mov	r2, r0
 80a1210:	4b17      	ldr	r3, [pc, #92]	; (80a1270 <_ZN16Adafruit_LSM9DS15beginEv+0x15c>)
 80a1212:	4638      	mov	r0, r7
 80a1214:	f000 fa2c 	bl	80a1670 <_ZN16Adafruit_LIS3MDL9begin_SPIEhP8SPIClassm>
      if (!_magSensor.begin_SPI(_csm, _clk, _miso, _mosi))
 80a1218:	2800      	cmp	r0, #0
 80a121a:	d095      	beq.n	80a1148 <_ZN16Adafruit_LSM9DS15beginEv+0x34>
    if (!spi_dev->begin())
 80a121c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a121e:	f7ff fade 	bl	80a07de <_ZN18Adafruit_SPIDevice5beginEv>
 80a1222:	e79a      	b.n	80a115a <_ZN16Adafruit_LSM9DS15beginEv+0x46>
      spi_dev = new Adafruit_SPIDevice(_csxg, _clk, _miso, _mosi);
 80a1224:	2038      	movs	r0, #56	; 0x38
 80a1226:	f7fe ff36 	bl	80a0096 <_Znwj>
 80a122a:	4605      	mov	r5, r0
 80a122c:	b180      	cbz	r0, 80a1250 <_ZN16Adafruit_LSM9DS15beginEv+0x13c>
 80a122e:	2301      	movs	r3, #1
 80a1230:	2200      	movs	r2, #0
 80a1232:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80a1236:	4b0e      	ldr	r3, [pc, #56]	; (80a1270 <_ZN16Adafruit_LSM9DS15beginEv+0x15c>)
 80a1238:	f994 2038 	ldrsb.w	r2, [r4, #56]	; 0x38
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 80a1242:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80a1246:	9300      	str	r3, [sp, #0]
 80a1248:	f994 3037 	ldrsb.w	r3, [r4, #55]	; 0x37
 80a124c:	f7ff fa58 	bl	80a0700 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>
      if (!_magSensor.begin_SPI(_csm, _clk, _miso, _mosi))
 80a1250:	4b07      	ldr	r3, [pc, #28]	; (80a1270 <_ZN16Adafruit_LSM9DS15beginEv+0x15c>)
 80a1252:	4638      	mov	r0, r7
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 80a125a:	f994 2038 	ldrsb.w	r2, [r4, #56]	; 0x38
 80a125e:	9300      	str	r3, [sp, #0]
 80a1260:	f994 1034 	ldrsb.w	r1, [r4, #52]	; 0x34
 80a1264:	f994 3037 	ldrsb.w	r3, [r4, #55]	; 0x37
      spi_dev = new Adafruit_SPIDevice(_csxg, _clk, _miso, _mosi);
 80a1268:	62e5      	str	r5, [r4, #44]	; 0x2c
      if (!_magSensor.begin_SPI(_csm, _clk, _miso, _mosi))
 80a126a:	f000 fa28 	bl	80a16be <_ZN16Adafruit_LIS3MDL9begin_SPIEaaaam>
 80a126e:	e7d3      	b.n	80a1218 <_ZN16Adafruit_LSM9DS15beginEv+0x104>
 80a1270:	000f4240 	.word	0x000f4240

080a1274 <_ZN16Adafruit_LSM9DS18getEventEP15sensors_event_tS1_S1_S1_>:
                                sensors_event_t *tempEvent) {
 80a1274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80a127c:	4604      	mov	r4, r0
 80a127e:	4688      	mov	r8, r1
 80a1280:	4617      	mov	r7, r2
 80a1282:	461e      	mov	r6, r3
  read();
 80a1284:	f7ff fe7c 	bl	80a0f80 <_ZN16Adafruit_LSM9DS14readEv>
 80a1288:	f000 fa7a 	bl	80a1780 <HAL_Timer_Get_Milli_Seconds>
 80a128c:	4605      	mov	r5, r0
  if (accelEvent)
 80a128e:	f1b8 0f00 	cmp.w	r8, #0
 80a1292:	d004      	beq.n	80a129e <_ZN16Adafruit_LSM9DS18getEventEP15sensors_event_tS1_S1_S1_+0x2a>
    getAccelEvent(accelEvent, timestamp);
 80a1294:	4602      	mov	r2, r0
 80a1296:	4641      	mov	r1, r8
 80a1298:	4620      	mov	r0, r4
 80a129a:	f7ff fcdf 	bl	80a0c5c <_ZN16Adafruit_LSM9DS113getAccelEventEP15sensors_event_tm>
  if (magEvent)
 80a129e:	b127      	cbz	r7, 80a12aa <_ZN16Adafruit_LSM9DS18getEventEP15sensors_event_tS1_S1_S1_+0x36>
    _magSensor.getEvent(magEvent);
 80a12a0:	4639      	mov	r1, r7
 80a12a2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80a12a6:	f000 f897 	bl	80a13d8 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
  if (gyroEvent)
 80a12aa:	b126      	cbz	r6, 80a12b6 <_ZN16Adafruit_LSM9DS18getEventEP15sensors_event_tS1_S1_S1_+0x42>
    getGyroEvent(gyroEvent, timestamp);
 80a12ac:	462a      	mov	r2, r5
 80a12ae:	4631      	mov	r1, r6
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	f7ff fd09 	bl	80a0cc8 <_ZN16Adafruit_LSM9DS112getGyroEventEP15sensors_event_tm>
  if (tempEvent)
 80a12b6:	f1b9 0f00 	cmp.w	r9, #0
 80a12ba:	d004      	beq.n	80a12c6 <_ZN16Adafruit_LSM9DS18getEventEP15sensors_event_tS1_S1_S1_+0x52>
    getTempEvent(tempEvent, timestamp);
 80a12bc:	462a      	mov	r2, r5
 80a12be:	4649      	mov	r1, r9
 80a12c0:	4620      	mov	r0, r4
 80a12c2:	f7ff fd2d 	bl	80a0d20 <_ZN16Adafruit_LSM9DS112getTempEventEP15sensors_event_tm>
}
 80a12c6:	2001      	movs	r0, #1
 80a12c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a12cc <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
 80a12cc:	4770      	bx	lr
	...

080a12d0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
 80a12d0:	460b      	mov	r3, r1
 80a12d2:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a12d4:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
 80a12d6:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 80a12d8:	2100      	movs	r1, #0
 80a12da:	4618      	mov	r0, r3
 80a12dc:	f003 f85c 	bl	80a4398 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
 80a12e0:	220b      	movs	r2, #11
 80a12e2:	4909      	ldr	r1, [pc, #36]	; (80a1308 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
 80a12e4:	f003 f8a7 	bl	80a4436 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a12e8:	2200      	movs	r2, #0
  sensor->version = 1;
 80a12ea:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80a12ec:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
 80a12ee:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
 80a12f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
  sensor->min_delay = 0;
 80a12f2:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->sensor_id = _sensorID;
 80a12f4:	6101      	str	r1, [r0, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
 80a12f6:	2102      	movs	r1, #2
  sensor->min_value = -1600;  // -16 gauss in uTesla
 80a12f8:	4a04      	ldr	r2, [pc, #16]	; (80a130c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
 80a12fa:	6141      	str	r1, [r0, #20]
  sensor->min_value = -1600;  // -16 gauss in uTesla
 80a12fc:	61c2      	str	r2, [r0, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
 80a12fe:	4a04      	ldr	r2, [pc, #16]	; (80a1310 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
 80a1300:	6182      	str	r2, [r0, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
 80a1302:	4a04      	ldr	r2, [pc, #16]	; (80a1314 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
 80a1304:	6202      	str	r2, [r0, #32]
}
 80a1306:	bd10      	pop	{r4, pc}
 80a1308:	080a4728 	.word	0x080a4728
 80a130c:	c4c80000 	.word	0xc4c80000
 80a1310:	44c80000 	.word	0x44c80000
 80a1314:	3c75c28f 	.word	0x3c75c28f

080a1318 <_ZN16Adafruit_LIS3MDLD0Ev>:
 80a1318:	b510      	push	{r4, lr}
 80a131a:	4604      	mov	r4, r0
 80a131c:	2128      	movs	r1, #40	; 0x28
 80a131e:	f001 fefd 	bl	80a311c <_ZdlPvj>
 80a1322:	4620      	mov	r0, r4
 80a1324:	bd10      	pop	{r4, pc}
	...

080a1328 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
 80a1328:	4a03      	ldr	r2, [pc, #12]	; (80a1338 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
 80a132a:	6002      	str	r2, [r0, #0]
 80a132c:	2200      	movs	r2, #0
 80a132e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80a1332:	7602      	strb	r2, [r0, #24]
 80a1334:	4770      	bx	lr
 80a1336:	bf00      	nop
 80a1338:	080a4748 	.word	0x080a4748

080a133c <_ZN16Adafruit_LIS3MDL4readEv>:
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
 80a133c:	2301      	movs	r3, #1
 80a133e:	2200      	movs	r2, #0
void Adafruit_LIS3MDL::read(void) {
 80a1340:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1342:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
 80a1344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a1348:	2506      	movs	r5, #6
 80a134a:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3MDL::read(void) {
 80a134c:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
 80a134e:	e9cd 2500 	strd	r2, r5, [sp]
 80a1352:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80a1356:	a806      	add	r0, sp, #24
 80a1358:	f7ff f8a8 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
 80a135c:	462a      	mov	r2, r5
 80a135e:	a904      	add	r1, sp, #16
 80a1360:	a806      	add	r0, sp, #24
 80a1362:	f7ff f91d 	bl	80a05a0 <_ZN23Adafruit_BusIO_Register4readEPhh>
  x |= buffer[1] << 8;
 80a1366:	f89d 3011 	ldrb.w	r3, [sp, #17]
  x = buffer[0];
 80a136a:	f89d 0010 	ldrb.w	r0, [sp, #16]
  y = buffer[2];
 80a136e:	f89d 6012 	ldrb.w	r6, [sp, #18]
  x |= buffer[1] << 8;
 80a1372:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  y |= buffer[3] << 8;
 80a1376:	f89d 3013 	ldrb.w	r3, [sp, #19]
  z = buffer[4];
 80a137a:	f89d 5014 	ldrb.w	r5, [sp, #20]
  y |= buffer[3] << 8;
 80a137e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  z |= buffer[5] << 8;
 80a1382:	f89d 3015 	ldrb.w	r3, [sp, #21]
  y |= buffer[3] << 8;
 80a1386:	b236      	sxth	r6, r6
  z |= buffer[5] << 8;
 80a1388:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  switch (rangeBuffered) {
 80a138c:	7e23      	ldrb	r3, [r4, #24]
  z |= buffer[5] << 8;
 80a138e:	b22d      	sxth	r5, r5
 80a1390:	2b03      	cmp	r3, #3
  switch (rangeBuffered) {
 80a1392:	bf8c      	ite	hi
 80a1394:	f04f 577e 	movhi.w	r7, #1065353216	; 0x3f800000
 80a1398:	4a0e      	ldrls	r2, [pc, #56]	; (80a13d4 <_ZN16Adafruit_LIS3MDL4readEv+0x98>)
  x |= buffer[1] << 8;
 80a139a:	b200      	sxth	r0, r0
 80a139c:	bf98      	it	ls
 80a139e:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
 80a13a2:	80e0      	strh	r0, [r4, #6]
  y |= buffer[3] << 8;
 80a13a4:	8126      	strh	r6, [r4, #8]
  z |= buffer[5] << 8;
 80a13a6:	8165      	strh	r5, [r4, #10]
  x_gauss = (float)x / scale;
 80a13a8:	f002 fc2e 	bl	80a3c08 <__aeabi_i2f>
 80a13ac:	4639      	mov	r1, r7
 80a13ae:	f002 fd33 	bl	80a3e18 <__aeabi_fdiv>
 80a13b2:	60e0      	str	r0, [r4, #12]
  y_gauss = (float)y / scale;
 80a13b4:	4630      	mov	r0, r6
 80a13b6:	f002 fc27 	bl	80a3c08 <__aeabi_i2f>
 80a13ba:	4639      	mov	r1, r7
 80a13bc:	f002 fd2c 	bl	80a3e18 <__aeabi_fdiv>
 80a13c0:	6120      	str	r0, [r4, #16]
  z_gauss = (float)z / scale;
 80a13c2:	4628      	mov	r0, r5
 80a13c4:	f002 fc20 	bl	80a3c08 <__aeabi_i2f>
 80a13c8:	4639      	mov	r1, r7
 80a13ca:	f002 fd25 	bl	80a3e18 <__aeabi_fdiv>
 80a13ce:	6160      	str	r0, [r4, #20]
}
 80a13d0:	b00d      	add	sp, #52	; 0x34
 80a13d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a13d4:	080a4730 	.word	0x080a4730

080a13d8 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
 80a13d8:	b538      	push	{r3, r4, r5, lr}
 80a13da:	460c      	mov	r4, r1
 80a13dc:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 80a13de:	2220      	movs	r2, #32
 80a13e0:	2100      	movs	r1, #0
 80a13e2:	1d20      	adds	r0, r4, #4
 80a13e4:	f002 ffd8 	bl	80a4398 <memset>
  event->version = sizeof(sensors_event_t);
 80a13e8:	2324      	movs	r3, #36	; 0x24
 80a13ea:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 80a13ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a13ee:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
 80a13f0:	2302      	movs	r3, #2
 80a13f2:	60a3      	str	r3, [r4, #8]
 80a13f4:	f000 f9c4 	bl	80a1780 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 80a13f8:	6120      	str	r0, [r4, #16]
  read();
 80a13fa:	4628      	mov	r0, r5
 80a13fc:	f7ff ff9e 	bl	80a133c <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
 80a1400:	68e8      	ldr	r0, [r5, #12]
 80a1402:	4908      	ldr	r1, [pc, #32]	; (80a1424 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x4c>)
 80a1404:	f002 fc54 	bl	80a3cb0 <__aeabi_fmul>
 80a1408:	6160      	str	r0, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
 80a140a:	6928      	ldr	r0, [r5, #16]
 80a140c:	4905      	ldr	r1, [pc, #20]	; (80a1424 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x4c>)
 80a140e:	f002 fc4f 	bl	80a3cb0 <__aeabi_fmul>
 80a1412:	61a0      	str	r0, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
 80a1414:	6968      	ldr	r0, [r5, #20]
 80a1416:	4903      	ldr	r1, [pc, #12]	; (80a1424 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x4c>)
 80a1418:	f002 fc4a 	bl	80a3cb0 <__aeabi_fmul>
 80a141c:	61e0      	str	r0, [r4, #28]
}
 80a141e:	2001      	movs	r0, #1
 80a1420:	bd38      	pop	{r3, r4, r5, pc}
 80a1422:	bf00      	nop
 80a1424:	42c80000 	.word	0x42c80000

080a1428 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
 80a1428:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
 80a142a:	2501      	movs	r5, #1
 80a142c:	2700      	movs	r7, #0
 80a142e:	2320      	movs	r3, #32
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
 80a1430:	460e      	mov	r6, r1
 80a1432:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
 80a1434:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80a1438:	9300      	str	r3, [sp, #0]
 80a143a:	9501      	str	r5, [sp, #4]
 80a143c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
 80a1440:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
 80a1442:	462b      	mov	r3, r5
 80a1444:	a808      	add	r0, sp, #32
 80a1446:	f7ff f831 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
 80a144a:	2305      	movs	r3, #5
 80a144c:	2202      	movs	r2, #2
 80a144e:	a908      	add	r1, sp, #32
 80a1450:	a804      	add	r0, sp, #16
 80a1452:	f7ff f902 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
 80a1456:	4631      	mov	r1, r6
 80a1458:	a804      	add	r0, sp, #16
 80a145a:	f7ff f910 	bl	80a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
 80a145e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80a1462:	2323      	movs	r3, #35	; 0x23
 80a1464:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80a1468:	9300      	str	r3, [sp, #0]
 80a146a:	9501      	str	r5, [sp, #4]
 80a146c:	462b      	mov	r3, r5
 80a146e:	a80e      	add	r0, sp, #56	; 0x38
 80a1470:	f7ff f81c 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
 80a1474:	2302      	movs	r3, #2
 80a1476:	a90e      	add	r1, sp, #56	; 0x38
 80a1478:	461a      	mov	r2, r3
 80a147a:	a806      	add	r0, sp, #24
 80a147c:	f7ff f8ed 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
 80a1480:	4631      	mov	r1, r6
 80a1482:	a806      	add	r0, sp, #24
 80a1484:	f7ff f8fb 	bl	80a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 80a1488:	b015      	add	sp, #84	; 0x54
 80a148a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a148c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
 80a148c:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
 80a148e:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
 80a1490:	4606      	mov	r6, r0
 80a1492:	460c      	mov	r4, r1
 80a1494:	b08c      	sub	sp, #48	; 0x30
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
 80a1496:	d103      	bne.n	80a14a0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
 80a1498:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
 80a149a:	f7ff ffc5 	bl	80a1428 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
 80a149e:	e009      	b.n	80a14b4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
 80a14a0:	2903      	cmp	r1, #3
 80a14a2:	d003      	beq.n	80a14ac <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
 80a14a4:	2905      	cmp	r1, #5
 80a14a6:	d103      	bne.n	80a14b0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
 80a14a8:	2101      	movs	r1, #1
 80a14aa:	e7f6      	b.n	80a149a <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
 80a14ac:	2102      	movs	r1, #2
 80a14ae:	e7f4      	b.n	80a149a <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
 80a14b0:	2907      	cmp	r1, #7
 80a14b2:	d01b      	beq.n	80a14ec <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
 80a14b4:	200a      	movs	r0, #10
 80a14b6:	f000 ff03 	bl	80a22c0 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
 80a14ba:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
 80a14be:	2501      	movs	r5, #1
 80a14c0:	2300      	movs	r3, #0
 80a14c2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80a14c6:	2320      	movs	r3, #32
 80a14c8:	9501      	str	r5, [sp, #4]
 80a14ca:	9300      	str	r3, [sp, #0]
 80a14cc:	a806      	add	r0, sp, #24
 80a14ce:	462b      	mov	r3, r5
 80a14d0:	f7fe ffec 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
 80a14d4:	462b      	mov	r3, r5
 80a14d6:	2204      	movs	r2, #4
 80a14d8:	a906      	add	r1, sp, #24
 80a14da:	a804      	add	r0, sp, #16
 80a14dc:	f7ff f8bd 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
 80a14e0:	4621      	mov	r1, r4
 80a14e2:	a804      	add	r0, sp, #16
 80a14e4:	f7ff f8cb 	bl	80a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 80a14e8:	b00c      	add	sp, #48	; 0x30
 80a14ea:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
 80a14ec:	2100      	movs	r1, #0
 80a14ee:	e7d4      	b.n	80a149a <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

080a14f0 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
 80a14f0:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
 80a14f2:	2301      	movs	r3, #1
 80a14f4:	2500      	movs	r5, #0
 80a14f6:	2222      	movs	r2, #34	; 0x22
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
 80a14f8:	460c      	mov	r4, r1
 80a14fa:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
 80a14fc:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	9200      	str	r2, [sp, #0]
 80a1504:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80a1508:	a806      	add	r0, sp, #24
 80a150a:	f7fe ffcf 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
 80a150e:	462b      	mov	r3, r5
 80a1510:	2202      	movs	r2, #2
 80a1512:	a906      	add	r1, sp, #24
 80a1514:	a804      	add	r0, sp, #16
 80a1516:	f7ff f8a0 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
 80a151a:	4621      	mov	r1, r4
 80a151c:	a804      	add	r0, sp, #16
 80a151e:	f7ff f8ae 	bl	80a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 80a1522:	b00d      	add	sp, #52	; 0x34
 80a1524:	bd30      	pop	{r4, r5, pc}

080a1526 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a1526:	2301      	movs	r3, #1
 80a1528:	2200      	movs	r2, #0
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
 80a152a:	b530      	push	{r4, r5, lr}
 80a152c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a152e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a1532:	2221      	movs	r2, #33	; 0x21
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
 80a1534:	460d      	mov	r5, r1
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a1536:	9301      	str	r3, [sp, #4]
 80a1538:	9200      	str	r2, [sp, #0]
 80a153a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
 80a153e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a1540:	a806      	add	r0, sp, #24
 80a1542:	f7fe ffb3 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
 80a1546:	2305      	movs	r3, #5
 80a1548:	2202      	movs	r2, #2
 80a154a:	a906      	add	r1, sp, #24
 80a154c:	a804      	add	r0, sp, #16
 80a154e:	f7ff f884 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
 80a1552:	4629      	mov	r1, r5
 80a1554:	a804      	add	r0, sp, #16
 80a1556:	f7ff f892 	bl	80a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
 80a155a:	7625      	strb	r5, [r4, #24]
}
 80a155c:	b00d      	add	sp, #52	; 0x34
 80a155e:	bd30      	pop	{r4, r5, pc}

080a1560 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a1560:	2301      	movs	r3, #1
 80a1562:	2200      	movs	r2, #0
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
 80a1564:	b510      	push	{r4, lr}
 80a1566:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a1568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a156c:	2221      	movs	r2, #33	; 0x21
 80a156e:	9301      	str	r3, [sp, #4]
 80a1570:	9200      	str	r2, [sp, #0]
 80a1572:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
 80a1576:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a1578:	a806      	add	r0, sp, #24
 80a157a:	f7fe ff97 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
 80a157e:	2305      	movs	r3, #5
 80a1580:	2202      	movs	r2, #2
 80a1582:	a906      	add	r1, sp, #24
 80a1584:	a804      	add	r0, sp, #16
 80a1586:	f7ff f868 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
 80a158a:	a804      	add	r0, sp, #16
 80a158c:	f7ff f86a 	bl	80a0664 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 80a1590:	b2c0      	uxtb	r0, r0
 80a1592:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
 80a1594:	b00c      	add	sp, #48	; 0x30
 80a1596:	bd10      	pop	{r4, pc}

080a1598 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
 80a1598:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a159a:	2300      	movs	r3, #0
 80a159c:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::reset(void) {
 80a159e:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a15a0:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80a15a4:	2321      	movs	r3, #33	; 0x21
void Adafruit_LIS3MDL::reset(void) {
 80a15a6:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
 80a15a8:	9300      	str	r3, [sp, #0]
 80a15aa:	9501      	str	r5, [sp, #4]
 80a15ac:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80a15b0:	462b      	mov	r3, r5
 80a15b2:	a806      	add	r0, sp, #24
 80a15b4:	f7fe ff7a 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
 80a15b8:	2302      	movs	r3, #2
 80a15ba:	462a      	mov	r2, r5
 80a15bc:	a906      	add	r1, sp, #24
 80a15be:	a804      	add	r0, sp, #16
 80a15c0:	f7ff f84b 	bl	80a065a <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
 80a15c4:	4629      	mov	r1, r5
 80a15c6:	a804      	add	r0, sp, #16
 80a15c8:	f7ff f859 	bl	80a067e <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
 80a15cc:	200a      	movs	r0, #10
 80a15ce:	f000 fe77 	bl	80a22c0 <delay>
  getRange();
 80a15d2:	4620      	mov	r0, r4
 80a15d4:	f7ff ffc4 	bl	80a1560 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
 80a15d8:	b00d      	add	sp, #52	; 0x34
 80a15da:	bd30      	pop	{r4, r5, pc}

080a15dc <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
 80a15dc:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
 80a15de:	2601      	movs	r6, #1
 80a15e0:	2500      	movs	r5, #0
 80a15e2:	230f      	movs	r3, #15
bool Adafruit_LIS3MDL::_init(void) {
 80a15e4:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
 80a15e6:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80a15ea:	9300      	str	r3, [sp, #0]
 80a15ec:	9601      	str	r6, [sp, #4]
 80a15ee:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80a15f2:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
 80a15f4:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
 80a15f6:	a804      	add	r0, sp, #16
 80a15f8:	f7fe ff58 	bl	80a04ac <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
 80a15fc:	a804      	add	r0, sp, #16
 80a15fe:	f7ff f810 	bl	80a0622 <_ZN23Adafruit_BusIO_Register4readEv>
 80a1602:	283d      	cmp	r0, #61	; 0x3d
 80a1604:	d115      	bne.n	80a1632 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
 80a1606:	4620      	mov	r0, r4
 80a1608:	f7ff ffc6 	bl	80a1598 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
 80a160c:	2103      	movs	r1, #3
 80a160e:	4620      	mov	r0, r4
 80a1610:	f7ff ff0a 	bl	80a1428 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
 80a1614:	4631      	mov	r1, r6
 80a1616:	4620      	mov	r0, r4
 80a1618:	f7ff ff38 	bl	80a148c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
 80a161c:	4629      	mov	r1, r5
 80a161e:	4620      	mov	r0, r4
 80a1620:	f7ff ff81 	bl	80a1526 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
 80a1624:	4620      	mov	r0, r4
 80a1626:	4629      	mov	r1, r5
 80a1628:	f7ff ff62 	bl	80a14f0 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
 80a162c:	4630      	mov	r0, r6
}
 80a162e:	b00a      	add	sp, #40	; 0x28
 80a1630:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a1632:	4628      	mov	r0, r5
 80a1634:	e7fb      	b.n	80a162e <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

080a1636 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 80a1636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!i2c_dev) {
 80a1638:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 80a163a:	4604      	mov	r4, r0
 80a163c:	460e      	mov	r6, r1
 80a163e:	4617      	mov	r7, r2
  if (!i2c_dev) {
 80a1640:	b94b      	cbnz	r3, 80a1656 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 80a1642:	2010      	movs	r0, #16
 80a1644:	f7fe fd27 	bl	80a0096 <_Znwj>
 80a1648:	4605      	mov	r5, r0
 80a164a:	b118      	cbz	r0, 80a1654 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
 80a164c:	463a      	mov	r2, r7
 80a164e:	4631      	mov	r1, r6
 80a1650:	f7ff fa1b 	bl	80a0a8a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 80a1654:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
 80a1656:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
 80a1658:	2101      	movs	r1, #1
 80a165a:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
 80a165c:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
 80a165e:	f7ff fa30 	bl	80a0ac2 <_ZN18Adafruit_I2CDevice5beginEb>
 80a1662:	b120      	cbz	r0, 80a166e <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x38>
  return _init();
 80a1664:	4620      	mov	r0, r4
}
 80a1666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
 80a166a:	f7ff bfb7 	b.w	80a15dc <_ZN16Adafruit_LIS3MDL5_initEv>
}
 80a166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1670 <_ZN16Adafruit_LIS3MDL9begin_SPIEhP8SPIClassm>:
                                    uint32_t frequency) {
 80a1670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a1674:	461f      	mov	r7, r3
  i2c_dev = NULL;
 80a1676:	2300      	movs	r3, #0
  if (!spi_dev) {
 80a1678:	f8d0 9020 	ldr.w	r9, [r0, #32]
                                    uint32_t frequency) {
 80a167c:	4604      	mov	r4, r0
 80a167e:	460e      	mov	r6, r1
 80a1680:	4690      	mov	r8, r2
  i2c_dev = NULL;
 80a1682:	61c3      	str	r3, [r0, #28]
  if (!spi_dev) {
 80a1684:	f1b9 0f00 	cmp.w	r9, #0
 80a1688:	d10c      	bne.n	80a16a4 <_ZN16Adafruit_LIS3MDL9begin_SPIEhP8SPIClassm+0x34>
                                     theSPI);
 80a168a:	2038      	movs	r0, #56	; 0x38
 80a168c:	f7fe fd03 	bl	80a0096 <_Znwj>
 80a1690:	4605      	mov	r5, r0
 80a1692:	b130      	cbz	r0, 80a16a2 <_ZN16Adafruit_LIS3MDL9begin_SPIEhP8SPIClassm+0x32>
 80a1694:	2301      	movs	r3, #1
 80a1696:	463a      	mov	r2, r7
 80a1698:	e9cd 9800 	strd	r9, r8, [sp]
 80a169c:	b271      	sxtb	r1, r6
 80a169e:	f7ff f807 	bl	80a06b0 <_ZN18Adafruit_SPIDeviceC1Eam9_BitOrderhP8SPIClass>
    spi_dev = new Adafruit_SPIDevice(cs_pin,
 80a16a2:	6225      	str	r5, [r4, #32]
  if (!spi_dev->begin()) {
 80a16a4:	6a20      	ldr	r0, [r4, #32]
 80a16a6:	f7ff f89a 	bl	80a07de <_ZN18Adafruit_SPIDevice5beginEv>
 80a16aa:	b128      	cbz	r0, 80a16b8 <_ZN16Adafruit_LIS3MDL9begin_SPIEhP8SPIClassm+0x48>
  return _init();
 80a16ac:	4620      	mov	r0, r4
}
 80a16ae:	b003      	add	sp, #12
 80a16b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return _init();
 80a16b4:	f7ff bf92 	b.w	80a15dc <_ZN16Adafruit_LIS3MDL5_initEv>
}
 80a16b8:	b003      	add	sp, #12
 80a16ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a16be <_ZN16Adafruit_LIS3MDL9begin_SPIEaaaam>:
                                 int8_t mosi_pin, uint32_t frequency) {
 80a16be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16c2:	4698      	mov	r8, r3
  i2c_dev = NULL;
 80a16c4:	2300      	movs	r3, #0
  if (!spi_dev) {
 80a16c6:	f8d0 9020 	ldr.w	r9, [r0, #32]
                                 int8_t mosi_pin, uint32_t frequency) {
 80a16ca:	b085      	sub	sp, #20
 80a16cc:	4604      	mov	r4, r0
 80a16ce:	460e      	mov	r6, r1
 80a16d0:	4617      	mov	r7, r2
 80a16d2:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 80a16d6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  i2c_dev = NULL;
 80a16da:	61c3      	str	r3, [r0, #28]
  if (!spi_dev) {
 80a16dc:	f1b9 0f00 	cmp.w	r9, #0
 80a16e0:	d111      	bne.n	80a1706 <_ZN16Adafruit_LIS3MDL9begin_SPIEaaaam+0x48>
                                     SPI_MODE0);            // data mode
 80a16e2:	2038      	movs	r0, #56	; 0x38
 80a16e4:	f7fe fcd7 	bl	80a0096 <_Znwj>
 80a16e8:	4605      	mov	r5, r0
 80a16ea:	b158      	cbz	r0, 80a1704 <_ZN16Adafruit_LIS3MDL9begin_SPIEaaaam+0x46>
 80a16ec:	2301      	movs	r3, #1
 80a16ee:	463a      	mov	r2, r7
 80a16f0:	e9cd b301 	strd	fp, r3, [sp, #4]
 80a16f4:	4631      	mov	r1, r6
 80a16f6:	4643      	mov	r3, r8
 80a16f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80a16fc:	f8cd a000 	str.w	sl, [sp]
 80a1700:	f7fe fffe 	bl	80a0700 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>
    spi_dev = new Adafruit_SPIDevice(cs_pin, sck_pin, miso_pin, mosi_pin,
 80a1704:	6225      	str	r5, [r4, #32]
  if (!spi_dev->begin()) {
 80a1706:	6a20      	ldr	r0, [r4, #32]
 80a1708:	f7ff f869 	bl	80a07de <_ZN18Adafruit_SPIDevice5beginEv>
 80a170c:	b128      	cbz	r0, 80a171a <_ZN16Adafruit_LIS3MDL9begin_SPIEaaaam+0x5c>
  return _init();
 80a170e:	4620      	mov	r0, r4
}
 80a1710:	b005      	add	sp, #20
 80a1712:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _init();
 80a1716:	f7ff bf61 	b.w	80a15dc <_ZN16Adafruit_LIS3MDL5_initEv>
}
 80a171a:	b005      	add	sp, #20
 80a171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1720 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <HAL_Pin_Map+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	681b      	ldr	r3, [r3, #0]
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601b0 	.word	0x080601b0

080a1730 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <HAL_Pin_Mode+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	689b      	ldr	r3, [r3, #8]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601b0 	.word	0x080601b0

080a1740 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_Get_Pin_Mode+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	68db      	ldr	r3, [r3, #12]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601b0 	.word	0x080601b0

080a1750 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_GPIO_Write+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	691b      	ldr	r3, [r3, #16]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601b0 	.word	0x080601b0

080a1760 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <HAL_RNG_GetRandomNumber+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	685b      	ldr	r3, [r3, #4]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	0806019c 	.word	0x0806019c

080a1770 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <HAL_Delay_Microseconds+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	68db      	ldr	r3, [r3, #12]
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	0806019c 	.word	0x0806019c

080a1780 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	695b      	ldr	r3, [r3, #20]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	0806019c 	.word	0x0806019c

080a1790 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <os_mutex_recursive_create+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601d0 	.word	0x080601d0

080a17a0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <os_mutex_recursive_destroy+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601d0 	.word	0x080601d0

080a17b0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <os_mutex_recursive_lock+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601d0 	.word	0x080601d0

080a17c0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <os_mutex_recursive_unlock+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601d0 	.word	0x080601d0

080a17d0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <hal_usart_init+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	699b      	ldr	r3, [r3, #24]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601c4 	.word	0x080601c4

080a17e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <hal_usart_write+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601c4 	.word	0x080601c4

080a17f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <hal_usart_available+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601c4 	.word	0x080601c4

080a1800 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <hal_usart_read+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601c4 	.word	0x080601c4

080a1810 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <hal_usart_peek+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601c4 	.word	0x080601c4

080a1820 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <hal_usart_flush+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601c4 	.word	0x080601c4

080a1830 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <hal_usart_is_enabled+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601c4 	.word	0x080601c4

080a1840 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <hal_usart_available_data_for_write+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601c4 	.word	0x080601c4

080a1850 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <hal_i2c_begin+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601ac 	.word	0x080601ac

080a1860 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <hal_i2c_begin_transmission+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601ac 	.word	0x080601ac

080a1870 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <hal_i2c_end_transmission+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601ac 	.word	0x080601ac

080a1880 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <hal_i2c_write+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601ac 	.word	0x080601ac

080a1890 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <hal_i2c_available+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601ac 	.word	0x080601ac

080a18a0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <hal_i2c_read+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601ac 	.word	0x080601ac

080a18b0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <hal_i2c_peek+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601ac 	.word	0x080601ac

080a18c0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <hal_i2c_flush+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601ac 	.word	0x080601ac

080a18d0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <hal_i2c_is_enabled+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601ac 	.word	0x080601ac

080a18e0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b03      	ldr	r3, [pc, #12]	; (80a18f0 <hal_i2c_init+0x10>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a18ea:	9301      	str	r3, [sp, #4]
 80a18ec:	bd08      	pop	{r3, pc}
 80a18ee:	0000      	.short	0x0000
 80a18f0:	080601ac 	.word	0x080601ac

080a18f4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a18f4:	b508      	push	{r3, lr}
 80a18f6:	4b03      	ldr	r3, [pc, #12]	; (80a1904 <hal_i2c_request_ex+0x10>)
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a18fe:	9301      	str	r3, [sp, #4]
 80a1900:	bd08      	pop	{r3, pc}
 80a1902:	0000      	.short	0x0000
 80a1904:	080601ac 	.word	0x080601ac

080a1908 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <hal_spi_begin+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	681b      	ldr	r3, [r3, #0]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601b4 	.word	0x080601b4

080a1918 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <hal_spi_init+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	69db      	ldr	r3, [r3, #28]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601b4 	.word	0x080601b4

080a1928 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <hal_spi_is_enabled+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	6a1b      	ldr	r3, [r3, #32]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601b4 	.word	0x080601b4

080a1938 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <hal_spi_info+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601b4 	.word	0x080601b4

080a1948 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <hal_spi_transfer_dma+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601b4 	.word	0x080601b4

080a1958 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <hal_spi_transfer_dma_status+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601b4 	.word	0x080601b4

080a1968 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <hal_spi_set_settings+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601b4 	.word	0x080601b4

080a1978 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <HAL_USB_USART_Init+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	681b      	ldr	r3, [r3, #0]
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601d8 	.word	0x080601d8

080a1988 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <HAL_USB_USART_Begin+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	685b      	ldr	r3, [r3, #4]
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601d8 	.word	0x080601d8

080a1998 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <HAL_USB_USART_Available_Data+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	691b      	ldr	r3, [r3, #16]
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601d8 	.word	0x080601d8

080a19a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	695b      	ldr	r3, [r3, #20]
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601d8 	.word	0x080601d8

080a19b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <HAL_USB_USART_Receive_Data+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	699b      	ldr	r3, [r3, #24]
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601d8 	.word	0x080601d8

080a19c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a19c8:	b508      	push	{r3, lr}
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <HAL_USB_USART_Send_Data+0xc>)
 80a19cc:	681b      	ldr	r3, [r3, #0]
 80a19ce:	69db      	ldr	r3, [r3, #28]
 80a19d0:	9301      	str	r3, [sp, #4]
 80a19d2:	bd08      	pop	{r3, pc}
 80a19d4:	080601d8 	.word	0x080601d8

080a19d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a19d8:	b508      	push	{r3, lr}
 80a19da:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <HAL_USB_USART_Flush_Data+0xc>)
 80a19dc:	681b      	ldr	r3, [r3, #0]
 80a19de:	6a1b      	ldr	r3, [r3, #32]
 80a19e0:	9301      	str	r3, [sp, #4]
 80a19e2:	bd08      	pop	{r3, pc}
 80a19e4:	080601d8 	.word	0x080601d8

080a19e8 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <HAL_USB_USART_Is_Enabled+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601d8 	.word	0x080601d8

080a19f8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a19f8:	b508      	push	{r3, lr}
 80a19fa:	4b02      	ldr	r3, [pc, #8]	; (80a1a04 <inet_gethostbyname+0xc>)
 80a19fc:	681b      	ldr	r3, [r3, #0]
 80a19fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1a00:	9301      	str	r3, [sp, #4]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	080601c0 	.word	0x080601c0

080a1a08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1a08:	b508      	push	{r3, lr}
 80a1a0a:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <set_system_mode+0xc>)
 80a1a0c:	681b      	ldr	r3, [r3, #0]
 80a1a0e:	685b      	ldr	r3, [r3, #4]
 80a1a10:	9301      	str	r3, [sp, #4]
 80a1a12:	bd08      	pop	{r3, pc}
 80a1a14:	080601a4 	.word	0x080601a4

080a1a18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <system_delay_ms+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	695b      	ldr	r3, [r3, #20]
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601a4 	.word	0x080601a4

080a1a28 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1a28:	b508      	push	{r3, lr}
 80a1a2a:	4b02      	ldr	r3, [pc, #8]	; (80a1a34 <application_thread_current+0xc>)
 80a1a2c:	681b      	ldr	r3, [r3, #0]
 80a1a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1a30:	9301      	str	r3, [sp, #4]
 80a1a32:	bd08      	pop	{r3, pc}
 80a1a34:	080601a4 	.word	0x080601a4

080a1a38 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b02      	ldr	r3, [pc, #8]	; (80a1a44 <application_thread_invoke+0xc>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1a40:	9301      	str	r3, [sp, #4]
 80a1a42:	bd08      	pop	{r3, pc}
 80a1a44:	080601a4 	.word	0x080601a4

080a1a48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1a48:	b508      	push	{r3, lr}
 80a1a4a:	4b03      	ldr	r3, [pc, #12]	; (80a1a58 <system_ctrl_set_app_request_handler+0x10>)
 80a1a4c:	681b      	ldr	r3, [r3, #0]
 80a1a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1a52:	9301      	str	r3, [sp, #4]
 80a1a54:	bd08      	pop	{r3, pc}
 80a1a56:	0000      	.short	0x0000
 80a1a58:	080601a4 	.word	0x080601a4

080a1a5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1a5c:	b508      	push	{r3, lr}
 80a1a5e:	4b03      	ldr	r3, [pc, #12]	; (80a1a6c <system_ctrl_set_result+0x10>)
 80a1a60:	681b      	ldr	r3, [r3, #0]
 80a1a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1a66:	9301      	str	r3, [sp, #4]
 80a1a68:	bd08      	pop	{r3, pc}
 80a1a6a:	0000      	.short	0x0000
 80a1a6c:	080601a4 	.word	0x080601a4

080a1a70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1a70:	b508      	push	{r3, lr}
 80a1a72:	4b02      	ldr	r3, [pc, #8]	; (80a1a7c <network_connect+0xc>)
 80a1a74:	681b      	ldr	r3, [r3, #0]
 80a1a76:	685b      	ldr	r3, [r3, #4]
 80a1a78:	9301      	str	r3, [sp, #4]
 80a1a7a:	bd08      	pop	{r3, pc}
 80a1a7c:	080601c8 	.word	0x080601c8

080a1a80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1a80:	b508      	push	{r3, lr}
 80a1a82:	4b02      	ldr	r3, [pc, #8]	; (80a1a8c <network_connecting+0xc>)
 80a1a84:	681b      	ldr	r3, [r3, #0]
 80a1a86:	689b      	ldr	r3, [r3, #8]
 80a1a88:	9301      	str	r3, [sp, #4]
 80a1a8a:	bd08      	pop	{r3, pc}
 80a1a8c:	080601c8 	.word	0x080601c8

080a1a90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1a90:	b508      	push	{r3, lr}
 80a1a92:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <network_disconnect+0xc>)
 80a1a94:	681b      	ldr	r3, [r3, #0]
 80a1a96:	68db      	ldr	r3, [r3, #12]
 80a1a98:	9301      	str	r3, [sp, #4]
 80a1a9a:	bd08      	pop	{r3, pc}
 80a1a9c:	080601c8 	.word	0x080601c8

080a1aa0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1aa0:	b508      	push	{r3, lr}
 80a1aa2:	4b02      	ldr	r3, [pc, #8]	; (80a1aac <network_ready+0xc>)
 80a1aa4:	681b      	ldr	r3, [r3, #0]
 80a1aa6:	691b      	ldr	r3, [r3, #16]
 80a1aa8:	9301      	str	r3, [sp, #4]
 80a1aaa:	bd08      	pop	{r3, pc}
 80a1aac:	080601c8 	.word	0x080601c8

080a1ab0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ab0:	b508      	push	{r3, lr}
 80a1ab2:	4b02      	ldr	r3, [pc, #8]	; (80a1abc <network_on+0xc>)
 80a1ab4:	681b      	ldr	r3, [r3, #0]
 80a1ab6:	695b      	ldr	r3, [r3, #20]
 80a1ab8:	9301      	str	r3, [sp, #4]
 80a1aba:	bd08      	pop	{r3, pc}
 80a1abc:	080601c8 	.word	0x080601c8

080a1ac0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ac0:	b508      	push	{r3, lr}
 80a1ac2:	4b02      	ldr	r3, [pc, #8]	; (80a1acc <network_off+0xc>)
 80a1ac4:	681b      	ldr	r3, [r3, #0]
 80a1ac6:	699b      	ldr	r3, [r3, #24]
 80a1ac8:	9301      	str	r3, [sp, #4]
 80a1aca:	bd08      	pop	{r3, pc}
 80a1acc:	080601c8 	.word	0x080601c8

080a1ad0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1ad0:	b508      	push	{r3, lr}
 80a1ad2:	4b02      	ldr	r3, [pc, #8]	; (80a1adc <network_listen+0xc>)
 80a1ad4:	681b      	ldr	r3, [r3, #0]
 80a1ad6:	69db      	ldr	r3, [r3, #28]
 80a1ad8:	9301      	str	r3, [sp, #4]
 80a1ada:	bd08      	pop	{r3, pc}
 80a1adc:	080601c8 	.word	0x080601c8

080a1ae0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1ae0:	b508      	push	{r3, lr}
 80a1ae2:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <network_listening+0xc>)
 80a1ae4:	681b      	ldr	r3, [r3, #0]
 80a1ae6:	6a1b      	ldr	r3, [r3, #32]
 80a1ae8:	9301      	str	r3, [sp, #4]
 80a1aea:	bd08      	pop	{r3, pc}
 80a1aec:	080601c8 	.word	0x080601c8

080a1af0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1af0:	b508      	push	{r3, lr}
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <network_set_listen_timeout+0xc>)
 80a1af4:	681b      	ldr	r3, [r3, #0]
 80a1af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1af8:	9301      	str	r3, [sp, #4]
 80a1afa:	bd08      	pop	{r3, pc}
 80a1afc:	080601c8 	.word	0x080601c8

080a1b00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1b00:	b508      	push	{r3, lr}
 80a1b02:	4b02      	ldr	r3, [pc, #8]	; (80a1b0c <network_get_listen_timeout+0xc>)
 80a1b04:	681b      	ldr	r3, [r3, #0]
 80a1b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1b08:	9301      	str	r3, [sp, #4]
 80a1b0a:	bd08      	pop	{r3, pc}
 80a1b0c:	080601c8 	.word	0x080601c8

080a1b10 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1b10:	b508      	push	{r3, lr}
 80a1b12:	4b02      	ldr	r3, [pc, #8]	; (80a1b1c <network_is_on+0xc>)
 80a1b14:	681b      	ldr	r3, [r3, #0]
 80a1b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1b18:	9301      	str	r3, [sp, #4]
 80a1b1a:	bd08      	pop	{r3, pc}
 80a1b1c:	080601c8 	.word	0x080601c8

080a1b20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1b20:	b508      	push	{r3, lr}
 80a1b22:	4b02      	ldr	r3, [pc, #8]	; (80a1b2c <network_is_off+0xc>)
 80a1b24:	681b      	ldr	r3, [r3, #0]
 80a1b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1b28:	9301      	str	r3, [sp, #4]
 80a1b2a:	bd08      	pop	{r3, pc}
 80a1b2c:	080601c8 	.word	0x080601c8

080a1b30 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <spark_cloud_flag_connect+0xc>)
 80a1b34:	681b      	ldr	r3, [r3, #0]
 80a1b36:	68db      	ldr	r3, [r3, #12]
 80a1b38:	9301      	str	r3, [sp, #4]
 80a1b3a:	bd08      	pop	{r3, pc}
 80a1b3c:	080601cc 	.word	0x080601cc

080a1b40 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b02      	ldr	r3, [pc, #8]	; (80a1b4c <spark_cloud_flag_connected+0xc>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	695b      	ldr	r3, [r3, #20]
 80a1b48:	9301      	str	r3, [sp, #4]
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	080601cc 	.word	0x080601cc

080a1b50 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1b50:	b508      	push	{r3, lr}
 80a1b52:	4b02      	ldr	r3, [pc, #8]	; (80a1b5c <spark_send_event+0xc>)
 80a1b54:	681b      	ldr	r3, [r3, #0]
 80a1b56:	6a1b      	ldr	r3, [r3, #32]
 80a1b58:	9301      	str	r3, [sp, #4]
 80a1b5a:	bd08      	pop	{r3, pc}
 80a1b5c:	080601cc 	.word	0x080601cc

080a1b60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601cc 	.word	0x080601cc

080a1b70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <malloc+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	681b      	ldr	r3, [r3, #0]
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080601a0 	.word	0x080601a0

080a1b80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <free+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	685b      	ldr	r3, [r3, #4]
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601a0 	.word	0x080601a0

080a1b90 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <realloc+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	689b      	ldr	r3, [r3, #8]
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601a0 	.word	0x080601a0

080a1ba0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <vsnprintf+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601a0 	.word	0x080601a0

080a1bb0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <abort+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	080601a0 	.word	0x080601a0

080a1bc0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <_malloc_r+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	080601a0 	.word	0x080601a0

080a1bd0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <newlib_impure_ptr_callback+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	080601a0 	.word	0x080601a0

080a1be0 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1be0:	6880      	ldr	r0, [r0, #8]
 80a1be2:	f7ff bded 	b.w	80a17c0 <os_mutex_recursive_unlock>

080a1be6 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1be6:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a1be8:	2600      	movs	r6, #0
 80a1bea:	4604      	mov	r4, r0
 80a1bec:	460d      	mov	r5, r1
 80a1bee:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a1bf2:	f7ff fdcd 	bl	80a1790 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1bf6:	4628      	mov	r0, r5
    _spi = spi;
 80a1bf8:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1bfa:	f7ff fe8d 	bl	80a1918 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1bfe:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1c00:	6066      	str	r6, [r4, #4]
}
 80a1c02:	bd70      	pop	{r4, r5, r6, pc}

080a1c04 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a1c04:	b510      	push	{r4, lr}
 80a1c06:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a1c08:	6880      	ldr	r0, [r0, #8]
 80a1c0a:	f7ff fdd1 	bl	80a17b0 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a1c0e:	7820      	ldrb	r0, [r4, #0]
 80a1c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1c14:	f7ff fe78 	bl	80a1908 <hal_spi_begin>
        unlock();
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	f7ff ffe1 	bl	80a1be0 <_ZN8SPIClass6unlockEv>
    }
}
 80a1c1e:	bd10      	pop	{r4, pc}

080a1c20 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a1c20:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 80a1c22:	f7ff ffdd 	bl	80a1be0 <_ZN8SPIClass6unlockEv>
}
 80a1c26:	bd08      	pop	{r3, pc}

080a1c28 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a1c28:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a1c2a:	2400      	movs	r4, #0
 80a1c2c:	0840      	lsrs	r0, r0, #1
 80a1c2e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1c30:	6818      	ldr	r0, [r3, #0]
 80a1c32:	b2e5      	uxtb	r5, r4
 80a1c34:	4288      	cmp	r0, r1
 80a1c36:	d906      	bls.n	80a1c46 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1c38:	3401      	adds	r4, #1
 80a1c3a:	2c08      	cmp	r4, #8
 80a1c3c:	d002      	beq.n	80a1c44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a1c3e:	0840      	lsrs	r0, r0, #1
 80a1c40:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1c42:	e7f5      	b.n	80a1c30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1c44:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1c48:	5d5b      	ldrb	r3, [r3, r5]
 80a1c4a:	7013      	strb	r3, [r2, #0]
}
 80a1c4c:	bd30      	pop	{r4, r5, pc}
 80a1c4e:	bf00      	nop
 80a1c50:	080a475c 	.word	0x080a475c

080a1c54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a1c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1c58:	4606      	mov	r6, r0
 80a1c5a:	b08f      	sub	sp, #60	; 0x3c
 80a1c5c:	6880      	ldr	r0, [r0, #8]
 80a1c5e:	460c      	mov	r4, r1
 80a1c60:	f7ff fda6 	bl	80a17b0 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1c64:	2214      	movs	r2, #20
 80a1c66:	2100      	movs	r1, #0
 80a1c68:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a1c6a:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1c6c:	f002 fb94 	bl	80a4398 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1c70:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a1c72:	2200      	movs	r2, #0
 80a1c74:	4628      	mov	r0, r5
 80a1c76:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1c78:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a1c7c:	f7ff fe5c 	bl	80a1938 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a1c80:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a1c84:	b113      	cbz	r3, 80a1c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a1c86:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a1c8a:	b155      	cbz	r5, 80a1ca2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80a1c8c:	2700      	movs	r7, #0
 80a1c8e:	2501      	movs	r5, #1
 80a1c90:	46b9      	mov	r9, r7
 80a1c92:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1c94:	7923      	ldrb	r3, [r4, #4]
 80a1c96:	b15d      	cbz	r5, 80a1cb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a1c98:	b1c3      	cbz	r3, 80a1ccc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a1c9a:	2000      	movs	r0, #0
 80a1c9c:	b00f      	add	sp, #60	; 0x3c
 80a1c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a1ca2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a1ca6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a1caa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a1cae:	e7f1      	b.n	80a1c94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80a1cb0:	2b00      	cmp	r3, #0
 80a1cb2:	d135      	bne.n	80a1d20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a1cb4:	68a3      	ldr	r3, [r4, #8]
 80a1cb6:	4543      	cmp	r3, r8
 80a1cb8:	d108      	bne.n	80a1ccc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1cba:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1cbe:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a1cc2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1cc6:	89a3      	ldrh	r3, [r4, #12]
 80a1cc8:	429a      	cmp	r2, r3
 80a1cca:	d0e6      	beq.n	80a1c9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a1ccc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a1cce:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a1cd0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a1cd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a1cd6:	ab04      	add	r3, sp, #16
 80a1cd8:	f10d 020f 	add.w	r2, sp, #15
 80a1cdc:	f7ff ffa4 	bl	80a1c28 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1ce0:	7921      	ldrb	r1, [r4, #4]
 80a1ce2:	b985      	cbnz	r5, 80a1d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 80a1ce4:	b989      	cbnz	r1, 80a1d0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a1ce6:	68a3      	ldr	r3, [r4, #8]
 80a1ce8:	4543      	cmp	r3, r8
 80a1cea:	d30e      	bcc.n	80a1d0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1cec:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1cf0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a1cf4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1cf8:	89a3      	ldrh	r3, [r4, #12]
 80a1cfa:	429a      	cmp	r2, r3
 80a1cfc:	d105      	bne.n	80a1d0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a1cfe:	9b04      	ldr	r3, [sp, #16]
 80a1d00:	4543      	cmp	r3, r8
 80a1d02:	d102      	bne.n	80a1d0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a1d04:	e7c9      	b.n	80a1c9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a1d06:	2900      	cmp	r1, #0
 80a1d08:	d1f9      	bne.n	80a1cfe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a1d0a:	2300      	movs	r3, #0
 80a1d0c:	9301      	str	r3, [sp, #4]
 80a1d0e:	7b63      	ldrb	r3, [r4, #13]
 80a1d10:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a1d14:	9300      	str	r3, [sp, #0]
 80a1d16:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a1d18:	7830      	ldrb	r0, [r6, #0]
 80a1d1a:	f7ff fe25 	bl	80a1968 <hal_spi_set_settings>
    return 0;
 80a1d1e:	e7bc      	b.n	80a1c9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a1d20:	462b      	mov	r3, r5
 80a1d22:	462a      	mov	r2, r5
 80a1d24:	2101      	movs	r1, #1
 80a1d26:	e9cd 5500 	strd	r5, r5, [sp]
 80a1d2a:	e7f5      	b.n	80a1d18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a1d2c <_ZN8SPIClass8transferEPvS0_jPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a1d2c:	b530      	push	{r4, r5, lr}
 80a1d2e:	b087      	sub	sp, #28
 80a1d30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a1d32:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a1d34:	9500      	str	r5, [sp, #0]
 80a1d36:	7800      	ldrb	r0, [r0, #0]
 80a1d38:	f7ff fe06 	bl	80a1948 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 80a1d3c:	b93d      	cbnz	r5, 80a1d4e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 80a1d3e:	7820      	ldrb	r0, [r4, #0]
 80a1d40:	a902      	add	r1, sp, #8
 80a1d42:	f7ff fe09 	bl	80a1958 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 80a1d46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a1d4a:	07db      	lsls	r3, r3, #31
 80a1d4c:	d4f7      	bmi.n	80a1d3e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 80a1d4e:	b007      	add	sp, #28
 80a1d50:	bd30      	pop	{r4, r5, pc}
	...

080a1d54 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1d54:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1d56:	2000      	movs	r0, #0
 80a1d58:	4b04      	ldr	r3, [pc, #16]	; (80a1d6c <_GLOBAL__sub_I_System+0x18>)
 80a1d5a:	601a      	str	r2, [r3, #0]
 80a1d5c:	4b04      	ldr	r3, [pc, #16]	; (80a1d70 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1d5e:	4a05      	ldr	r2, [pc, #20]	; (80a1d74 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1d60:	6018      	str	r0, [r3, #0]
 80a1d62:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1d64:	7198      	strb	r0, [r3, #6]
 80a1d66:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1d68:	f7ff be4e 	b.w	80a1a08 <set_system_mode>
 80a1d6c:	2000018c 	.word	0x2000018c
 80a1d70:	20000180 	.word	0x20000180
 80a1d74:	ffff0000 	.word	0xffff0000

080a1d78 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1d78:	b510      	push	{r4, lr}
 80a1d7a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1d7c:	f002 fb53 	bl	80a4426 <strlen>
 80a1d80:	1e43      	subs	r3, r0, #1
 80a1d82:	4620      	mov	r0, r4
 80a1d84:	4423      	add	r3, r4
	while(i<j){
 80a1d86:	4283      	cmp	r3, r0
 80a1d88:	d906      	bls.n	80a1d98 <_Z11str_reversePc+0x20>
		c = *i;
 80a1d8a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1d8c:	7819      	ldrb	r1, [r3, #0]
 80a1d8e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1d92:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a1d96:	e7f6      	b.n	80a1d86 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a1d98:	bd10      	pop	{r4, pc}

080a1d9a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1d9a:	b570      	push	{r4, r5, r6, lr}
 80a1d9c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1d9e:	1e91      	subs	r1, r2, #2
 80a1da0:	2922      	cmp	r1, #34	; 0x22
 80a1da2:	d822      	bhi.n	80a1dea <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a1da4:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a1da6:	b168      	cbz	r0, 80a1dc4 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1da8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1dac:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1db0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1db2:	2809      	cmp	r0, #9
                *ptr += '0';
 80a1db4:	bf94      	ite	ls
 80a1db6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1db8:	3157      	addhi	r1, #87	; 0x57
 80a1dba:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a1dbc:	4630      	mov	r0, r6
 80a1dbe:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a1dc2:	e7f0      	b.n	80a1da6 <ultoa+0xc>
 80a1dc4:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a1dc6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a1dc8:	4423      	add	r3, r4
 80a1dca:	4293      	cmp	r3, r2
 80a1dcc:	d902      	bls.n	80a1dd4 <ultoa+0x3a>
            *ptr++ = '0';
 80a1dce:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a1dd2:	e7fa      	b.n	80a1dca <ultoa+0x30>
 80a1dd4:	1b5a      	subs	r2, r3, r5
 80a1dd6:	42ab      	cmp	r3, r5
 80a1dd8:	bf38      	it	cc
 80a1dda:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a1ddc:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1dde:	4620      	mov	r0, r4
	*ptr = '\0';
 80a1de0:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a1de2:	f7ff ffc9 	bl	80a1d78 <_Z11str_reversePc>
	return buffer;
 80a1de6:	4620      	mov	r0, r4
}
 80a1de8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a1dea:	2000      	movs	r0, #0
 80a1dec:	e7fc      	b.n	80a1de8 <ultoa+0x4e>
	...

080a1df0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a1df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1df4:	4607      	mov	r7, r0
 80a1df6:	460d      	mov	r5, r1
 80a1df8:	4616      	mov	r6, r2
 80a1dfa:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a1dfc:	2200      	movs	r2, #0
 80a1dfe:	2300      	movs	r3, #0
 80a1e00:	4638      	mov	r0, r7
 80a1e02:	4629      	mov	r1, r5
 80a1e04:	f001 fdc0 	bl	80a3988 <__aeabi_dcmplt>
 80a1e08:	b120      	cbz	r0, 80a1e14 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1e0a:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a1e0c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a1e10:	f804 3b01 	strb.w	r3, [r4], #1
 80a1e14:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a1e16:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1e1a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a1e1c:	b2d9      	uxtb	r1, r3
 80a1e1e:	428e      	cmp	r6, r1
 80a1e20:	d903      	bls.n	80a1e2a <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a1e22:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a1e26:	3301      	adds	r3, #1
 80a1e28:	e7f8      	b.n	80a1e1c <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a1e2a:	4650      	mov	r0, sl
 80a1e2c:	f001 fad0 	bl	80a33d0 <__aeabi_i2d>
 80a1e30:	463a      	mov	r2, r7
 80a1e32:	462b      	mov	r3, r5
 80a1e34:	f001 fb36 	bl	80a34a4 <__aeabi_dmul>
 80a1e38:	4680      	mov	r8, r0
 80a1e3a:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a1e3c:	f002 f916 	bl	80a406c <__aeabi_d2ulz>
 80a1e40:	4605      	mov	r5, r0
 80a1e42:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1e44:	f001 faf8 	bl	80a3438 <__aeabi_ul2d>
 80a1e48:	4602      	mov	r2, r0
 80a1e4a:	460b      	mov	r3, r1
 80a1e4c:	4640      	mov	r0, r8
 80a1e4e:	4649      	mov	r1, r9
 80a1e50:	f001 f970 	bl	80a3134 <__aeabi_dsub>
 80a1e54:	2200      	movs	r2, #0
 80a1e56:	4b12      	ldr	r3, [pc, #72]	; (80a1ea0 <_Z4dtoadhPc+0xb0>)
 80a1e58:	f001 fdaa 	bl	80a39b0 <__aeabi_dcmpge>
 80a1e5c:	b110      	cbz	r0, 80a1e64 <_Z4dtoadhPc+0x74>
        fixed++;
 80a1e5e:	3501      	adds	r5, #1
 80a1e60:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1e64:	4652      	mov	r2, sl
 80a1e66:	4628      	mov	r0, r5
 80a1e68:	4639      	mov	r1, r7
 80a1e6a:	17d3      	asrs	r3, r2, #31
 80a1e6c:	f002 f8e6 	bl	80a403c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a1e70:	2301      	movs	r3, #1
 80a1e72:	4615      	mov	r5, r2
 80a1e74:	4621      	mov	r1, r4
 80a1e76:	220a      	movs	r2, #10
 80a1e78:	f7ff ff8f 	bl	80a1d9a <ultoa>
    if (prec) {
 80a1e7c:	b16e      	cbz	r6, 80a1e9a <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a1e7e:	4620      	mov	r0, r4
 80a1e80:	f002 fad1 	bl	80a4426 <strlen>
        *sout++ = '.';
 80a1e84:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a1e86:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a1e88:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a1e8a:	220a      	movs	r2, #10
 80a1e8c:	4633      	mov	r3, r6
 80a1e8e:	4628      	mov	r0, r5
    }
}
 80a1e90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a1e94:	3101      	adds	r1, #1
 80a1e96:	f7ff bf80 	b.w	80a1d9a <ultoa>
}
 80a1e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1e9e:	bf00      	nop
 80a1ea0:	3fe00000 	.word	0x3fe00000

080a1ea4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1ea4:	b510      	push	{r4, lr}
 80a1ea6:	4604      	mov	r4, r0
{
	free(buffer);
 80a1ea8:	6800      	ldr	r0, [r0, #0]
 80a1eaa:	f7ff fe69 	bl	80a1b80 <free>
}
 80a1eae:	4620      	mov	r0, r4
 80a1eb0:	bd10      	pop	{r4, pc}

080a1eb2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1eb2:	b510      	push	{r4, lr}
 80a1eb4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1eb6:	6800      	ldr	r0, [r0, #0]
 80a1eb8:	b108      	cbz	r0, 80a1ebe <_ZN6String10invalidateEv+0xc>
 80a1eba:	f7ff fe61 	bl	80a1b80 <free>
	buffer = NULL;
 80a1ebe:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1ec0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1ec4:	6023      	str	r3, [r4, #0]
}
 80a1ec6:	bd10      	pop	{r4, pc}

080a1ec8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1ec8:	b538      	push	{r3, r4, r5, lr}
 80a1eca:	4604      	mov	r4, r0
 80a1ecc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1ece:	6800      	ldr	r0, [r0, #0]
 80a1ed0:	3101      	adds	r1, #1
 80a1ed2:	f7ff fe5d 	bl	80a1b90 <realloc>
	if (newbuffer) {
 80a1ed6:	b110      	cbz	r0, 80a1ede <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1ed8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1edc:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1ede:	bd38      	pop	{r3, r4, r5, pc}

080a1ee0 <_ZN6String7reserveEj>:
{
 80a1ee0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1ee2:	6803      	ldr	r3, [r0, #0]
{
 80a1ee4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1ee6:	b123      	cbz	r3, 80a1ef2 <_ZN6String7reserveEj+0x12>
 80a1ee8:	6843      	ldr	r3, [r0, #4]
 80a1eea:	428b      	cmp	r3, r1
 80a1eec:	d301      	bcc.n	80a1ef2 <_ZN6String7reserveEj+0x12>
 80a1eee:	2001      	movs	r0, #1
}
 80a1ef0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1ef2:	4620      	mov	r0, r4
 80a1ef4:	f7ff ffe8 	bl	80a1ec8 <_ZN6String12changeBufferEj>
 80a1ef8:	2800      	cmp	r0, #0
 80a1efa:	d0f9      	beq.n	80a1ef0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1efc:	68a3      	ldr	r3, [r4, #8]
 80a1efe:	2b00      	cmp	r3, #0
 80a1f00:	d1f5      	bne.n	80a1eee <_ZN6String7reserveEj+0xe>
 80a1f02:	6822      	ldr	r2, [r4, #0]
 80a1f04:	7013      	strb	r3, [r2, #0]
 80a1f06:	e7f2      	b.n	80a1eee <_ZN6String7reserveEj+0xe>

080a1f08 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1f08:	b570      	push	{r4, r5, r6, lr}
 80a1f0a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1f0c:	4611      	mov	r1, r2
{
 80a1f0e:	4604      	mov	r4, r0
 80a1f10:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1f12:	f7ff ffe5 	bl	80a1ee0 <_ZN6String7reserveEj>
 80a1f16:	b920      	cbnz	r0, 80a1f22 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1f18:	4620      	mov	r0, r4
 80a1f1a:	f7ff ffca 	bl	80a1eb2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1f1e:	4620      	mov	r0, r4
 80a1f20:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1f22:	462a      	mov	r2, r5
 80a1f24:	4631      	mov	r1, r6
 80a1f26:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1f28:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1f2a:	f002 fa27 	bl	80a437c <memcpy>
	buffer[len] = 0;
 80a1f2e:	2100      	movs	r1, #0
 80a1f30:	6822      	ldr	r2, [r4, #0]
 80a1f32:	68a3      	ldr	r3, [r4, #8]
 80a1f34:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1f36:	e7f2      	b.n	80a1f1e <_ZN6String4copyEPKcj+0x16>

080a1f38 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1f38:	b538      	push	{r3, r4, r5, lr}
 80a1f3a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1f3c:	460c      	mov	r4, r1
 80a1f3e:	b149      	cbz	r1, 80a1f54 <_ZN6StringaSEPKc+0x1c>
 80a1f40:	4608      	mov	r0, r1
 80a1f42:	f002 fa70 	bl	80a4426 <strlen>
 80a1f46:	4621      	mov	r1, r4
 80a1f48:	4602      	mov	r2, r0
 80a1f4a:	4628      	mov	r0, r5
 80a1f4c:	f7ff ffdc 	bl	80a1f08 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1f50:	4628      	mov	r0, r5
 80a1f52:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1f54:	f7ff ffad 	bl	80a1eb2 <_ZN6String10invalidateEv>
 80a1f58:	e7fa      	b.n	80a1f50 <_ZN6StringaSEPKc+0x18>

080a1f5a <_ZN6StringC1Efi>:
	buffer = NULL;
 80a1f5a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a1f5c:	b530      	push	{r4, r5, lr}
 80a1f5e:	4604      	mov	r4, r0
 80a1f60:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a1f62:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1f66:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1f68:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a1f6a:	b2d5      	uxtb	r5, r2
 80a1f6c:	4608      	mov	r0, r1
 80a1f6e:	f001 fa41 	bl	80a33f4 <__aeabi_f2d>
 80a1f72:	462a      	mov	r2, r5
 80a1f74:	ab01      	add	r3, sp, #4
 80a1f76:	f7ff ff3b 	bl	80a1df0 <_Z4dtoadhPc>
        *this = buf;
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	a901      	add	r1, sp, #4
 80a1f7e:	f7ff ffdb 	bl	80a1f38 <_ZN6StringaSEPKc>
}
 80a1f82:	4620      	mov	r0, r4
 80a1f84:	b00b      	add	sp, #44	; 0x2c
 80a1f86:	bd30      	pop	{r4, r5, pc}

080a1f88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f8a:	4606      	mov	r6, r0
 80a1f8c:	460d      	mov	r5, r1
  size_t n = 0;
 80a1f8e:	2400      	movs	r4, #0
 80a1f90:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1f92:	42bd      	cmp	r5, r7
 80a1f94:	d00c      	beq.n	80a1fb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1f96:	6833      	ldr	r3, [r6, #0]
 80a1f98:	4630      	mov	r0, r6
 80a1f9a:	689b      	ldr	r3, [r3, #8]
 80a1f9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1fa0:	4798      	blx	r3
     if (chunk>=0)
 80a1fa2:	1e03      	subs	r3, r0, #0
 80a1fa4:	db01      	blt.n	80a1faa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1fa6:	441c      	add	r4, r3
  while (size--) {
 80a1fa8:	e7f3      	b.n	80a1f92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1faa:	2c00      	cmp	r4, #0
 80a1fac:	bf08      	it	eq
 80a1fae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1fb0:	4620      	mov	r0, r4
 80a1fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fb4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1fb4:	b570      	push	{r4, r5, r6, lr}
 80a1fb6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1fb8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1fba:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1fbc:	b149      	cbz	r1, 80a1fd2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1fbe:	f002 fa32 	bl	80a4426 <strlen>
 80a1fc2:	682b      	ldr	r3, [r5, #0]
 80a1fc4:	4602      	mov	r2, r0
 80a1fc6:	4621      	mov	r1, r4
 80a1fc8:	4628      	mov	r0, r5
    }
 80a1fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1fce:	68db      	ldr	r3, [r3, #12]
 80a1fd0:	4718      	bx	r3
    }
 80a1fd2:	bd70      	pop	{r4, r5, r6, pc}

080a1fd4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1fd4:	b508      	push	{r3, lr}
  return write(str);
 80a1fd6:	f7ff ffed 	bl	80a1fb4 <_ZN5Print5writeEPKc>
}
 80a1fda:	bd08      	pop	{r3, pc}

080a1fdc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1fdc:	6803      	ldr	r3, [r0, #0]
 80a1fde:	689b      	ldr	r3, [r3, #8]
 80a1fe0:	4718      	bx	r3

080a1fe2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1fe2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1fe4:	210d      	movs	r1, #13
{
 80a1fe6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1fe8:	f7ff fff8 	bl	80a1fdc <_ZN5Print5printEc>
  n += print('\n');
 80a1fec:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1fee:	4604      	mov	r4, r0
  n += print('\n');
 80a1ff0:	4628      	mov	r0, r5
 80a1ff2:	f7ff fff3 	bl	80a1fdc <_ZN5Print5printEc>
  return n;
}
 80a1ff6:	4420      	add	r0, r4
 80a1ff8:	bd38      	pop	{r3, r4, r5, pc}

080a1ffa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1ffa:	b538      	push	{r3, r4, r5, lr}
 80a1ffc:	4605      	mov	r5, r0
  return write(str);
 80a1ffe:	f7ff ffd9 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a2002:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2004:	4628      	mov	r0, r5
 80a2006:	f7ff ffec 	bl	80a1fe2 <_ZN5Print7printlnEv>
  return n;
}
 80a200a:	4420      	add	r0, r4
 80a200c:	bd38      	pop	{r3, r4, r5, pc}

080a200e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a200e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2010:	2a01      	cmp	r2, #1
 80a2012:	bf98      	it	ls
 80a2014:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2016:	b530      	push	{r4, r5, lr}
 80a2018:	b08b      	sub	sp, #44	; 0x2c
 80a201a:	460c      	mov	r4, r1
  *str = '\0';
 80a201c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2020:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2022:	4625      	mov	r5, r4
 80a2024:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2028:	fb04 5312 	mls	r3, r4, r2, r5
 80a202c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a202e:	2b09      	cmp	r3, #9
 80a2030:	bf94      	ite	ls
 80a2032:	3330      	addls	r3, #48	; 0x30
 80a2034:	3337      	addhi	r3, #55	; 0x37
 80a2036:	b2db      	uxtb	r3, r3
  } while(n);
 80a2038:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a203a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a203e:	d9f0      	bls.n	80a2022 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2040:	f7ff ffb8 	bl	80a1fb4 <_ZN5Print5writeEPKc>
}
 80a2044:	b00b      	add	sp, #44	; 0x2c
 80a2046:	bd30      	pop	{r4, r5, pc}

080a2048 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a204c:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a204e:	4619      	mov	r1, r3
 80a2050:	4610      	mov	r0, r2
{
 80a2052:	4692      	mov	sl, r2
 80a2054:	461f      	mov	r7, r3
 80a2056:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a205a:	f001 fcbd 	bl	80a39d8 <__aeabi_dcmpun>
 80a205e:	b140      	cbz	r0, 80a2072 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a2060:	4950      	ldr	r1, [pc, #320]	; (80a21a4 <_ZN5Print10printFloatEdh+0x15c>)
 80a2062:	4628      	mov	r0, r5
 80a2064:	f7ff ffa6 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a2068:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a206a:	4620      	mov	r0, r4
 80a206c:	b003      	add	sp, #12
 80a206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a2072:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a2076:	f04f 32ff 	mov.w	r2, #4294967295
 80a207a:	4650      	mov	r0, sl
 80a207c:	4621      	mov	r1, r4
 80a207e:	4b4a      	ldr	r3, [pc, #296]	; (80a21a8 <_ZN5Print10printFloatEdh+0x160>)
 80a2080:	f001 fcaa 	bl	80a39d8 <__aeabi_dcmpun>
 80a2084:	b948      	cbnz	r0, 80a209a <_ZN5Print10printFloatEdh+0x52>
 80a2086:	f04f 32ff 	mov.w	r2, #4294967295
 80a208a:	4650      	mov	r0, sl
 80a208c:	4621      	mov	r1, r4
 80a208e:	4b46      	ldr	r3, [pc, #280]	; (80a21a8 <_ZN5Print10printFloatEdh+0x160>)
 80a2090:	f001 fc84 	bl	80a399c <__aeabi_dcmple>
 80a2094:	b908      	cbnz	r0, 80a209a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a2096:	4945      	ldr	r1, [pc, #276]	; (80a21ac <_ZN5Print10printFloatEdh+0x164>)
 80a2098:	e7e3      	b.n	80a2062 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a209a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a209e:	4650      	mov	r0, sl
 80a20a0:	4639      	mov	r1, r7
 80a20a2:	4b43      	ldr	r3, [pc, #268]	; (80a21b0 <_ZN5Print10printFloatEdh+0x168>)
 80a20a4:	f001 fc8e 	bl	80a39c4 <__aeabi_dcmpgt>
 80a20a8:	b108      	cbz	r0, 80a20ae <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a20aa:	4942      	ldr	r1, [pc, #264]	; (80a21b4 <_ZN5Print10printFloatEdh+0x16c>)
 80a20ac:	e7d9      	b.n	80a2062 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a20ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a20b2:	4650      	mov	r0, sl
 80a20b4:	4639      	mov	r1, r7
 80a20b6:	4b40      	ldr	r3, [pc, #256]	; (80a21b8 <_ZN5Print10printFloatEdh+0x170>)
 80a20b8:	f001 fc66 	bl	80a3988 <__aeabi_dcmplt>
 80a20bc:	2800      	cmp	r0, #0
 80a20be:	d1f4      	bne.n	80a20aa <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a20c0:	2200      	movs	r2, #0
 80a20c2:	2300      	movs	r3, #0
 80a20c4:	4650      	mov	r0, sl
 80a20c6:	4639      	mov	r1, r7
 80a20c8:	f001 fc5e 	bl	80a3988 <__aeabi_dcmplt>
 80a20cc:	4604      	mov	r4, r0
 80a20ce:	b130      	cbz	r0, 80a20de <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a20d0:	212d      	movs	r1, #45	; 0x2d
 80a20d2:	4628      	mov	r0, r5
 80a20d4:	f7ff ff82 	bl	80a1fdc <_ZN5Print5printEc>
 80a20d8:	4604      	mov	r4, r0
     number = -number;
 80a20da:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a20de:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a20e2:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a20e4:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a20e8:	4934      	ldr	r1, [pc, #208]	; (80a21bc <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a20ea:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a21c4 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a20ee:	fa5f f38b 	uxtb.w	r3, fp
 80a20f2:	429e      	cmp	r6, r3
 80a20f4:	d906      	bls.n	80a2104 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a20f6:	4642      	mov	r2, r8
 80a20f8:	464b      	mov	r3, r9
 80a20fa:	f001 fafd 	bl	80a36f8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a20fe:	f10b 0b01 	add.w	fp, fp, #1
 80a2102:	e7f4      	b.n	80a20ee <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a2104:	463b      	mov	r3, r7
 80a2106:	4652      	mov	r2, sl
 80a2108:	f001 f816 	bl	80a3138 <__adddf3>
 80a210c:	4689      	mov	r9, r1
 80a210e:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a2110:	f001 fca0 	bl	80a3a54 <__aeabi_d2uiz>
 80a2114:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a2116:	f001 f94b 	bl	80a33b0 <__aeabi_ui2d>
 80a211a:	4602      	mov	r2, r0
 80a211c:	460b      	mov	r3, r1
 80a211e:	4640      	mov	r0, r8
 80a2120:	4649      	mov	r1, r9
 80a2122:	f001 f807 	bl	80a3134 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a2126:	220a      	movs	r2, #10
 80a2128:	4680      	mov	r8, r0
 80a212a:	4689      	mov	r9, r1
 80a212c:	4628      	mov	r0, r5
 80a212e:	4639      	mov	r1, r7
 80a2130:	f7ff ff6d 	bl	80a200e <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a2134:	4404      	add	r4, r0
  if (digits > 0) {
 80a2136:	b126      	cbz	r6, 80a2142 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a2138:	4628      	mov	r0, r5
 80a213a:	4921      	ldr	r1, [pc, #132]	; (80a21c0 <_ZN5Print10printFloatEdh+0x178>)
 80a213c:	f7ff ff3a 	bl	80a1fb4 <_ZN5Print5writeEPKc>
    n += print(".");
 80a2140:	4404      	add	r4, r0
    remainder *= 10.0;
 80a2142:	f04f 0a00 	mov.w	sl, #0
 80a2146:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a21c4 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a214a:	3e01      	subs	r6, #1
 80a214c:	b2f6      	uxtb	r6, r6
 80a214e:	2eff      	cmp	r6, #255	; 0xff
 80a2150:	d08b      	beq.n	80a206a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a2152:	4652      	mov	r2, sl
 80a2154:	465b      	mov	r3, fp
 80a2156:	4640      	mov	r0, r8
 80a2158:	4649      	mov	r1, r9
 80a215a:	f001 f9a3 	bl	80a34a4 <__aeabi_dmul>
 80a215e:	4680      	mov	r8, r0
 80a2160:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a2162:	f001 fc4f 	bl	80a3a04 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a2166:	1e07      	subs	r7, r0, #0
 80a2168:	da19      	bge.n	80a219e <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a216a:	212d      	movs	r1, #45	; 0x2d
 80a216c:	4628      	mov	r0, r5
 80a216e:	f7ff ff35 	bl	80a1fdc <_ZN5Print5printEc>
 80a2172:	4603      	mov	r3, r0
            val = -n;
 80a2174:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a2176:	220a      	movs	r2, #10
 80a2178:	4628      	mov	r0, r5
 80a217a:	9301      	str	r3, [sp, #4]
 80a217c:	f7ff ff47 	bl	80a200e <_ZN5Print11printNumberEmh>
 80a2180:	9b01      	ldr	r3, [sp, #4]
 80a2182:	4403      	add	r3, r0
    remainder -= toPrint;
 80a2184:	4638      	mov	r0, r7
    n += print(toPrint);
 80a2186:	441c      	add	r4, r3
    remainder -= toPrint;
 80a2188:	f001 f922 	bl	80a33d0 <__aeabi_i2d>
 80a218c:	4602      	mov	r2, r0
 80a218e:	460b      	mov	r3, r1
 80a2190:	4640      	mov	r0, r8
 80a2192:	4649      	mov	r1, r9
 80a2194:	f000 ffce 	bl	80a3134 <__aeabi_dsub>
 80a2198:	4680      	mov	r8, r0
 80a219a:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a219c:	e7d5      	b.n	80a214a <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a219e:	4639      	mov	r1, r7
        size_t t = 0;
 80a21a0:	2300      	movs	r3, #0
 80a21a2:	e7e8      	b.n	80a2176 <_ZN5Print10printFloatEdh+0x12e>
 80a21a4:	080a4764 	.word	0x080a4764
 80a21a8:	7fefffff 	.word	0x7fefffff
 80a21ac:	080a4768 	.word	0x080a4768
 80a21b0:	41efffff 	.word	0x41efffff
 80a21b4:	080a476c 	.word	0x080a476c
 80a21b8:	c1efffff 	.word	0xc1efffff
 80a21bc:	3fe00000 	.word	0x3fe00000
 80a21c0:	080a4770 	.word	0x080a4770
 80a21c4:	40240000 	.word	0x40240000

080a21c8 <_ZN5Print5printEfi>:
{
 80a21c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a21ca:	4605      	mov	r5, r0
 80a21cc:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a21ce:	4608      	mov	r0, r1
 80a21d0:	f001 f910 	bl	80a33f4 <__aeabi_f2d>
 80a21d4:	b2e4      	uxtb	r4, r4
 80a21d6:	4602      	mov	r2, r0
 80a21d8:	460b      	mov	r3, r1
 80a21da:	4628      	mov	r0, r5
 80a21dc:	9400      	str	r4, [sp, #0]
 80a21de:	f7ff ff33 	bl	80a2048 <_ZN5Print10printFloatEdh>
}
 80a21e2:	b003      	add	sp, #12
 80a21e4:	bd30      	pop	{r4, r5, pc}

080a21e6 <_ZN5Print7printlnEdi>:
{
 80a21e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a21e8:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a21ec:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a21ee:	9100      	str	r1, [sp, #0]
 80a21f0:	f7ff ff2a 	bl	80a2048 <_ZN5Print10printFloatEdh>
 80a21f4:	4604      	mov	r4, r0
  n += println();
 80a21f6:	4628      	mov	r0, r5
 80a21f8:	f7ff fef3 	bl	80a1fe2 <_ZN5Print7printlnEv>
}
 80a21fc:	4420      	add	r0, r4
 80a21fe:	b003      	add	sp, #12
 80a2200:	bd30      	pop	{r4, r5, pc}

080a2202 <_ZN5Print7printlnEfi>:
{
 80a2202:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2204:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a2206:	4608      	mov	r0, r1
{
 80a2208:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a220a:	f001 f8f3 	bl	80a33f4 <__aeabi_f2d>
 80a220e:	9500      	str	r5, [sp, #0]
 80a2210:	4602      	mov	r2, r0
 80a2212:	460b      	mov	r3, r1
 80a2214:	4620      	mov	r0, r4
 80a2216:	f7ff ffe6 	bl	80a21e6 <_ZN5Print7printlnEdi>
}
 80a221a:	b003      	add	sp, #12
 80a221c:	bd30      	pop	{r4, r5, pc}

080a221e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2222:	b086      	sub	sp, #24
 80a2224:	af00      	add	r7, sp, #0
 80a2226:	4605      	mov	r5, r0
 80a2228:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a222a:	1d38      	adds	r0, r7, #4
 80a222c:	2114      	movs	r1, #20
{
 80a222e:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2230:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2232:	f7ff fcb5 	bl	80a1ba0 <vsnprintf>

    if (n<bufsize)
 80a2236:	2813      	cmp	r0, #19
 80a2238:	d80e      	bhi.n	80a2258 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a223a:	4628      	mov	r0, r5
 80a223c:	1d39      	adds	r1, r7, #4
 80a223e:	f7ff feb9 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a2242:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a2244:	b11e      	cbz	r6, 80a224e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2246:	4628      	mov	r0, r5
 80a2248:	f7ff fecb 	bl	80a1fe2 <_ZN5Print7printlnEv>
 80a224c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a224e:	4620      	mov	r0, r4
 80a2250:	3718      	adds	r7, #24
 80a2252:	46bd      	mov	sp, r7
 80a2254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2258:	f100 0308 	add.w	r3, r0, #8
 80a225c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2260:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2262:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2266:	4622      	mov	r2, r4
 80a2268:	1c41      	adds	r1, r0, #1
 80a226a:	683b      	ldr	r3, [r7, #0]
 80a226c:	4668      	mov	r0, sp
 80a226e:	f7ff fc97 	bl	80a1ba0 <vsnprintf>
  return write(str);
 80a2272:	4669      	mov	r1, sp
 80a2274:	4628      	mov	r0, r5
 80a2276:	f7ff fe9d 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a227a:	4604      	mov	r4, r0
 80a227c:	46c5      	mov	sp, r8
 80a227e:	e7e1      	b.n	80a2244 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a2280 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2280:	2300      	movs	r3, #0
 80a2282:	6840      	ldr	r0, [r0, #4]
 80a2284:	461a      	mov	r2, r3
 80a2286:	4619      	mov	r1, r3
 80a2288:	f7ff bc12 	b.w	80a1ab0 <network_on>

080a228c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a228c:	680b      	ldr	r3, [r1, #0]
 80a228e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a2290:	b113      	cbz	r3, 80a2298 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a2292:	685a      	ldr	r2, [r3, #4]
 80a2294:	3201      	adds	r2, #1
 80a2296:	605a      	str	r2, [r3, #4]
      }
 80a2298:	4770      	bx	lr
	...

080a229c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a229c:	4b01      	ldr	r3, [pc, #4]	; (80a22a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a229e:	4a02      	ldr	r2, [pc, #8]	; (80a22a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a22a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a22a2:	4770      	bx	lr
 80a22a4:	20000190 	.word	0x20000190
 80a22a8:	080a4772 	.word	0x080a4772

080a22ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a22ac:	4b02      	ldr	r3, [pc, #8]	; (80a22b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a22ae:	681a      	ldr	r2, [r3, #0]
 80a22b0:	4b02      	ldr	r3, [pc, #8]	; (80a22bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a22b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a22b4:	4770      	bx	lr
 80a22b6:	bf00      	nop
 80a22b8:	20000000 	.word	0x20000000
 80a22bc:	20000194 	.word	0x20000194

080a22c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a22c0:	2100      	movs	r1, #0
 80a22c2:	f7ff bba9 	b.w	80a1a18 <system_delay_ms>

080a22c6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a22c6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a22c8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a22ca:	4604      	mov	r4, r0
      if (_M_manager)
 80a22cc:	b113      	cbz	r3, 80a22d4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a22ce:	2203      	movs	r2, #3
 80a22d0:	4601      	mov	r1, r0
 80a22d2:	4798      	blx	r3
    }
 80a22d4:	4620      	mov	r0, r4
 80a22d6:	bd10      	pop	{r4, pc}

080a22d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a22d8:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22da:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a22dc:	460b      	mov	r3, r1
 80a22de:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22e0:	c803      	ldmia	r0, {r0, r1}
 80a22e2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a22e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a22ea:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a22ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a22f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a22f6:	b002      	add	sp, #8
 80a22f8:	bd10      	pop	{r4, pc}
	...

080a22fc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a22fc:	2200      	movs	r2, #0
 80a22fe:	4b01      	ldr	r3, [pc, #4]	; (80a2304 <_GLOBAL__sub_I_RGB+0x8>)
 80a2300:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a2302:	4770      	bx	lr
 80a2304:	20000198 	.word	0x20000198

080a2308 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2308:	4b01      	ldr	r3, [pc, #4]	; (80a2310 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a230a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a230c:	4770      	bx	lr
 80a230e:	bf00      	nop
 80a2310:	20000004 	.word	0x20000004

080a2314 <serialEventRun>:
{
 80a2314:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2316:	4b13      	ldr	r3, [pc, #76]	; (80a2364 <serialEventRun+0x50>)
 80a2318:	b143      	cbz	r3, 80a232c <serialEventRun+0x18>
 80a231a:	f000 fc17 	bl	80a2b4c <_Z16_fetch_usbserialv>
 80a231e:	6803      	ldr	r3, [r0, #0]
 80a2320:	691b      	ldr	r3, [r3, #16]
 80a2322:	4798      	blx	r3
 80a2324:	2800      	cmp	r0, #0
 80a2326:	dd01      	ble.n	80a232c <serialEventRun+0x18>
        serialEvent();
 80a2328:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a232c:	4b0e      	ldr	r3, [pc, #56]	; (80a2368 <serialEventRun+0x54>)
 80a232e:	b143      	cbz	r3, 80a2342 <serialEventRun+0x2e>
 80a2330:	f000 fcbc 	bl	80a2cac <_Z22__fetch_global_Serial1v>
 80a2334:	6803      	ldr	r3, [r0, #0]
 80a2336:	691b      	ldr	r3, [r3, #16]
 80a2338:	4798      	blx	r3
 80a233a:	2800      	cmp	r0, #0
 80a233c:	dd01      	ble.n	80a2342 <serialEventRun+0x2e>
        serialEvent1();
 80a233e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2342:	4b0a      	ldr	r3, [pc, #40]	; (80a236c <serialEventRun+0x58>)
 80a2344:	b10b      	cbz	r3, 80a234a <serialEventRun+0x36>
 80a2346:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a234a:	4b09      	ldr	r3, [pc, #36]	; (80a2370 <serialEventRun+0x5c>)
 80a234c:	b143      	cbz	r3, 80a2360 <serialEventRun+0x4c>
 80a234e:	f000 fc37 	bl	80a2bc0 <_Z17_fetch_usbserial1v>
 80a2352:	6803      	ldr	r3, [r0, #0]
 80a2354:	691b      	ldr	r3, [r3, #16]
 80a2356:	4798      	blx	r3
 80a2358:	2800      	cmp	r0, #0
 80a235a:	dd01      	ble.n	80a2360 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a235c:	f3af 8000 	nop.w
}
 80a2360:	bd08      	pop	{r3, pc}
 80a2362:	bf00      	nop
	...

080a2374 <_post_loop>:
{
 80a2374:	b508      	push	{r3, lr}
	serialEventRun();
 80a2376:	f7ff ffcd 	bl	80a2314 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a237a:	f7ff fa01 	bl	80a1780 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a237e:	4b01      	ldr	r3, [pc, #4]	; (80a2384 <_post_loop+0x10>)
 80a2380:	6018      	str	r0, [r3, #0]
}
 80a2382:	bd08      	pop	{r3, pc}
 80a2384:	20000614 	.word	0x20000614

080a2388 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2388:	4805      	ldr	r0, [pc, #20]	; (80a23a0 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a238a:	4a06      	ldr	r2, [pc, #24]	; (80a23a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a238c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a238e:	1a12      	subs	r2, r2, r0
 80a2390:	4905      	ldr	r1, [pc, #20]	; (80a23a8 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2392:	f001 fff3 	bl	80a437c <memcpy>
    __backup_sram_signature = signature;
 80a2396:	4b05      	ldr	r3, [pc, #20]	; (80a23ac <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2398:	4a05      	ldr	r2, [pc, #20]	; (80a23b0 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a239a:	601a      	str	r2, [r3, #0]
}
 80a239c:	bd08      	pop	{r3, pc}
 80a239e:	bf00      	nop
 80a23a0:	40024000 	.word	0x40024000
 80a23a4:	40024004 	.word	0x40024004
 80a23a8:	080a48f8 	.word	0x080a48f8
 80a23ac:	40024000 	.word	0x40024000
 80a23b0:	9a271c1e 	.word	0x9a271c1e

080a23b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23b4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a23b6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23b8:	461a      	mov	r2, r3
 80a23ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23be:	9300      	str	r3, [sp, #0]
 80a23c0:	f7ff fb4c 	bl	80a1a5c <system_ctrl_set_result>
}
 80a23c4:	b003      	add	sp, #12
 80a23c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a23cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a23cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a23ce:	8843      	ldrh	r3, [r0, #2]
 80a23d0:	2b0a      	cmp	r3, #10
 80a23d2:	d008      	beq.n	80a23e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a23d4:	2b50      	cmp	r3, #80	; 0x50
 80a23d6:	d10b      	bne.n	80a23f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a23d8:	4b09      	ldr	r3, [pc, #36]	; (80a2400 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a23da:	681b      	ldr	r3, [r3, #0]
 80a23dc:	b14b      	cbz	r3, 80a23f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a23de:	b003      	add	sp, #12
 80a23e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a23e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a23e6:	f7ff ffe5 	bl	80a23b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a23ea:	b003      	add	sp, #12
 80a23ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23f0:	2300      	movs	r3, #0
 80a23f2:	461a      	mov	r2, r3
 80a23f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23f8:	9300      	str	r3, [sp, #0]
 80a23fa:	f7ff fb2f 	bl	80a1a5c <system_ctrl_set_result>
}
 80a23fe:	e7f4      	b.n	80a23ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2400:	200001ac 	.word	0x200001ac

080a2404 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2404:	2100      	movs	r1, #0
{
 80a2406:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2408:	4811      	ldr	r0, [pc, #68]	; (80a2450 <module_user_init_hook+0x4c>)
 80a240a:	f7ff fbe1 	bl	80a1bd0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a240e:	4b11      	ldr	r3, [pc, #68]	; (80a2454 <module_user_init_hook+0x50>)
 80a2410:	681a      	ldr	r2, [r3, #0]
 80a2412:	4b11      	ldr	r3, [pc, #68]	; (80a2458 <module_user_init_hook+0x54>)
 80a2414:	429a      	cmp	r2, r3
 80a2416:	bf0c      	ite	eq
 80a2418:	2201      	moveq	r2, #1
 80a241a:	2200      	movne	r2, #0
 80a241c:	4b0f      	ldr	r3, [pc, #60]	; (80a245c <module_user_init_hook+0x58>)
 80a241e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2420:	d001      	beq.n	80a2426 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2422:	f7ff ffb1 	bl	80a2388 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2426:	f7ff f99b 	bl	80a1760 <HAL_RNG_GetRandomNumber>
 80a242a:	4604      	mov	r4, r0
    srand(seed);
 80a242c:	f001 ffbc 	bl	80a43a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2430:	4b0b      	ldr	r3, [pc, #44]	; (80a2460 <module_user_init_hook+0x5c>)
 80a2432:	b113      	cbz	r3, 80a243a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2434:	4620      	mov	r0, r4
 80a2436:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a243a:	2100      	movs	r1, #0
 80a243c:	4808      	ldr	r0, [pc, #32]	; (80a2460 <module_user_init_hook+0x5c>)
 80a243e:	f7ff fb8f 	bl	80a1b60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2446:	2100      	movs	r1, #0
 80a2448:	4806      	ldr	r0, [pc, #24]	; (80a2464 <module_user_init_hook+0x60>)
 80a244a:	f7ff bafd 	b.w	80a1a48 <system_ctrl_set_app_request_handler>
 80a244e:	bf00      	nop
 80a2450:	080a2309 	.word	0x080a2309
 80a2454:	40024000 	.word	0x40024000
 80a2458:	9a271c1e 	.word	0x9a271c1e
 80a245c:	200001a8 	.word	0x200001a8
 80a2460:	00000000 	.word	0x00000000
 80a2464:	080a23cd 	.word	0x080a23cd

080a2468 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2468:	4770      	bx	lr

080a246a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a246a:	2000      	movs	r0, #0
 80a246c:	4770      	bx	lr

080a246e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a246e:	b510      	push	{r4, lr}
 80a2470:	4604      	mov	r4, r0
 80a2472:	2110      	movs	r1, #16
 80a2474:	f000 fe52 	bl	80a311c <_ZdlPvj>
 80a2478:	4620      	mov	r0, r4
 80a247a:	bd10      	pop	{r4, pc}

080a247c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a247c:	b508      	push	{r3, lr}
      { delete this; }
 80a247e:	f7ff fff6 	bl	80a246e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2482:	bd08      	pop	{r3, pc}

080a2484 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2484:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2486:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a2488:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a248c:	6002      	str	r2, [r0, #0]
 80a248e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2490:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2492:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2494:	680c      	ldr	r4, [r1, #0]
 80a2496:	8085      	strh	r5, [r0, #4]
 80a2498:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a249a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a249c:	bd30      	pop	{r4, r5, pc}

080a249e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a249e:	b510      	push	{r4, lr}
 80a24a0:	4604      	mov	r4, r0
    free((void*)msg_);
 80a24a2:	6800      	ldr	r0, [r0, #0]
 80a24a4:	f7ff fb6c 	bl	80a1b80 <free>
}
 80a24a8:	4620      	mov	r0, r4
 80a24aa:	bd10      	pop	{r4, pc}

080a24ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a24ac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a24ae:	68c4      	ldr	r4, [r0, #12]
 80a24b0:	b1f4      	cbz	r4, 80a24f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a24b2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a24b4:	2b02      	cmp	r3, #2
 80a24b6:	d103      	bne.n	80a24c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a24b8:	f104 000c 	add.w	r0, r4, #12
 80a24bc:	f7ff ffef 	bl	80a249e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a24c0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a24c2:	b135      	cbz	r5, 80a24d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a24c4:	4628      	mov	r0, r5
 80a24c6:	f7ff fefe 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
 80a24ca:	2110      	movs	r1, #16
 80a24cc:	4628      	mov	r0, r5
 80a24ce:	f000 fe25 	bl	80a311c <_ZdlPvj>
 80a24d2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a24d4:	b135      	cbz	r5, 80a24e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a24d6:	4628      	mov	r0, r5
 80a24d8:	f7ff fef5 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
 80a24dc:	2110      	movs	r1, #16
 80a24de:	4628      	mov	r0, r5
 80a24e0:	f000 fe1c 	bl	80a311c <_ZdlPvj>
 80a24e4:	4620      	mov	r0, r4
 80a24e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a24ea:	2114      	movs	r1, #20
 80a24ec:	f000 be16 	b.w	80a311c <_ZdlPvj>
 80a24f0:	bd38      	pop	{r3, r4, r5, pc}

080a24f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a24f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a24f4:	460e      	mov	r6, r1
 80a24f6:	4604      	mov	r4, r0
 80a24f8:	f856 3b04 	ldr.w	r3, [r6], #4
 80a24fc:	460d      	mov	r5, r1
 80a24fe:	a801      	add	r0, sp, #4
 80a2500:	4631      	mov	r1, r6
 80a2502:	9300      	str	r3, [sp, #0]
 80a2504:	f7ff fec2 	bl	80a228c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2508:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a250a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a250c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a250e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2510:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a2512:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a2514:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2516:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a2518:	f7fd fe12 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a251c:	4630      	mov	r0, r6
 80a251e:	f7fd fe0f 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a2522:	4628      	mov	r0, r5
 80a2524:	2108      	movs	r1, #8
 80a2526:	f000 fdf9 	bl	80a311c <_ZdlPvj>
        return p;
    }
 80a252a:	4620      	mov	r0, r4
 80a252c:	b002      	add	sp, #8
 80a252e:	bd70      	pop	{r4, r5, r6, pc}

080a2530 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2530:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2532:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2534:	b90a      	cbnz	r2, 80a253a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2536:	f000 fdf5 	bl	80a3124 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a253a:	68c3      	ldr	r3, [r0, #12]
    }
 80a253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2540:	4718      	bx	r3

080a2542 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2542:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2544:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a2546:	f100 0110 	add.w	r1, r0, #16
 80a254a:	f7ff fff1 	bl	80a2530 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a254e:	bd08      	pop	{r3, pc}

080a2550 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a2550:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2552:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2554:	b90a      	cbnz	r2, 80a255a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2556:	f000 fde5 	bl	80a3124 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a255a:	68c3      	ldr	r3, [r0, #12]
    }
 80a255c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2560:	4718      	bx	r3

080a2562 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2562:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2564:	6800      	ldr	r0, [r0, #0]
 80a2566:	f100 0110 	add.w	r1, r0, #16
 80a256a:	f7ff fff1 	bl	80a2550 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a256e:	bd08      	pop	{r3, pc}

080a2570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2570:	b538      	push	{r3, r4, r5, lr}
 80a2572:	2300      	movs	r3, #0
 80a2574:	4604      	mov	r4, r0
 80a2576:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2578:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a257a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a257c:	f7fd fd8b 	bl	80a0096 <_Znwj>
 80a2580:	b128      	cbz	r0, 80a258e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a2582:	2301      	movs	r3, #1
 80a2584:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a2588:	4b02      	ldr	r3, [pc, #8]	; (80a2594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a258a:	60c5      	str	r5, [r0, #12]
 80a258c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a258e:	6020      	str	r0, [r4, #0]
	}
 80a2590:	4620      	mov	r0, r4
 80a2592:	bd38      	pop	{r3, r4, r5, pc}
 80a2594:	080a479c 	.word	0x080a479c

080a2598 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a2598:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a259a:	2300      	movs	r3, #0
 80a259c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a259e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a25a0:	4604      	mov	r4, r0
 80a25a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a25a4:	b12b      	cbz	r3, 80a25b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a25a6:	2202      	movs	r2, #2
 80a25a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a25aa:	68eb      	ldr	r3, [r5, #12]
 80a25ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a25ae:	68ab      	ldr	r3, [r5, #8]
 80a25b0:	60a3      	str	r3, [r4, #8]
    }
 80a25b2:	4620      	mov	r0, r4
 80a25b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a25b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a25b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25ba:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a25bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a25be:	4668      	mov	r0, sp
 80a25c0:	f7ff ff60 	bl	80a2484 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a25c4:	f04f 0302 	mov.w	r3, #2
 80a25c8:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a25cc:	2a00      	cmp	r2, #0
 80a25ce:	d103      	bne.n	80a25d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a25d0:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a25d4:	2900      	cmp	r1, #0
 80a25d6:	d1f7      	bne.n	80a25c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a25d8:	d125      	bne.n	80a2626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a25da:	f104 050c 	add.w	r5, r4, #12
 80a25de:	4669      	mov	r1, sp
 80a25e0:	4628      	mov	r0, r5
 80a25e2:	f7ff ff4f 	bl	80a2484 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a25e6:	2301      	movs	r3, #1
 80a25e8:	f3bf 8f5b 	dmb	ish
 80a25ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a25ee:	2000      	movs	r0, #0
 80a25f0:	f3bf 8f5b 	dmb	ish
 80a25f4:	f104 0308 	add.w	r3, r4, #8
 80a25f8:	e853 6f00 	ldrex	r6, [r3]
 80a25fc:	e843 0200 	strex	r2, r0, [r3]
 80a2600:	2a00      	cmp	r2, #0
 80a2602:	d1f9      	bne.n	80a25f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a2604:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2608:	b16e      	cbz	r6, 80a2626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a260a:	f7ff fa0d 	bl	80a1a28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a260e:	b178      	cbz	r0, 80a2630 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2610:	4629      	mov	r1, r5
 80a2612:	4630      	mov	r0, r6
 80a2614:	f7ff ff8c 	bl	80a2530 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a2618:	4630      	mov	r0, r6
 80a261a:	f7ff fe54 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a261e:	2110      	movs	r1, #16
 80a2620:	4630      	mov	r0, r6
 80a2622:	f000 fd7b 	bl	80a311c <_ZdlPvj>
        p_->setError(std::move(error));
 80a2626:	4668      	mov	r0, sp
 80a2628:	f7ff ff39 	bl	80a249e <_ZN8particle5ErrorD1Ev>
    }
 80a262c:	b009      	add	sp, #36	; 0x24
 80a262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2630:	4631      	mov	r1, r6
 80a2632:	a802      	add	r0, sp, #8
 80a2634:	f7ff ffb0 	bl	80a2598 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2638:	68e0      	ldr	r0, [r4, #12]
 80a263a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a263e:	b108      	cbz	r0, 80a2644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a2640:	f001 fed6 	bl	80a43f0 <strdup>
        type_(type) {
 80a2644:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2646:	2010      	movs	r0, #16
 80a2648:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a264c:	f7fd fd23 	bl	80a0096 <_Znwj>
 80a2650:	4605      	mov	r5, r0
 80a2652:	b1e8      	cbz	r0, 80a2690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a2654:	2700      	movs	r7, #0
 80a2656:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2658:	2018      	movs	r0, #24
 80a265a:	f7fd fd1c 	bl	80a0096 <_Znwj>
 80a265e:	4604      	mov	r4, r0
 80a2660:	b188      	cbz	r0, 80a2686 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a2662:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2664:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2666:	a802      	add	r0, sp, #8
 80a2668:	f7ff fe36 	bl	80a22d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a266c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a266e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2670:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2672:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2674:	9204      	str	r2, [sp, #16]
 80a2676:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2678:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a267a:	60e3      	str	r3, [r4, #12]
 80a267c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a2680:	9205      	str	r2, [sp, #20]
 80a2682:	f7ff feff 	bl	80a2484 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a2686:	4b08      	ldr	r3, [pc, #32]	; (80a26a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2688:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a268a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a268c:	4b07      	ldr	r3, [pc, #28]	; (80a26ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a268e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a2690:	a806      	add	r0, sp, #24
 80a2692:	f7ff ff04 	bl	80a249e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2696:	a802      	add	r0, sp, #8
 80a2698:	f7ff fe15 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a269c:	2200      	movs	r2, #0
 80a269e:	4629      	mov	r1, r5
 80a26a0:	4803      	ldr	r0, [pc, #12]	; (80a26b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a26a2:	f7ff f9c9 	bl	80a1a38 <application_thread_invoke>
 80a26a6:	e7b7      	b.n	80a2618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a26a8:	080a2543 	.word	0x080a2543
 80a26ac:	080a27d9 	.word	0x080a27d9
 80a26b0:	080a2cf5 	.word	0x080a2cf5

080a26b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a26b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a26b8:	b08a      	sub	sp, #40	; 0x28
 80a26ba:	4605      	mov	r5, r0
 80a26bc:	460c      	mov	r4, r1
 80a26be:	4617      	mov	r7, r2
 80a26c0:	4698      	mov	r8, r3
 80a26c2:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a26c6:	f7ff fa3b 	bl	80a1b40 <spark_cloud_flag_connected>
 80a26ca:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a26cc:	4682      	mov	sl, r0
 80a26ce:	bb38      	cbnz	r0, 80a2720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a26d0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a26d4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a26d6:	a905      	add	r1, sp, #20
 80a26d8:	4630      	mov	r0, r6
 80a26da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a26de:	f7ff fed1 	bl	80a2484 <_ZN8particle5ErrorC1EOS0_>
 80a26e2:	2014      	movs	r0, #20
 80a26e4:	f7fd fcd7 	bl	80a0096 <_Znwj>
 80a26e8:	4604      	mov	r4, r0
 80a26ea:	b148      	cbz	r0, 80a2700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a26ec:	2302      	movs	r3, #2
 80a26ee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a26f0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a26f2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a26f6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a26f8:	4631      	mov	r1, r6
 80a26fa:	300c      	adds	r0, #12
 80a26fc:	f7ff fec2 	bl	80a2484 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2700:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a2702:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2704:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a2708:	f7ff ff32 	bl	80a2570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a270c:	4630      	mov	r0, r6
 80a270e:	f7ff fec6 	bl	80a249e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2712:	a805      	add	r0, sp, #20
 80a2714:	f7ff fec3 	bl	80a249e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a2718:	4628      	mov	r0, r5
 80a271a:	b00a      	add	sp, #40	; 0x28
 80a271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2720:	230c      	movs	r3, #12
 80a2722:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2726:	2014      	movs	r0, #20
 80a2728:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a272c:	9307      	str	r3, [sp, #28]
 80a272e:	f7fd fcb2 	bl	80a0096 <_Znwj>
 80a2732:	4601      	mov	r1, r0
 80a2734:	b128      	cbz	r0, 80a2742 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2736:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a273a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a273e:	f880 a001 	strb.w	sl, [r0, #1]
 80a2742:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2744:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a2746:	f7ff ff13 	bl	80a2570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a274a:	4b22      	ldr	r3, [pc, #136]	; (80a27d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a274c:	2008      	movs	r0, #8
 80a274e:	9308      	str	r3, [sp, #32]
 80a2750:	f7fd fca1 	bl	80a0096 <_Znwj>
 80a2754:	4682      	mov	sl, r0
 80a2756:	b128      	cbz	r0, 80a2764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2758:	9b03      	ldr	r3, [sp, #12]
 80a275a:	a904      	add	r1, sp, #16
 80a275c:	f840 3b04 	str.w	r3, [r0], #4
 80a2760:	f7ff fd94 	bl	80a228c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2764:	4642      	mov	r2, r8
 80a2766:	4639      	mov	r1, r7
 80a2768:	4620      	mov	r0, r4
 80a276a:	9600      	str	r6, [sp, #0]
 80a276c:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a2770:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2774:	f7ff f9ec 	bl	80a1b50 <spark_send_event>
 80a2778:	b9b8      	cbnz	r0, 80a27aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a277a:	9b03      	ldr	r3, [sp, #12]
 80a277c:	785b      	ldrb	r3, [r3, #1]
 80a277e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2782:	b993      	cbnz	r3, 80a27aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a2784:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a2788:	a905      	add	r1, sp, #20
 80a278a:	a803      	add	r0, sp, #12
 80a278c:	9205      	str	r2, [sp, #20]
 80a278e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2792:	f7ff ff11 	bl	80a25b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2796:	a805      	add	r0, sp, #20
 80a2798:	f7ff fe81 	bl	80a249e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a279c:	a805      	add	r0, sp, #20
 80a279e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a27a0:	f7ff fea7 	bl	80a24f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a27a4:	a806      	add	r0, sp, #24
 80a27a6:	f7fd fccb 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a27aa:	9b03      	ldr	r3, [sp, #12]
 80a27ac:	a904      	add	r1, sp, #16
 80a27ae:	a806      	add	r0, sp, #24
 80a27b0:	9305      	str	r3, [sp, #20]
 80a27b2:	f7ff fd6b 	bl	80a228c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a27b6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a27b8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a27ba:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a27bc:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a27be:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a27c0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a27c2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a27c4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a27c6:	f7fd fcbb 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a27ca:	a804      	add	r0, sp, #16
 80a27cc:	f7fd fcb8 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a27d0:	e7a2      	b.n	80a2718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a27d2:	bf00      	nop
 80a27d4:	080a289d 	.word	0x080a289d

080a27d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a27d8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a27da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27dc:	4605      	mov	r5, r0
	  switch (__op)
 80a27de:	d007      	beq.n	80a27f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a27e0:	2a03      	cmp	r2, #3
 80a27e2:	d018      	beq.n	80a2816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a27e4:	2a01      	cmp	r2, #1
 80a27e6:	d101      	bne.n	80a27ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a27e8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a27ea:	6003      	str	r3, [r0, #0]
	}
 80a27ec:	2000      	movs	r0, #0
 80a27ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a27f0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a27f2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a27f4:	f7fd fc4f 	bl	80a0096 <_Znwj>
 80a27f8:	4604      	mov	r4, r0
 80a27fa:	b150      	cbz	r0, 80a2812 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a27fc:	4631      	mov	r1, r6
 80a27fe:	f7ff fecb 	bl	80a2598 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2802:	6930      	ldr	r0, [r6, #16]
 80a2804:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2808:	b108      	cbz	r0, 80a280e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a280a:	f001 fdf1 	bl	80a43f0 <strdup>
        type_(type) {
 80a280e:	6120      	str	r0, [r4, #16]
 80a2810:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a2812:	602c      	str	r4, [r5, #0]
	}
 80a2814:	e7ea      	b.n	80a27ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a2816:	6804      	ldr	r4, [r0, #0]
 80a2818:	2c00      	cmp	r4, #0
 80a281a:	d0e7      	beq.n	80a27ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a281c:	f104 0010 	add.w	r0, r4, #16
 80a2820:	f7ff fe3d 	bl	80a249e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2824:	4620      	mov	r0, r4
 80a2826:	f7ff fd4e 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a282a:	2118      	movs	r1, #24
 80a282c:	4620      	mov	r0, r4
 80a282e:	f000 fc75 	bl	80a311c <_ZdlPvj>
 80a2832:	e7db      	b.n	80a27ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a2834 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a2834:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2836:	2300      	movs	r3, #0
 80a2838:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a283a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a283c:	4604      	mov	r4, r0
 80a283e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2840:	b12b      	cbz	r3, 80a284e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2842:	2202      	movs	r2, #2
 80a2844:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2846:	68eb      	ldr	r3, [r5, #12]
 80a2848:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a284a:	68ab      	ldr	r3, [r5, #8]
 80a284c:	60a3      	str	r3, [r4, #8]
    }
 80a284e:	4620      	mov	r0, r4
 80a2850:	bd38      	pop	{r3, r4, r5, pc}

080a2852 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a2852:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2854:	b570      	push	{r4, r5, r6, lr}
 80a2856:	4604      	mov	r4, r0
	  switch (__op)
 80a2858:	d007      	beq.n	80a286a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a285a:	2a03      	cmp	r2, #3
 80a285c:	d012      	beq.n	80a2884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a285e:	2a01      	cmp	r2, #1
 80a2860:	d101      	bne.n	80a2866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a2862:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2864:	6003      	str	r3, [r0, #0]
	}
 80a2866:	2000      	movs	r0, #0
 80a2868:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a286a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a286c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a286e:	f7fd fc12 	bl	80a0096 <_Znwj>
 80a2872:	4605      	mov	r5, r0
 80a2874:	b120      	cbz	r0, 80a2880 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a2876:	4631      	mov	r1, r6
 80a2878:	f7ff ffdc 	bl	80a2834 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a287c:	7c33      	ldrb	r3, [r6, #16]
 80a287e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a2880:	6025      	str	r5, [r4, #0]
	}
 80a2882:	e7f0      	b.n	80a2866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a2884:	6804      	ldr	r4, [r0, #0]
 80a2886:	2c00      	cmp	r4, #0
 80a2888:	d0ed      	beq.n	80a2866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a288a:	4620      	mov	r0, r4
 80a288c:	f7ff fd1b 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a2890:	2114      	movs	r1, #20
 80a2892:	4620      	mov	r0, r4
 80a2894:	f000 fc42 	bl	80a311c <_ZdlPvj>
 80a2898:	e7e5      	b.n	80a2866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a289c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a289c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a289e:	4604      	mov	r4, r0
 80a28a0:	b089      	sub	sp, #36	; 0x24
 80a28a2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a28a4:	a801      	add	r0, sp, #4
 80a28a6:	4611      	mov	r1, r2
 80a28a8:	f7ff fe23 	bl	80a24f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a28ac:	b1a4      	cbz	r4, 80a28d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a28ae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a28b0:	b11d      	cbz	r5, 80a28ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a28b2:	4628      	mov	r0, r5
 80a28b4:	f001 fd9c 	bl	80a43f0 <strdup>
 80a28b8:	4605      	mov	r5, r0
 80a28ba:	a801      	add	r0, sp, #4
 80a28bc:	a903      	add	r1, sp, #12
        type_(type) {
 80a28be:	9503      	str	r5, [sp, #12]
 80a28c0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a28c4:	f7ff fe78 	bl	80a25b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a28c8:	a803      	add	r0, sp, #12
 80a28ca:	f7ff fde8 	bl	80a249e <_ZN8particle5ErrorD1Ev>
 80a28ce:	a802      	add	r0, sp, #8
 80a28d0:	f7fd fc36 	bl	80a0140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a28d4:	b009      	add	sp, #36	; 0x24
 80a28d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a28d8:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a28da:	9d01      	ldr	r5, [sp, #4]
 80a28dc:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a28e0:	2a00      	cmp	r2, #0
 80a28e2:	d103      	bne.n	80a28ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a28e4:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a28e8:	2900      	cmp	r1, #0
 80a28ea:	d1f7      	bne.n	80a28dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a28ec:	d1ef      	bne.n	80a28ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a28ee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a28f0:	f3bf 8f5b 	dmb	ish
 80a28f4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a28f6:	f3bf 8f5b 	dmb	ish
 80a28fa:	1d2b      	adds	r3, r5, #4
 80a28fc:	e853 6f00 	ldrex	r6, [r3]
 80a2900:	e843 4200 	strex	r2, r4, [r3]
 80a2904:	2a00      	cmp	r2, #0
 80a2906:	d1f9      	bne.n	80a28fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a2908:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a290c:	2e00      	cmp	r6, #0
 80a290e:	d0de      	beq.n	80a28ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a2910:	4620      	mov	r0, r4
 80a2912:	f7ff f889 	bl	80a1a28 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2916:	4607      	mov	r7, r0
 80a2918:	b160      	cbz	r0, 80a2934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a291a:	4630      	mov	r0, r6
 80a291c:	f105 010c 	add.w	r1, r5, #12
 80a2920:	f7ff fe16 	bl	80a2550 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a2924:	4630      	mov	r0, r6
 80a2926:	f7ff fcce 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a292a:	2110      	movs	r1, #16
 80a292c:	4630      	mov	r0, r6
 80a292e:	f000 fbf5 	bl	80a311c <_ZdlPvj>
 80a2932:	e7cc      	b.n	80a28ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2934:	4631      	mov	r1, r6
 80a2936:	a803      	add	r0, sp, #12
 80a2938:	f7ff ff7c 	bl	80a2834 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a293c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a293e:	2010      	movs	r0, #16
 80a2940:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2944:	f7fd fba7 	bl	80a0096 <_Znwj>
 80a2948:	4605      	mov	r5, r0
 80a294a:	b1d0      	cbz	r0, 80a2982 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a294c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a294e:	2014      	movs	r0, #20
 80a2950:	f7fd fba1 	bl	80a0096 <_Znwj>
 80a2954:	4604      	mov	r4, r0
 80a2956:	b178      	cbz	r0, 80a2978 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a2958:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a295a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a295c:	a803      	add	r0, sp, #12
 80a295e:	f7ff fcbb 	bl	80a22d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2962:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2964:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2966:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2968:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a296a:	9205      	str	r2, [sp, #20]
 80a296c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a296e:	60e3      	str	r3, [r4, #12]
 80a2970:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2974:	9206      	str	r2, [sp, #24]
 80a2976:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2978:	4b06      	ldr	r3, [pc, #24]	; (80a2994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a297a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a297c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a297e:	4b06      	ldr	r3, [pc, #24]	; (80a2998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a2980:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a2982:	a803      	add	r0, sp, #12
 80a2984:	f7ff fc9f 	bl	80a22c6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2988:	2200      	movs	r2, #0
 80a298a:	4629      	mov	r1, r5
 80a298c:	4803      	ldr	r0, [pc, #12]	; (80a299c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a298e:	f7ff f853 	bl	80a1a38 <application_thread_invoke>
 80a2992:	e7c7      	b.n	80a2924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a2994:	080a2563 	.word	0x080a2563
 80a2998:	080a2853 	.word	0x080a2853
 80a299c:	080a2cf5 	.word	0x080a2cf5

080a29a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a29a0:	4770      	bx	lr

080a29a2 <_ZN9IPAddressD0Ev>:
 80a29a2:	b510      	push	{r4, lr}
 80a29a4:	4604      	mov	r4, r0
 80a29a6:	2118      	movs	r1, #24
 80a29a8:	f000 fbb8 	bl	80a311c <_ZdlPvj>
 80a29ac:	4620      	mov	r0, r4
 80a29ae:	bd10      	pop	{r4, pc}

080a29b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a29b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29b2:	460e      	mov	r6, r1
 80a29b4:	2400      	movs	r4, #0
 80a29b6:	f100 0708 	add.w	r7, r0, #8
 80a29ba:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a29bc:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a29c0:	220a      	movs	r2, #10
 80a29c2:	4630      	mov	r0, r6
 80a29c4:	f7ff fb23 	bl	80a200e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a29c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a29ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a29cc:	d101      	bne.n	80a29d2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a29ce:	4620      	mov	r0, r4
 80a29d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a29d2:	2c00      	cmp	r4, #0
 80a29d4:	d0f2      	beq.n	80a29bc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a29d6:	212e      	movs	r1, #46	; 0x2e
 80a29d8:	4630      	mov	r0, r6
 80a29da:	f7ff faff 	bl	80a1fdc <_ZN5Print5printEc>
 80a29de:	4404      	add	r4, r0
 80a29e0:	e7ec      	b.n	80a29bc <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a29e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a29e4:	b510      	push	{r4, lr}
 80a29e6:	4604      	mov	r4, r0
 80a29e8:	4b04      	ldr	r3, [pc, #16]	; (80a29fc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a29ea:	2211      	movs	r2, #17
 80a29ec:	2100      	movs	r1, #0
 80a29ee:	f840 3b04 	str.w	r3, [r0], #4
 80a29f2:	f001 fcd1 	bl	80a4398 <memset>
}
 80a29f6:	4620      	mov	r0, r4
 80a29f8:	bd10      	pop	{r4, pc}
 80a29fa:	bf00      	nop
 80a29fc:	080a47b8 	.word	0x080a47b8

080a2a00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2a00:	4603      	mov	r3, r0
 80a2a02:	4a07      	ldr	r2, [pc, #28]	; (80a2a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2a04:	b510      	push	{r4, lr}
 80a2a06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a2a0a:	f101 0210 	add.w	r2, r1, #16
 80a2a0e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2a12:	4291      	cmp	r1, r2
 80a2a14:	f843 4b04 	str.w	r4, [r3], #4
 80a2a18:	d1f9      	bne.n	80a2a0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2a1a:	780a      	ldrb	r2, [r1, #0]
 80a2a1c:	701a      	strb	r2, [r3, #0]
}
 80a2a1e:	bd10      	pop	{r4, pc}
 80a2a20:	080a47b8 	.word	0x080a47b8

080a2a24 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a2a24:	4a02      	ldr	r2, [pc, #8]	; (80a2a30 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a2a26:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2a2a:	2204      	movs	r2, #4
 80a2a2c:	7502      	strb	r2, [r0, #20]
}
 80a2a2e:	4770      	bx	lr
 80a2a30:	080a47b8 	.word	0x080a47b8

080a2a34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2a34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2a36:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2a3a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2a3e:	2304      	movs	r3, #4
 80a2a40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2a44:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2a48:	6044      	str	r4, [r0, #4]
 80a2a4a:	7503      	strb	r3, [r0, #20]
}
 80a2a4c:	bd10      	pop	{r4, pc}
	...

080a2a50 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2a52:	4d04      	ldr	r5, [pc, #16]	; (80a2a64 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2a54:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2a56:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2a5a:	9500      	str	r5, [sp, #0]
 80a2a5c:	f7ff ffea 	bl	80a2a34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2a60:	b003      	add	sp, #12
 80a2a62:	bd30      	pop	{r4, r5, pc}
 80a2a64:	080a47b8 	.word	0x080a47b8

080a2a68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a68:	7441      	strb	r1, [r0, #17]
}
 80a2a6a:	4770      	bx	lr

080a2a6c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2a6c:	4770      	bx	lr

080a2a6e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2a6e:	4770      	bx	lr

080a2a70 <_ZN9USBSerial4readEv>:
{
 80a2a70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2a72:	2100      	movs	r1, #0
 80a2a74:	7c00      	ldrb	r0, [r0, #16]
 80a2a76:	f7fe ff9f 	bl	80a19b8 <HAL_USB_USART_Receive_Data>
}
 80a2a7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2a7e:	bd08      	pop	{r3, pc}

080a2a80 <_ZN9USBSerial4peekEv>:
{
 80a2a80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2a82:	2101      	movs	r1, #1
 80a2a84:	7c00      	ldrb	r0, [r0, #16]
 80a2a86:	f7fe ff97 	bl	80a19b8 <HAL_USB_USART_Receive_Data>
}
 80a2a8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2a8e:	bd08      	pop	{r3, pc}

080a2a90 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2a90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2a92:	7c00      	ldrb	r0, [r0, #16]
 80a2a94:	f7fe ff88 	bl	80a19a8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2a98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a9c:	bd08      	pop	{r3, pc}

080a2a9e <_ZN9USBSerial9availableEv>:
{
 80a2a9e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2aa0:	7c00      	ldrb	r0, [r0, #16]
 80a2aa2:	f7fe ff79 	bl	80a1998 <HAL_USB_USART_Available_Data>
}
 80a2aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2aaa:	bd08      	pop	{r3, pc}

080a2aac <_ZN9USBSerial5writeEh>:
{
 80a2aac:	b538      	push	{r3, r4, r5, lr}
 80a2aae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2ab0:	7c00      	ldrb	r0, [r0, #16]
{
 80a2ab2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2ab4:	f7fe ff78 	bl	80a19a8 <HAL_USB_USART_Available_Data_For_Write>
 80a2ab8:	2800      	cmp	r0, #0
 80a2aba:	dc01      	bgt.n	80a2ac0 <_ZN9USBSerial5writeEh+0x14>
 80a2abc:	7c60      	ldrb	r0, [r4, #17]
 80a2abe:	b128      	cbz	r0, 80a2acc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2ac0:	4629      	mov	r1, r5
 80a2ac2:	7c20      	ldrb	r0, [r4, #16]
 80a2ac4:	f7fe ff80 	bl	80a19c8 <HAL_USB_USART_Send_Data>
 80a2ac8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2acc:	bd38      	pop	{r3, r4, r5, pc}

080a2ace <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2ace:	7c00      	ldrb	r0, [r0, #16]
 80a2ad0:	f7fe bf82 	b.w	80a19d8 <HAL_USB_USART_Flush_Data>

080a2ad4 <_ZN9USBSerialD0Ev>:
 80a2ad4:	b510      	push	{r4, lr}
 80a2ad6:	4604      	mov	r4, r0
 80a2ad8:	2114      	movs	r1, #20
 80a2ada:	f000 fb1f 	bl	80a311c <_ZdlPvj>
 80a2ade:	4620      	mov	r0, r4
 80a2ae0:	bd10      	pop	{r4, pc}

080a2ae2 <__tcf_1>:
 80a2ae2:	4770      	bx	lr

080a2ae4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2ae4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2aea:	4604      	mov	r4, r0
 80a2aec:	4608      	mov	r0, r1
 80a2aee:	2100      	movs	r1, #0
 80a2af0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2af4:	4b04      	ldr	r3, [pc, #16]	; (80a2b08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2af6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2af8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2afa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2afc:	4611      	mov	r1, r2
  _blocking = true;
 80a2afe:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2b00:	f7fe ff3a 	bl	80a1978 <HAL_USB_USART_Init>
}
 80a2b04:	4620      	mov	r0, r4
 80a2b06:	bd10      	pop	{r4, pc}
 80a2b08:	080a47cc 	.word	0x080a47cc

080a2b0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2b0c:	2200      	movs	r2, #0
 80a2b0e:	7c00      	ldrb	r0, [r0, #16]
 80a2b10:	f7fe bf3a 	b.w	80a1988 <HAL_USB_USART_Begin>

080a2b14 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2b14:	7c00      	ldrb	r0, [r0, #16]
 80a2b16:	f7fe bf67 	b.w	80a19e8 <HAL_USB_USART_Is_Enabled>

080a2b1a <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a2b1a:	f7ff bffb 	b.w	80a2b14 <_ZN9USBSerial9isEnabledEv>
	...

080a2b20 <_Z19acquireSerialBufferv>:
{
 80a2b20:	b510      	push	{r4, lr}
 80a2b22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2b24:	2214      	movs	r2, #20
 80a2b26:	2100      	movs	r1, #0
 80a2b28:	f001 fc36 	bl	80a4398 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2b2c:	4b05      	ldr	r3, [pc, #20]	; (80a2b44 <_Z19acquireSerialBufferv+0x24>)
}
 80a2b2e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2b30:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2b32:	4b05      	ldr	r3, [pc, #20]	; (80a2b48 <_Z19acquireSerialBufferv+0x28>)
 80a2b34:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2b36:	f240 1301 	movw	r3, #257	; 0x101
 80a2b3a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2b3c:	2381      	movs	r3, #129	; 0x81
 80a2b3e:	8223      	strh	r3, [r4, #16]
}
 80a2b40:	bd10      	pop	{r4, pc}
 80a2b42:	bf00      	nop
 80a2b44:	200001e0 	.word	0x200001e0
 80a2b48:	200002e1 	.word	0x200002e1

080a2b4c <_Z16_fetch_usbserialv>:
{
 80a2b4c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b4e:	4d0e      	ldr	r5, [pc, #56]	; (80a2b88 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2b50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2b52:	a801      	add	r0, sp, #4
 80a2b54:	f7ff ffe4 	bl	80a2b20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b58:	7829      	ldrb	r1, [r5, #0]
 80a2b5a:	f3bf 8f5b 	dmb	ish
 80a2b5e:	f011 0401 	ands.w	r4, r1, #1
 80a2b62:	d10e      	bne.n	80a2b82 <_Z16_fetch_usbserialv+0x36>
 80a2b64:	4628      	mov	r0, r5
 80a2b66:	f7fd fa9c 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b6a:	b150      	cbz	r0, 80a2b82 <_Z16_fetch_usbserialv+0x36>
 80a2b6c:	4621      	mov	r1, r4
 80a2b6e:	aa01      	add	r2, sp, #4
 80a2b70:	4806      	ldr	r0, [pc, #24]	; (80a2b8c <_Z16_fetch_usbserialv+0x40>)
 80a2b72:	f7ff ffb7 	bl	80a2ae4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b76:	4628      	mov	r0, r5
 80a2b78:	f7fd fa98 	bl	80a00ac <__cxa_guard_release>
 80a2b7c:	4804      	ldr	r0, [pc, #16]	; (80a2b90 <_Z16_fetch_usbserialv+0x44>)
 80a2b7e:	f001 fbf7 	bl	80a4370 <atexit>
	return _usbserial;
}
 80a2b82:	4802      	ldr	r0, [pc, #8]	; (80a2b8c <_Z16_fetch_usbserialv+0x40>)
 80a2b84:	b007      	add	sp, #28
 80a2b86:	bd30      	pop	{r4, r5, pc}
 80a2b88:	200001b0 	.word	0x200001b0
 80a2b8c:	200001b8 	.word	0x200001b8
 80a2b90:	080a2a6d 	.word	0x080a2a6d

080a2b94 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2b94:	b510      	push	{r4, lr}
 80a2b96:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2b98:	2214      	movs	r2, #20
 80a2b9a:	2100      	movs	r1, #0
 80a2b9c:	f001 fbfc 	bl	80a4398 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2ba0:	4b05      	ldr	r3, [pc, #20]	; (80a2bb8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2ba2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2ba4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2ba6:	4b05      	ldr	r3, [pc, #20]	; (80a2bbc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2ba8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2baa:	f240 1301 	movw	r3, #257	; 0x101
 80a2bae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2bb0:	2381      	movs	r3, #129	; 0x81
 80a2bb2:	8223      	strh	r3, [r4, #16]
}
 80a2bb4:	bd10      	pop	{r4, pc}
 80a2bb6:	bf00      	nop
 80a2bb8:	20000362 	.word	0x20000362
 80a2bbc:	20000463 	.word	0x20000463

080a2bc0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2bc0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2bc2:	4c0e      	ldr	r4, [pc, #56]	; (80a2bfc <_Z17_fetch_usbserial1v+0x3c>)
{
 80a2bc4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2bc6:	a801      	add	r0, sp, #4
 80a2bc8:	f7ff ffe4 	bl	80a2b94 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2bcc:	7823      	ldrb	r3, [r4, #0]
 80a2bce:	f3bf 8f5b 	dmb	ish
 80a2bd2:	07db      	lsls	r3, r3, #31
 80a2bd4:	d40e      	bmi.n	80a2bf4 <_Z17_fetch_usbserial1v+0x34>
 80a2bd6:	4620      	mov	r0, r4
 80a2bd8:	f7fd fa63 	bl	80a00a2 <__cxa_guard_acquire>
 80a2bdc:	b150      	cbz	r0, 80a2bf4 <_Z17_fetch_usbserial1v+0x34>
 80a2bde:	2101      	movs	r1, #1
 80a2be0:	aa01      	add	r2, sp, #4
 80a2be2:	4807      	ldr	r0, [pc, #28]	; (80a2c00 <_Z17_fetch_usbserial1v+0x40>)
 80a2be4:	f7ff ff7e 	bl	80a2ae4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2be8:	4620      	mov	r0, r4
 80a2bea:	f7fd fa5f 	bl	80a00ac <__cxa_guard_release>
 80a2bee:	4805      	ldr	r0, [pc, #20]	; (80a2c04 <_Z17_fetch_usbserial1v+0x44>)
 80a2bf0:	f001 fbbe 	bl	80a4370 <atexit>
  return _usbserial1;
}
 80a2bf4:	4802      	ldr	r0, [pc, #8]	; (80a2c00 <_Z17_fetch_usbserial1v+0x40>)
 80a2bf6:	b006      	add	sp, #24
 80a2bf8:	bd10      	pop	{r4, pc}
 80a2bfa:	bf00      	nop
 80a2bfc:	200001b4 	.word	0x200001b4
 80a2c00:	200001cc 	.word	0x200001cc
 80a2c04:	080a2ae3 	.word	0x080a2ae3

080a2c08 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2c08:	4770      	bx	lr

080a2c0a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2c0a:	7441      	strb	r1, [r0, #17]
}
 80a2c0c:	4770      	bx	lr

080a2c0e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2c0e:	4770      	bx	lr

080a2c10 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a2c10:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2c12:	7c00      	ldrb	r0, [r0, #16]
 80a2c14:	f7fe fe14 	bl	80a1840 <hal_usart_available_data_for_write>
}
 80a2c18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c1c:	bd08      	pop	{r3, pc}

080a2c1e <_ZN11USARTSerial9availableEv>:
{
 80a2c1e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2c20:	7c00      	ldrb	r0, [r0, #16]
 80a2c22:	f7fe fde5 	bl	80a17f0 <hal_usart_available>
}
 80a2c26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c2a:	bd08      	pop	{r3, pc}

080a2c2c <_ZN11USARTSerial4peekEv>:
{
 80a2c2c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2c2e:	7c00      	ldrb	r0, [r0, #16]
 80a2c30:	f7fe fdee 	bl	80a1810 <hal_usart_peek>
}
 80a2c34:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c38:	bd08      	pop	{r3, pc}

080a2c3a <_ZN11USARTSerial4readEv>:
{
 80a2c3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2c3c:	7c00      	ldrb	r0, [r0, #16]
 80a2c3e:	f7fe fddf 	bl	80a1800 <hal_usart_read>
}
 80a2c42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c46:	bd08      	pop	{r3, pc}

080a2c48 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a2c48:	7c00      	ldrb	r0, [r0, #16]
 80a2c4a:	f7fe bde9 	b.w	80a1820 <hal_usart_flush>

080a2c4e <_ZN11USARTSerial5writeEh>:
{
 80a2c4e:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c50:	7c46      	ldrb	r6, [r0, #17]
{
 80a2c52:	4604      	mov	r4, r0
 80a2c54:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c56:	b12e      	cbz	r6, 80a2c64 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a2c58:	4629      	mov	r1, r5
 80a2c5a:	7c20      	ldrb	r0, [r4, #16]
}
 80a2c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2c60:	f7fe bdbe 	b.w	80a17e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c64:	7c00      	ldrb	r0, [r0, #16]
 80a2c66:	f7fe fdeb 	bl	80a1840 <hal_usart_available_data_for_write>
 80a2c6a:	2800      	cmp	r0, #0
 80a2c6c:	dcf4      	bgt.n	80a2c58 <_ZN11USARTSerial5writeEh+0xa>
}
 80a2c6e:	4630      	mov	r0, r6
 80a2c70:	bd70      	pop	{r4, r5, r6, pc}

080a2c72 <_ZN11USARTSerialD0Ev>:
 80a2c72:	b510      	push	{r4, lr}
 80a2c74:	4604      	mov	r4, r0
 80a2c76:	2114      	movs	r1, #20
 80a2c78:	f000 fa50 	bl	80a311c <_ZdlPvj>
 80a2c7c:	4620      	mov	r0, r4
 80a2c7e:	bd10      	pop	{r4, pc}

080a2c80 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2c80:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2c84:	b510      	push	{r4, lr}
 80a2c86:	4604      	mov	r4, r0
 80a2c88:	4608      	mov	r0, r1
 80a2c8a:	4611      	mov	r1, r2
 80a2c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2c90:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2c94:	4a04      	ldr	r2, [pc, #16]	; (80a2ca8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2c96:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2c98:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a2c9a:	2201      	movs	r2, #1
 80a2c9c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2c9e:	461a      	mov	r2, r3
 80a2ca0:	f7fe fd96 	bl	80a17d0 <hal_usart_init>
}
 80a2ca4:	4620      	mov	r0, r4
 80a2ca6:	bd10      	pop	{r4, pc}
 80a2ca8:	080a47fc 	.word	0x080a47fc

080a2cac <_Z22__fetch_global_Serial1v>:
{
 80a2cac:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2cae:	4d0c      	ldr	r5, [pc, #48]	; (80a2ce0 <_Z22__fetch_global_Serial1v+0x34>)
 80a2cb0:	7829      	ldrb	r1, [r5, #0]
 80a2cb2:	f3bf 8f5b 	dmb	ish
 80a2cb6:	f011 0401 	ands.w	r4, r1, #1
 80a2cba:	d10f      	bne.n	80a2cdc <_Z22__fetch_global_Serial1v+0x30>
 80a2cbc:	4628      	mov	r0, r5
 80a2cbe:	f7fd f9f0 	bl	80a00a2 <__cxa_guard_acquire>
 80a2cc2:	b158      	cbz	r0, 80a2cdc <_Z22__fetch_global_Serial1v+0x30>
 80a2cc4:	4621      	mov	r1, r4
 80a2cc6:	4b07      	ldr	r3, [pc, #28]	; (80a2ce4 <_Z22__fetch_global_Serial1v+0x38>)
 80a2cc8:	4a07      	ldr	r2, [pc, #28]	; (80a2ce8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2cca:	4808      	ldr	r0, [pc, #32]	; (80a2cec <_Z22__fetch_global_Serial1v+0x40>)
 80a2ccc:	f7ff ffd8 	bl	80a2c80 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2cd0:	4628      	mov	r0, r5
 80a2cd2:	f7fd f9eb 	bl	80a00ac <__cxa_guard_release>
 80a2cd6:	4806      	ldr	r0, [pc, #24]	; (80a2cf0 <_Z22__fetch_global_Serial1v+0x44>)
 80a2cd8:	f001 fb4a 	bl	80a4370 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2cdc:	4803      	ldr	r0, [pc, #12]	; (80a2cec <_Z22__fetch_global_Serial1v+0x40>)
 80a2cde:	bd38      	pop	{r3, r4, r5, pc}
 80a2ce0:	200004e4 	.word	0x200004e4
 80a2ce4:	2000056c 	.word	0x2000056c
 80a2ce8:	200004e8 	.word	0x200004e8
 80a2cec:	200005f0 	.word	0x200005f0
 80a2cf0:	080a2c0f 	.word	0x080a2c0f

080a2cf4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2cf4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2cf6:	6883      	ldr	r3, [r0, #8]
 80a2cf8:	4604      	mov	r4, r0
 80a2cfa:	b90b      	cbnz	r3, 80a2d00 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2cfc:	f000 fa12 	bl	80a3124 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2d00:	68c3      	ldr	r3, [r0, #12]
 80a2d02:	4798      	blx	r3
      if (_M_manager)
 80a2d04:	68a3      	ldr	r3, [r4, #8]
 80a2d06:	b11b      	cbz	r3, 80a2d10 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2d08:	2203      	movs	r2, #3
 80a2d0a:	4621      	mov	r1, r4
 80a2d0c:	4620      	mov	r0, r4
 80a2d0e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2d10:	4620      	mov	r0, r4
}
 80a2d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a2d16:	2110      	movs	r1, #16
 80a2d18:	f000 ba00 	b.w	80a311c <_ZdlPvj>

080a2d1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2d1c:	4770      	bx	lr

080a2d1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d20:	4606      	mov	r6, r0
 80a2d22:	4615      	mov	r5, r2
 80a2d24:	460c      	mov	r4, r1
 80a2d26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2d28:	42bc      	cmp	r4, r7
 80a2d2a:	d006      	beq.n	80a2d3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2d2c:	6833      	ldr	r3, [r6, #0]
 80a2d2e:	4630      	mov	r0, r6
 80a2d30:	689b      	ldr	r3, [r3, #8]
 80a2d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2d36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2d38:	e7f6      	b.n	80a2d28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2d3a:	4628      	mov	r0, r5
 80a2d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2d3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2d3e:	2200      	movs	r2, #0
 80a2d40:	7c00      	ldrb	r0, [r0, #16]
 80a2d42:	f7fe bd9d 	b.w	80a1880 <hal_i2c_write>

080a2d46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2d46:	2100      	movs	r1, #0
 80a2d48:	7c00      	ldrb	r0, [r0, #16]
 80a2d4a:	f7fe bda1 	b.w	80a1890 <hal_i2c_available>

080a2d4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2d4e:	2100      	movs	r1, #0
 80a2d50:	7c00      	ldrb	r0, [r0, #16]
 80a2d52:	f7fe bda5 	b.w	80a18a0 <hal_i2c_read>

080a2d56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2d56:	2100      	movs	r1, #0
 80a2d58:	7c00      	ldrb	r0, [r0, #16]
 80a2d5a:	f7fe bda9 	b.w	80a18b0 <hal_i2c_peek>

080a2d5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a2d5e:	2100      	movs	r1, #0
 80a2d60:	7c00      	ldrb	r0, [r0, #16]
 80a2d62:	f7fe bdad 	b.w	80a18c0 <hal_i2c_flush>

080a2d66 <_ZN7TwoWireD0Ev>:
 80a2d66:	b510      	push	{r4, lr}
 80a2d68:	4604      	mov	r4, r0
 80a2d6a:	2114      	movs	r1, #20
 80a2d6c:	f000 f9d6 	bl	80a311c <_ZdlPvj>
 80a2d70:	4620      	mov	r0, r4
 80a2d72:	bd10      	pop	{r4, pc}

080a2d74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2d74:	b510      	push	{r4, lr}
 80a2d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2d7a:	4604      	mov	r4, r0
 80a2d7c:	4608      	mov	r0, r1
 80a2d7e:	2100      	movs	r1, #0
 80a2d80:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2d84:	4b03      	ldr	r3, [pc, #12]	; (80a2d94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2d86:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2d88:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2d8a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2d8c:	f7fe fda8 	bl	80a18e0 <hal_i2c_init>
}
 80a2d90:	4620      	mov	r0, r4
 80a2d92:	bd10      	pop	{r4, pc}
 80a2d94:	080a482c 	.word	0x080a482c

080a2d98 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2d98:	2300      	movs	r3, #0
 80a2d9a:	7c00      	ldrb	r0, [r0, #16]
 80a2d9c:	461a      	mov	r2, r3
 80a2d9e:	4619      	mov	r1, r3
 80a2da0:	f7fe bd56 	b.w	80a1850 <hal_i2c_begin>

080a2da4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a2da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a2da6:	2200      	movs	r2, #0
 80a2da8:	2314      	movs	r3, #20
 80a2daa:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a2dae:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a2db2:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a2db4:	7c00      	ldrb	r0, [r0, #16]
 80a2db6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2dba:	684b      	ldr	r3, [r1, #4]
 80a2dbc:	9303      	str	r3, [sp, #12]
 80a2dbe:	68cb      	ldr	r3, [r1, #12]
 80a2dc0:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a2dc2:	7a0b      	ldrb	r3, [r1, #8]
 80a2dc4:	a901      	add	r1, sp, #4
 80a2dc6:	9305      	str	r3, [sp, #20]
 80a2dc8:	f7fe fd94 	bl	80a18f4 <hal_i2c_request_ex>
}
 80a2dcc:	b007      	add	sp, #28
 80a2dce:	f85d fb04 	ldr.w	pc, [sp], #4

080a2dd2 <_ZN7TwoWire11requestFromEhjh>:
{
 80a2dd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a2dd4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a2dd6:	f88d 1000 	strb.w	r1, [sp]
 80a2dda:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a2dde:	bf18      	it	ne
 80a2de0:	2301      	movne	r3, #1
 80a2de2:	9103      	str	r1, [sp, #12]
 80a2de4:	4669      	mov	r1, sp
    size_ = size;
 80a2de6:	9201      	str	r2, [sp, #4]
 80a2de8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2dec:	f7ff ffda 	bl	80a2da4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a2df0:	b005      	add	sp, #20
 80a2df2:	f85d fb04 	ldr.w	pc, [sp], #4

080a2df6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a2df6:	2200      	movs	r2, #0
 80a2df8:	7c00      	ldrb	r0, [r0, #16]
 80a2dfa:	f7fe bd31 	b.w	80a1860 <hal_i2c_begin_transmission>

080a2dfe <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a2dfe:	2200      	movs	r2, #0
 80a2e00:	7c00      	ldrb	r0, [r0, #16]
 80a2e02:	f7fe bd35 	b.w	80a1870 <hal_i2c_end_transmission>

080a2e06 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a2e06:	2101      	movs	r1, #1
 80a2e08:	f7ff bff9 	b.w	80a2dfe <_ZN7TwoWire15endTransmissionEh>

080a2e0c <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2e0c:	2200      	movs	r2, #0
 80a2e0e:	6840      	ldr	r0, [r0, #4]
 80a2e10:	4611      	mov	r1, r2
 80a2e12:	f7fe be45 	b.w	80a1aa0 <network_ready>

080a2e16 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2e18:	4615      	mov	r5, r2
 80a2e1a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2e1c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2e1e:	460e      	mov	r6, r1
 80a2e20:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2e22:	2100      	movs	r1, #0
 80a2e24:	a803      	add	r0, sp, #12
 80a2e26:	f001 fab7 	bl	80a4398 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2e2a:	4628      	mov	r0, r5
 80a2e2c:	f001 fafb 	bl	80a4426 <strlen>
 80a2e30:	2700      	movs	r7, #0
 80a2e32:	b281      	uxth	r1, r0
 80a2e34:	6873      	ldr	r3, [r6, #4]
 80a2e36:	4628      	mov	r0, r5
 80a2e38:	9700      	str	r7, [sp, #0]
 80a2e3a:	aa03      	add	r2, sp, #12
 80a2e3c:	f7fe fddc 	bl	80a19f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e40:	b130      	cbz	r0, 80a2e50 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2e42:	4639      	mov	r1, r7
 80a2e44:	4620      	mov	r0, r4
 80a2e46:	f7ff fded 	bl	80a2a24 <_ZN9IPAddressC1Em>
    }
 80a2e4a:	4620      	mov	r0, r4
 80a2e4c:	b009      	add	sp, #36	; 0x24
 80a2e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e50:	4620      	mov	r0, r4
 80a2e52:	a903      	add	r1, sp, #12
 80a2e54:	f7ff fdd4 	bl	80a2a00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2e58:	e7f7      	b.n	80a2e4a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2e5a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2e5a:	2200      	movs	r2, #0
 80a2e5c:	6840      	ldr	r0, [r0, #4]
 80a2e5e:	4611      	mov	r1, r2
 80a2e60:	f7fe be3e 	b.w	80a1ae0 <network_listening>

080a2e64 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2e64:	2200      	movs	r2, #0
 80a2e66:	6840      	ldr	r0, [r0, #4]
 80a2e68:	4611      	mov	r1, r2
 80a2e6a:	f7fe be49 	b.w	80a1b00 <network_get_listen_timeout>

080a2e6e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2e6e:	2200      	movs	r2, #0
 80a2e70:	6840      	ldr	r0, [r0, #4]
 80a2e72:	f7fe be3d 	b.w	80a1af0 <network_set_listen_timeout>

080a2e76 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2e76:	2200      	movs	r2, #0
 80a2e78:	6840      	ldr	r0, [r0, #4]
 80a2e7a:	f081 0101 	eor.w	r1, r1, #1
 80a2e7e:	f7fe be27 	b.w	80a1ad0 <network_listen>

080a2e82 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2e82:	2300      	movs	r3, #0
 80a2e84:	6840      	ldr	r0, [r0, #4]
 80a2e86:	461a      	mov	r2, r3
 80a2e88:	4619      	mov	r1, r3
 80a2e8a:	f7fe be19 	b.w	80a1ac0 <network_off>

080a2e8e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2e8e:	2200      	movs	r2, #0
 80a2e90:	6840      	ldr	r0, [r0, #4]
 80a2e92:	4611      	mov	r1, r2
 80a2e94:	f7fe bdf4 	b.w	80a1a80 <network_connecting>

080a2e98 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2e98:	2200      	movs	r2, #0
 80a2e9a:	2102      	movs	r1, #2
 80a2e9c:	6840      	ldr	r0, [r0, #4]
 80a2e9e:	f7fe bdf7 	b.w	80a1a90 <network_disconnect>

080a2ea2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2ea2:	2300      	movs	r3, #0
 80a2ea4:	6840      	ldr	r0, [r0, #4]
 80a2ea6:	461a      	mov	r2, r3
 80a2ea8:	f7fe bde2 	b.w	80a1a70 <network_connect>

080a2eac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2eac:	2204      	movs	r2, #4
 80a2eae:	4b02      	ldr	r3, [pc, #8]	; (80a2eb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2eb0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2eb2:	4a02      	ldr	r2, [pc, #8]	; (80a2ebc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2eb4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2eb6:	4770      	bx	lr
 80a2eb8:	20000604 	.word	0x20000604
 80a2ebc:	080a4854 	.word	0x080a4854

080a2ec0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ec0:	2300      	movs	r3, #0
 80a2ec2:	6840      	ldr	r0, [r0, #4]
 80a2ec4:	461a      	mov	r2, r3
 80a2ec6:	f7fe bdd3 	b.w	80a1a70 <network_connect>

080a2eca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2eca:	2200      	movs	r2, #0
 80a2ecc:	2102      	movs	r1, #2
 80a2ece:	6840      	ldr	r0, [r0, #4]
 80a2ed0:	f7fe bdde 	b.w	80a1a90 <network_disconnect>

080a2ed4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2ed4:	2200      	movs	r2, #0
 80a2ed6:	6840      	ldr	r0, [r0, #4]
 80a2ed8:	4611      	mov	r1, r2
 80a2eda:	f7fe bdd1 	b.w	80a1a80 <network_connecting>

080a2ede <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2ede:	2200      	movs	r2, #0
 80a2ee0:	6840      	ldr	r0, [r0, #4]
 80a2ee2:	4611      	mov	r1, r2
 80a2ee4:	f7fe bddc 	b.w	80a1aa0 <network_ready>

080a2ee8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2ee8:	2300      	movs	r3, #0
 80a2eea:	6840      	ldr	r0, [r0, #4]
 80a2eec:	461a      	mov	r2, r3
 80a2eee:	4619      	mov	r1, r3
 80a2ef0:	f7fe bdde 	b.w	80a1ab0 <network_on>

080a2ef4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2ef4:	2300      	movs	r3, #0
 80a2ef6:	6840      	ldr	r0, [r0, #4]
 80a2ef8:	461a      	mov	r2, r3
 80a2efa:	4619      	mov	r1, r3
 80a2efc:	f7fe bde0 	b.w	80a1ac0 <network_off>

080a2f00 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2f00:	2100      	movs	r1, #0
 80a2f02:	6840      	ldr	r0, [r0, #4]
 80a2f04:	f7fe be04 	b.w	80a1b10 <network_is_on>

080a2f08 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2f08:	2100      	movs	r1, #0
 80a2f0a:	6840      	ldr	r0, [r0, #4]
 80a2f0c:	f7fe be08 	b.w	80a1b20 <network_is_off>

080a2f10 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2f10:	2200      	movs	r2, #0
 80a2f12:	6840      	ldr	r0, [r0, #4]
 80a2f14:	f081 0101 	eor.w	r1, r1, #1
 80a2f18:	f7fe bdda 	b.w	80a1ad0 <network_listen>

080a2f1c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2f1c:	2200      	movs	r2, #0
 80a2f1e:	6840      	ldr	r0, [r0, #4]
 80a2f20:	f7fe bde6 	b.w	80a1af0 <network_set_listen_timeout>

080a2f24 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2f24:	2200      	movs	r2, #0
 80a2f26:	6840      	ldr	r0, [r0, #4]
 80a2f28:	4611      	mov	r1, r2
 80a2f2a:	f7fe bde9 	b.w	80a1b00 <network_get_listen_timeout>

080a2f2e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2f2e:	2200      	movs	r2, #0
 80a2f30:	6840      	ldr	r0, [r0, #4]
 80a2f32:	4611      	mov	r1, r2
 80a2f34:	f7fe bdd4 	b.w	80a1ae0 <network_listening>

080a2f38 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2f38:	b570      	push	{r4, r5, r6, lr}
 80a2f3a:	4615      	mov	r5, r2
 80a2f3c:	b08e      	sub	sp, #56	; 0x38
 80a2f3e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2f40:	a808      	add	r0, sp, #32
 80a2f42:	f7ff fd4f 	bl	80a29e4 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2f46:	2211      	movs	r2, #17
 80a2f48:	2100      	movs	r1, #0
 80a2f4a:	a803      	add	r0, sp, #12
 80a2f4c:	f001 fa24 	bl	80a4398 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2f50:	2600      	movs	r6, #0
 80a2f52:	4628      	mov	r0, r5
 80a2f54:	f001 fa67 	bl	80a4426 <strlen>
 80a2f58:	4b0a      	ldr	r3, [pc, #40]	; (80a2f84 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2f5a:	9600      	str	r6, [sp, #0]
 80a2f5c:	b281      	uxth	r1, r0
 80a2f5e:	685b      	ldr	r3, [r3, #4]
 80a2f60:	4628      	mov	r0, r5
 80a2f62:	aa03      	add	r2, sp, #12
 80a2f64:	f7fe fd48 	bl	80a19f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2f68:	b130      	cbz	r0, 80a2f78 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2f6a:	4631      	mov	r1, r6
 80a2f6c:	4620      	mov	r0, r4
 80a2f6e:	f7ff fd59 	bl	80a2a24 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2f72:	4620      	mov	r0, r4
 80a2f74:	b00e      	add	sp, #56	; 0x38
 80a2f76:	bd70      	pop	{r4, r5, r6, pc}
 80a2f78:	4620      	mov	r0, r4
 80a2f7a:	a903      	add	r1, sp, #12
 80a2f7c:	f7ff fd40 	bl	80a2a00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2f80:	e7f7      	b.n	80a2f72 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2f82:	bf00      	nop
 80a2f84:	20000604 	.word	0x20000604

080a2f88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2f88:	4b02      	ldr	r3, [pc, #8]	; (80a2f94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2f8a:	4a03      	ldr	r2, [pc, #12]	; (80a2f98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2f8c:	601a      	str	r2, [r3, #0]
 80a2f8e:	2200      	movs	r2, #0
 80a2f90:	605a      	str	r2, [r3, #4]

} // spark
 80a2f92:	4770      	bx	lr
 80a2f94:	2000060c 	.word	0x2000060c
 80a2f98:	080a4890 	.word	0x080a4890

080a2f9c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2f9c:	4b02      	ldr	r3, [pc, #8]	; (80a2fa8 <__tcf_0+0xc>)
 80a2f9e:	6898      	ldr	r0, [r3, #8]
 80a2fa0:	b108      	cbz	r0, 80a2fa6 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2fa2:	f7fe bbfd 	b.w	80a17a0 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2fa6:	4770      	bx	lr
 80a2fa8:	20000174 	.word	0x20000174

080a2fac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2fac:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2fae:	b570      	push	{r4, r5, r6, lr}
 80a2fb0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2fb2:	d901      	bls.n	80a2fb8 <pinAvailable+0xc>
    return false;
 80a2fb4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2fb6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2fb8:	f1a0 030d 	sub.w	r3, r0, #13
 80a2fbc:	2b02      	cmp	r3, #2
 80a2fbe:	d90b      	bls.n	80a2fd8 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2fc0:	2801      	cmp	r0, #1
 80a2fc2:	d824      	bhi.n	80a300e <pinAvailable+0x62>
 80a2fc4:	f000 f886 	bl	80a30d4 <_Z19__fetch_global_Wirev>
 80a2fc8:	2100      	movs	r1, #0
 80a2fca:	7c00      	ldrb	r0, [r0, #16]
 80a2fcc:	f7fe fc80 	bl	80a18d0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2fd0:	f080 0001 	eor.w	r0, r0, #1
 80a2fd4:	b2c0      	uxtb	r0, r0
 80a2fd6:	e7ee      	b.n	80a2fb6 <pinAvailable+0xa>
 80a2fd8:	4e12      	ldr	r6, [pc, #72]	; (80a3024 <pinAvailable+0x78>)
 80a2fda:	7831      	ldrb	r1, [r6, #0]
 80a2fdc:	f3bf 8f5b 	dmb	ish
 80a2fe0:	f011 0501 	ands.w	r5, r1, #1
 80a2fe4:	d10d      	bne.n	80a3002 <pinAvailable+0x56>
 80a2fe6:	4630      	mov	r0, r6
 80a2fe8:	f7fd f85b 	bl	80a00a2 <__cxa_guard_acquire>
 80a2fec:	b148      	cbz	r0, 80a3002 <pinAvailable+0x56>
 80a2fee:	4629      	mov	r1, r5
 80a2ff0:	480d      	ldr	r0, [pc, #52]	; (80a3028 <pinAvailable+0x7c>)
 80a2ff2:	f7fe fdf8 	bl	80a1be6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2ff6:	4630      	mov	r0, r6
 80a2ff8:	f7fd f858 	bl	80a00ac <__cxa_guard_release>
 80a2ffc:	480b      	ldr	r0, [pc, #44]	; (80a302c <pinAvailable+0x80>)
 80a2ffe:	f001 f9b7 	bl	80a4370 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3002:	4b09      	ldr	r3, [pc, #36]	; (80a3028 <pinAvailable+0x7c>)
 80a3004:	7818      	ldrb	r0, [r3, #0]
 80a3006:	f7fe fc8f 	bl	80a1928 <hal_spi_is_enabled>
 80a300a:	2800      	cmp	r0, #0
 80a300c:	d1d2      	bne.n	80a2fb4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a300e:	3c12      	subs	r4, #18
 80a3010:	2c01      	cmp	r4, #1
 80a3012:	d805      	bhi.n	80a3020 <pinAvailable+0x74>
 80a3014:	f7ff fe4a 	bl	80a2cac <_Z22__fetch_global_Serial1v>
 80a3018:	7c00      	ldrb	r0, [r0, #16]
 80a301a:	f7fe fc09 	bl	80a1830 <hal_usart_is_enabled>
 80a301e:	e7d7      	b.n	80a2fd0 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3020:	2001      	movs	r0, #1
 80a3022:	e7c8      	b.n	80a2fb6 <pinAvailable+0xa>
 80a3024:	20000170 	.word	0x20000170
 80a3028:	20000174 	.word	0x20000174
 80a302c:	080a2f9d 	.word	0x080a2f9d

080a3030 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3030:	2817      	cmp	r0, #23
{
 80a3032:	b538      	push	{r3, r4, r5, lr}
 80a3034:	4604      	mov	r4, r0
 80a3036:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3038:	d80a      	bhi.n	80a3050 <pinMode+0x20>
 80a303a:	29ff      	cmp	r1, #255	; 0xff
 80a303c:	d008      	beq.n	80a3050 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a303e:	f7ff ffb5 	bl	80a2fac <pinAvailable>
 80a3042:	b128      	cbz	r0, 80a3050 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3044:	4629      	mov	r1, r5
 80a3046:	4620      	mov	r0, r4
}
 80a3048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a304c:	f7fe bb70 	b.w	80a1730 <HAL_Pin_Mode>
}
 80a3050:	bd38      	pop	{r3, r4, r5, pc}

080a3052 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3052:	b538      	push	{r3, r4, r5, lr}
 80a3054:	4604      	mov	r4, r0
 80a3056:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3058:	f7fe fb72 	bl	80a1740 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a305c:	28ff      	cmp	r0, #255	; 0xff
 80a305e:	d010      	beq.n	80a3082 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3060:	2806      	cmp	r0, #6
 80a3062:	d804      	bhi.n	80a306e <digitalWrite+0x1c>
 80a3064:	234d      	movs	r3, #77	; 0x4d
 80a3066:	fa23 f000 	lsr.w	r0, r3, r0
 80a306a:	07c3      	lsls	r3, r0, #31
 80a306c:	d409      	bmi.n	80a3082 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a306e:	4620      	mov	r0, r4
 80a3070:	f7ff ff9c 	bl	80a2fac <pinAvailable>
 80a3074:	b128      	cbz	r0, 80a3082 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3076:	4629      	mov	r1, r5
 80a3078:	4620      	mov	r0, r4
}
 80a307a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a307e:	f7fe bb67 	b.w	80a1750 <HAL_GPIO_Write>
}
 80a3082:	bd38      	pop	{r3, r4, r5, pc}

080a3084 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3084:	2300      	movs	r3, #0
 80a3086:	b507      	push	{r0, r1, r2, lr}
 80a3088:	461a      	mov	r2, r3
 80a308a:	4619      	mov	r1, r3
 80a308c:	9300      	str	r3, [sp, #0]
 80a308e:	4803      	ldr	r0, [pc, #12]	; (80a309c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a3090:	f7ff fcde 	bl	80a2a50 <_ZN9IPAddressC1Ehhhh>
 80a3094:	b003      	add	sp, #12
 80a3096:	f85d fb04 	ldr.w	pc, [sp], #4
 80a309a:	bf00      	nop
 80a309c:	20000618 	.word	0x20000618

080a30a0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a30a0:	4770      	bx	lr
	...

080a30a4 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a30a4:	2300      	movs	r3, #0
{
 80a30a6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a30a8:	2520      	movs	r5, #32
 80a30aa:	8043      	strh	r3, [r0, #2]
 80a30ac:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30ae:	4e08      	ldr	r6, [pc, #32]	; (80a30d0 <_Z17acquireWireBufferv+0x2c>)
{
 80a30b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a30b2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30b4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a30b6:	6085      	str	r5, [r0, #8]
 80a30b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30ba:	4628      	mov	r0, r5
 80a30bc:	f000 f830 	bl	80a3120 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30c0:	4631      	mov	r1, r6
	};
 80a30c2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30c4:	4628      	mov	r0, r5
 80a30c6:	f000 f82b 	bl	80a3120 <_ZnajRKSt9nothrow_t>
	};
 80a30ca:	60e0      	str	r0, [r4, #12]
}
 80a30cc:	4620      	mov	r0, r4
 80a30ce:	bd70      	pop	{r4, r5, r6, pc}
 80a30d0:	080a48c4 	.word	0x080a48c4

080a30d4 <_Z19__fetch_global_Wirev>:
{
 80a30d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a30d6:	4d0e      	ldr	r5, [pc, #56]	; (80a3110 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a30d8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a30da:	7829      	ldrb	r1, [r5, #0]
 80a30dc:	f3bf 8f5b 	dmb	ish
 80a30e0:	f011 0401 	ands.w	r4, r1, #1
 80a30e4:	d111      	bne.n	80a310a <_Z19__fetch_global_Wirev+0x36>
 80a30e6:	4628      	mov	r0, r5
 80a30e8:	f7fc ffdb 	bl	80a00a2 <__cxa_guard_acquire>
 80a30ec:	b168      	cbz	r0, 80a310a <_Z19__fetch_global_Wirev+0x36>
 80a30ee:	a801      	add	r0, sp, #4
 80a30f0:	f7ff ffd8 	bl	80a30a4 <_Z17acquireWireBufferv>
 80a30f4:	4621      	mov	r1, r4
 80a30f6:	aa01      	add	r2, sp, #4
 80a30f8:	4806      	ldr	r0, [pc, #24]	; (80a3114 <_Z19__fetch_global_Wirev+0x40>)
 80a30fa:	f7ff fe3b 	bl	80a2d74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a30fe:	4628      	mov	r0, r5
 80a3100:	f7fc ffd4 	bl	80a00ac <__cxa_guard_release>
 80a3104:	4804      	ldr	r0, [pc, #16]	; (80a3118 <_Z19__fetch_global_Wirev+0x44>)
 80a3106:	f001 f933 	bl	80a4370 <atexit>
	return wire;
}
 80a310a:	4802      	ldr	r0, [pc, #8]	; (80a3114 <_Z19__fetch_global_Wirev+0x40>)
 80a310c:	b007      	add	sp, #28
 80a310e:	bd30      	pop	{r4, r5, pc}
 80a3110:	20000630 	.word	0x20000630
 80a3114:	20000634 	.word	0x20000634
 80a3118:	080a30a1 	.word	0x080a30a1

080a311c <_ZdlPvj>:
 80a311c:	f7fc bfbf 	b.w	80a009e <_ZdlPv>

080a3120 <_ZnajRKSt9nothrow_t>:
 80a3120:	f7fc bfbb 	b.w	80a009a <_Znaj>

080a3124 <_ZSt25__throw_bad_function_callv>:
 80a3124:	b508      	push	{r3, lr}
 80a3126:	f7fe fd43 	bl	80a1bb0 <abort>
	...

080a312c <__aeabi_drsub>:
 80a312c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3130:	e002      	b.n	80a3138 <__adddf3>
 80a3132:	bf00      	nop

080a3134 <__aeabi_dsub>:
 80a3134:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3138 <__adddf3>:
 80a3138:	b530      	push	{r4, r5, lr}
 80a313a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a313e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3142:	ea94 0f05 	teq	r4, r5
 80a3146:	bf08      	it	eq
 80a3148:	ea90 0f02 	teqeq	r0, r2
 80a314c:	bf1f      	itttt	ne
 80a314e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3152:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3156:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a315a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a315e:	f000 80e2 	beq.w	80a3326 <__adddf3+0x1ee>
 80a3162:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3166:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a316a:	bfb8      	it	lt
 80a316c:	426d      	neglt	r5, r5
 80a316e:	dd0c      	ble.n	80a318a <__adddf3+0x52>
 80a3170:	442c      	add	r4, r5
 80a3172:	ea80 0202 	eor.w	r2, r0, r2
 80a3176:	ea81 0303 	eor.w	r3, r1, r3
 80a317a:	ea82 0000 	eor.w	r0, r2, r0
 80a317e:	ea83 0101 	eor.w	r1, r3, r1
 80a3182:	ea80 0202 	eor.w	r2, r0, r2
 80a3186:	ea81 0303 	eor.w	r3, r1, r3
 80a318a:	2d36      	cmp	r5, #54	; 0x36
 80a318c:	bf88      	it	hi
 80a318e:	bd30      	pophi	{r4, r5, pc}
 80a3190:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3194:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3198:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a319c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a31a0:	d002      	beq.n	80a31a8 <__adddf3+0x70>
 80a31a2:	4240      	negs	r0, r0
 80a31a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a31a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a31ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a31b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a31b4:	d002      	beq.n	80a31bc <__adddf3+0x84>
 80a31b6:	4252      	negs	r2, r2
 80a31b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a31bc:	ea94 0f05 	teq	r4, r5
 80a31c0:	f000 80a7 	beq.w	80a3312 <__adddf3+0x1da>
 80a31c4:	f1a4 0401 	sub.w	r4, r4, #1
 80a31c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a31cc:	db0d      	blt.n	80a31ea <__adddf3+0xb2>
 80a31ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a31d2:	fa22 f205 	lsr.w	r2, r2, r5
 80a31d6:	1880      	adds	r0, r0, r2
 80a31d8:	f141 0100 	adc.w	r1, r1, #0
 80a31dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a31e0:	1880      	adds	r0, r0, r2
 80a31e2:	fa43 f305 	asr.w	r3, r3, r5
 80a31e6:	4159      	adcs	r1, r3
 80a31e8:	e00e      	b.n	80a3208 <__adddf3+0xd0>
 80a31ea:	f1a5 0520 	sub.w	r5, r5, #32
 80a31ee:	f10e 0e20 	add.w	lr, lr, #32
 80a31f2:	2a01      	cmp	r2, #1
 80a31f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a31f8:	bf28      	it	cs
 80a31fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a31fe:	fa43 f305 	asr.w	r3, r3, r5
 80a3202:	18c0      	adds	r0, r0, r3
 80a3204:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a320c:	d507      	bpl.n	80a321e <__adddf3+0xe6>
 80a320e:	f04f 0e00 	mov.w	lr, #0
 80a3212:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3216:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a321a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a321e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3222:	d31b      	bcc.n	80a325c <__adddf3+0x124>
 80a3224:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3228:	d30c      	bcc.n	80a3244 <__adddf3+0x10c>
 80a322a:	0849      	lsrs	r1, r1, #1
 80a322c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3230:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3234:	f104 0401 	add.w	r4, r4, #1
 80a3238:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a323c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3240:	f080 809a 	bcs.w	80a3378 <__adddf3+0x240>
 80a3244:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3248:	bf08      	it	eq
 80a324a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a324e:	f150 0000 	adcs.w	r0, r0, #0
 80a3252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3256:	ea41 0105 	orr.w	r1, r1, r5
 80a325a:	bd30      	pop	{r4, r5, pc}
 80a325c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3260:	4140      	adcs	r0, r0
 80a3262:	eb41 0101 	adc.w	r1, r1, r1
 80a3266:	3c01      	subs	r4, #1
 80a3268:	bf28      	it	cs
 80a326a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a326e:	d2e9      	bcs.n	80a3244 <__adddf3+0x10c>
 80a3270:	f091 0f00 	teq	r1, #0
 80a3274:	bf04      	itt	eq
 80a3276:	4601      	moveq	r1, r0
 80a3278:	2000      	moveq	r0, #0
 80a327a:	fab1 f381 	clz	r3, r1
 80a327e:	bf08      	it	eq
 80a3280:	3320      	addeq	r3, #32
 80a3282:	f1a3 030b 	sub.w	r3, r3, #11
 80a3286:	f1b3 0220 	subs.w	r2, r3, #32
 80a328a:	da0c      	bge.n	80a32a6 <__adddf3+0x16e>
 80a328c:	320c      	adds	r2, #12
 80a328e:	dd08      	ble.n	80a32a2 <__adddf3+0x16a>
 80a3290:	f102 0c14 	add.w	ip, r2, #20
 80a3294:	f1c2 020c 	rsb	r2, r2, #12
 80a3298:	fa01 f00c 	lsl.w	r0, r1, ip
 80a329c:	fa21 f102 	lsr.w	r1, r1, r2
 80a32a0:	e00c      	b.n	80a32bc <__adddf3+0x184>
 80a32a2:	f102 0214 	add.w	r2, r2, #20
 80a32a6:	bfd8      	it	le
 80a32a8:	f1c2 0c20 	rsble	ip, r2, #32
 80a32ac:	fa01 f102 	lsl.w	r1, r1, r2
 80a32b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a32b4:	bfdc      	itt	le
 80a32b6:	ea41 010c 	orrle.w	r1, r1, ip
 80a32ba:	4090      	lslle	r0, r2
 80a32bc:	1ae4      	subs	r4, r4, r3
 80a32be:	bfa2      	ittt	ge
 80a32c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a32c4:	4329      	orrge	r1, r5
 80a32c6:	bd30      	popge	{r4, r5, pc}
 80a32c8:	ea6f 0404 	mvn.w	r4, r4
 80a32cc:	3c1f      	subs	r4, #31
 80a32ce:	da1c      	bge.n	80a330a <__adddf3+0x1d2>
 80a32d0:	340c      	adds	r4, #12
 80a32d2:	dc0e      	bgt.n	80a32f2 <__adddf3+0x1ba>
 80a32d4:	f104 0414 	add.w	r4, r4, #20
 80a32d8:	f1c4 0220 	rsb	r2, r4, #32
 80a32dc:	fa20 f004 	lsr.w	r0, r0, r4
 80a32e0:	fa01 f302 	lsl.w	r3, r1, r2
 80a32e4:	ea40 0003 	orr.w	r0, r0, r3
 80a32e8:	fa21 f304 	lsr.w	r3, r1, r4
 80a32ec:	ea45 0103 	orr.w	r1, r5, r3
 80a32f0:	bd30      	pop	{r4, r5, pc}
 80a32f2:	f1c4 040c 	rsb	r4, r4, #12
 80a32f6:	f1c4 0220 	rsb	r2, r4, #32
 80a32fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a32fe:	fa01 f304 	lsl.w	r3, r1, r4
 80a3302:	ea40 0003 	orr.w	r0, r0, r3
 80a3306:	4629      	mov	r1, r5
 80a3308:	bd30      	pop	{r4, r5, pc}
 80a330a:	fa21 f004 	lsr.w	r0, r1, r4
 80a330e:	4629      	mov	r1, r5
 80a3310:	bd30      	pop	{r4, r5, pc}
 80a3312:	f094 0f00 	teq	r4, #0
 80a3316:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a331a:	bf06      	itte	eq
 80a331c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3320:	3401      	addeq	r4, #1
 80a3322:	3d01      	subne	r5, #1
 80a3324:	e74e      	b.n	80a31c4 <__adddf3+0x8c>
 80a3326:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a332a:	bf18      	it	ne
 80a332c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3330:	d029      	beq.n	80a3386 <__adddf3+0x24e>
 80a3332:	ea94 0f05 	teq	r4, r5
 80a3336:	bf08      	it	eq
 80a3338:	ea90 0f02 	teqeq	r0, r2
 80a333c:	d005      	beq.n	80a334a <__adddf3+0x212>
 80a333e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3342:	bf04      	itt	eq
 80a3344:	4619      	moveq	r1, r3
 80a3346:	4610      	moveq	r0, r2
 80a3348:	bd30      	pop	{r4, r5, pc}
 80a334a:	ea91 0f03 	teq	r1, r3
 80a334e:	bf1e      	ittt	ne
 80a3350:	2100      	movne	r1, #0
 80a3352:	2000      	movne	r0, #0
 80a3354:	bd30      	popne	{r4, r5, pc}
 80a3356:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a335a:	d105      	bne.n	80a3368 <__adddf3+0x230>
 80a335c:	0040      	lsls	r0, r0, #1
 80a335e:	4149      	adcs	r1, r1
 80a3360:	bf28      	it	cs
 80a3362:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3366:	bd30      	pop	{r4, r5, pc}
 80a3368:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a336c:	bf3c      	itt	cc
 80a336e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3372:	bd30      	popcc	{r4, r5, pc}
 80a3374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3378:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a337c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3380:	f04f 0000 	mov.w	r0, #0
 80a3384:	bd30      	pop	{r4, r5, pc}
 80a3386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a338a:	bf1a      	itte	ne
 80a338c:	4619      	movne	r1, r3
 80a338e:	4610      	movne	r0, r2
 80a3390:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3394:	bf1c      	itt	ne
 80a3396:	460b      	movne	r3, r1
 80a3398:	4602      	movne	r2, r0
 80a339a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a339e:	bf06      	itte	eq
 80a33a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a33a4:	ea91 0f03 	teqeq	r1, r3
 80a33a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a33ac:	bd30      	pop	{r4, r5, pc}
 80a33ae:	bf00      	nop

080a33b0 <__aeabi_ui2d>:
 80a33b0:	f090 0f00 	teq	r0, #0
 80a33b4:	bf04      	itt	eq
 80a33b6:	2100      	moveq	r1, #0
 80a33b8:	4770      	bxeq	lr
 80a33ba:	b530      	push	{r4, r5, lr}
 80a33bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a33c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a33c4:	f04f 0500 	mov.w	r5, #0
 80a33c8:	f04f 0100 	mov.w	r1, #0
 80a33cc:	e750      	b.n	80a3270 <__adddf3+0x138>
 80a33ce:	bf00      	nop

080a33d0 <__aeabi_i2d>:
 80a33d0:	f090 0f00 	teq	r0, #0
 80a33d4:	bf04      	itt	eq
 80a33d6:	2100      	moveq	r1, #0
 80a33d8:	4770      	bxeq	lr
 80a33da:	b530      	push	{r4, r5, lr}
 80a33dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a33e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a33e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a33e8:	bf48      	it	mi
 80a33ea:	4240      	negmi	r0, r0
 80a33ec:	f04f 0100 	mov.w	r1, #0
 80a33f0:	e73e      	b.n	80a3270 <__adddf3+0x138>
 80a33f2:	bf00      	nop

080a33f4 <__aeabi_f2d>:
 80a33f4:	0042      	lsls	r2, r0, #1
 80a33f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a33fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a33fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3402:	bf1f      	itttt	ne
 80a3404:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3408:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a340c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3410:	4770      	bxne	lr
 80a3412:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3416:	bf08      	it	eq
 80a3418:	4770      	bxeq	lr
 80a341a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a341e:	bf04      	itt	eq
 80a3420:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3424:	4770      	bxeq	lr
 80a3426:	b530      	push	{r4, r5, lr}
 80a3428:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a342c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3430:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3434:	e71c      	b.n	80a3270 <__adddf3+0x138>
 80a3436:	bf00      	nop

080a3438 <__aeabi_ul2d>:
 80a3438:	ea50 0201 	orrs.w	r2, r0, r1
 80a343c:	bf08      	it	eq
 80a343e:	4770      	bxeq	lr
 80a3440:	b530      	push	{r4, r5, lr}
 80a3442:	f04f 0500 	mov.w	r5, #0
 80a3446:	e00a      	b.n	80a345e <__aeabi_l2d+0x16>

080a3448 <__aeabi_l2d>:
 80a3448:	ea50 0201 	orrs.w	r2, r0, r1
 80a344c:	bf08      	it	eq
 80a344e:	4770      	bxeq	lr
 80a3450:	b530      	push	{r4, r5, lr}
 80a3452:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3456:	d502      	bpl.n	80a345e <__aeabi_l2d+0x16>
 80a3458:	4240      	negs	r0, r0
 80a345a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a345e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3462:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3466:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a346a:	f43f aed8 	beq.w	80a321e <__adddf3+0xe6>
 80a346e:	f04f 0203 	mov.w	r2, #3
 80a3472:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3476:	bf18      	it	ne
 80a3478:	3203      	addne	r2, #3
 80a347a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a347e:	bf18      	it	ne
 80a3480:	3203      	addne	r2, #3
 80a3482:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3486:	f1c2 0320 	rsb	r3, r2, #32
 80a348a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a348e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3492:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3496:	ea40 000e 	orr.w	r0, r0, lr
 80a349a:	fa21 f102 	lsr.w	r1, r1, r2
 80a349e:	4414      	add	r4, r2
 80a34a0:	e6bd      	b.n	80a321e <__adddf3+0xe6>
 80a34a2:	bf00      	nop

080a34a4 <__aeabi_dmul>:
 80a34a4:	b570      	push	{r4, r5, r6, lr}
 80a34a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a34ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a34b2:	bf1d      	ittte	ne
 80a34b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a34b8:	ea94 0f0c 	teqne	r4, ip
 80a34bc:	ea95 0f0c 	teqne	r5, ip
 80a34c0:	f000 f8de 	bleq	80a3680 <__aeabi_dmul+0x1dc>
 80a34c4:	442c      	add	r4, r5
 80a34c6:	ea81 0603 	eor.w	r6, r1, r3
 80a34ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a34ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a34d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a34d6:	bf18      	it	ne
 80a34d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a34dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a34e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a34e4:	d038      	beq.n	80a3558 <__aeabi_dmul+0xb4>
 80a34e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a34ea:	f04f 0500 	mov.w	r5, #0
 80a34ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a34f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a34f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a34fa:	f04f 0600 	mov.w	r6, #0
 80a34fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3502:	f09c 0f00 	teq	ip, #0
 80a3506:	bf18      	it	ne
 80a3508:	f04e 0e01 	orrne.w	lr, lr, #1
 80a350c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3510:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3514:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3518:	d204      	bcs.n	80a3524 <__aeabi_dmul+0x80>
 80a351a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a351e:	416d      	adcs	r5, r5
 80a3520:	eb46 0606 	adc.w	r6, r6, r6
 80a3524:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3528:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a352c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3530:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3534:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3538:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a353c:	bf88      	it	hi
 80a353e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3542:	d81e      	bhi.n	80a3582 <__aeabi_dmul+0xde>
 80a3544:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3548:	bf08      	it	eq
 80a354a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a354e:	f150 0000 	adcs.w	r0, r0, #0
 80a3552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3556:	bd70      	pop	{r4, r5, r6, pc}
 80a3558:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a355c:	ea46 0101 	orr.w	r1, r6, r1
 80a3560:	ea40 0002 	orr.w	r0, r0, r2
 80a3564:	ea81 0103 	eor.w	r1, r1, r3
 80a3568:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a356c:	bfc2      	ittt	gt
 80a356e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3572:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3576:	bd70      	popgt	{r4, r5, r6, pc}
 80a3578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a357c:	f04f 0e00 	mov.w	lr, #0
 80a3580:	3c01      	subs	r4, #1
 80a3582:	f300 80ab 	bgt.w	80a36dc <__aeabi_dmul+0x238>
 80a3586:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a358a:	bfde      	ittt	le
 80a358c:	2000      	movle	r0, #0
 80a358e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3592:	bd70      	pople	{r4, r5, r6, pc}
 80a3594:	f1c4 0400 	rsb	r4, r4, #0
 80a3598:	3c20      	subs	r4, #32
 80a359a:	da35      	bge.n	80a3608 <__aeabi_dmul+0x164>
 80a359c:	340c      	adds	r4, #12
 80a359e:	dc1b      	bgt.n	80a35d8 <__aeabi_dmul+0x134>
 80a35a0:	f104 0414 	add.w	r4, r4, #20
 80a35a4:	f1c4 0520 	rsb	r5, r4, #32
 80a35a8:	fa00 f305 	lsl.w	r3, r0, r5
 80a35ac:	fa20 f004 	lsr.w	r0, r0, r4
 80a35b0:	fa01 f205 	lsl.w	r2, r1, r5
 80a35b4:	ea40 0002 	orr.w	r0, r0, r2
 80a35b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a35bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a35c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a35c4:	fa21 f604 	lsr.w	r6, r1, r4
 80a35c8:	eb42 0106 	adc.w	r1, r2, r6
 80a35cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a35d0:	bf08      	it	eq
 80a35d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a35d6:	bd70      	pop	{r4, r5, r6, pc}
 80a35d8:	f1c4 040c 	rsb	r4, r4, #12
 80a35dc:	f1c4 0520 	rsb	r5, r4, #32
 80a35e0:	fa00 f304 	lsl.w	r3, r0, r4
 80a35e4:	fa20 f005 	lsr.w	r0, r0, r5
 80a35e8:	fa01 f204 	lsl.w	r2, r1, r4
 80a35ec:	ea40 0002 	orr.w	r0, r0, r2
 80a35f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a35f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a35f8:	f141 0100 	adc.w	r1, r1, #0
 80a35fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3600:	bf08      	it	eq
 80a3602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3606:	bd70      	pop	{r4, r5, r6, pc}
 80a3608:	f1c4 0520 	rsb	r5, r4, #32
 80a360c:	fa00 f205 	lsl.w	r2, r0, r5
 80a3610:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3614:	fa20 f304 	lsr.w	r3, r0, r4
 80a3618:	fa01 f205 	lsl.w	r2, r1, r5
 80a361c:	ea43 0302 	orr.w	r3, r3, r2
 80a3620:	fa21 f004 	lsr.w	r0, r1, r4
 80a3624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3628:	fa21 f204 	lsr.w	r2, r1, r4
 80a362c:	ea20 0002 	bic.w	r0, r0, r2
 80a3630:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3638:	bf08      	it	eq
 80a363a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a363e:	bd70      	pop	{r4, r5, r6, pc}
 80a3640:	f094 0f00 	teq	r4, #0
 80a3644:	d10f      	bne.n	80a3666 <__aeabi_dmul+0x1c2>
 80a3646:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a364a:	0040      	lsls	r0, r0, #1
 80a364c:	eb41 0101 	adc.w	r1, r1, r1
 80a3650:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3654:	bf08      	it	eq
 80a3656:	3c01      	subeq	r4, #1
 80a3658:	d0f7      	beq.n	80a364a <__aeabi_dmul+0x1a6>
 80a365a:	ea41 0106 	orr.w	r1, r1, r6
 80a365e:	f095 0f00 	teq	r5, #0
 80a3662:	bf18      	it	ne
 80a3664:	4770      	bxne	lr
 80a3666:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a366a:	0052      	lsls	r2, r2, #1
 80a366c:	eb43 0303 	adc.w	r3, r3, r3
 80a3670:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3674:	bf08      	it	eq
 80a3676:	3d01      	subeq	r5, #1
 80a3678:	d0f7      	beq.n	80a366a <__aeabi_dmul+0x1c6>
 80a367a:	ea43 0306 	orr.w	r3, r3, r6
 80a367e:	4770      	bx	lr
 80a3680:	ea94 0f0c 	teq	r4, ip
 80a3684:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3688:	bf18      	it	ne
 80a368a:	ea95 0f0c 	teqne	r5, ip
 80a368e:	d00c      	beq.n	80a36aa <__aeabi_dmul+0x206>
 80a3690:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3694:	bf18      	it	ne
 80a3696:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a369a:	d1d1      	bne.n	80a3640 <__aeabi_dmul+0x19c>
 80a369c:	ea81 0103 	eor.w	r1, r1, r3
 80a36a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a36a4:	f04f 0000 	mov.w	r0, #0
 80a36a8:	bd70      	pop	{r4, r5, r6, pc}
 80a36aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a36ae:	bf06      	itte	eq
 80a36b0:	4610      	moveq	r0, r2
 80a36b2:	4619      	moveq	r1, r3
 80a36b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a36b8:	d019      	beq.n	80a36ee <__aeabi_dmul+0x24a>
 80a36ba:	ea94 0f0c 	teq	r4, ip
 80a36be:	d102      	bne.n	80a36c6 <__aeabi_dmul+0x222>
 80a36c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a36c4:	d113      	bne.n	80a36ee <__aeabi_dmul+0x24a>
 80a36c6:	ea95 0f0c 	teq	r5, ip
 80a36ca:	d105      	bne.n	80a36d8 <__aeabi_dmul+0x234>
 80a36cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a36d0:	bf1c      	itt	ne
 80a36d2:	4610      	movne	r0, r2
 80a36d4:	4619      	movne	r1, r3
 80a36d6:	d10a      	bne.n	80a36ee <__aeabi_dmul+0x24a>
 80a36d8:	ea81 0103 	eor.w	r1, r1, r3
 80a36dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a36e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a36e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a36e8:	f04f 0000 	mov.w	r0, #0
 80a36ec:	bd70      	pop	{r4, r5, r6, pc}
 80a36ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a36f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a36f6:	bd70      	pop	{r4, r5, r6, pc}

080a36f8 <__aeabi_ddiv>:
 80a36f8:	b570      	push	{r4, r5, r6, lr}
 80a36fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a36fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3706:	bf1d      	ittte	ne
 80a3708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a370c:	ea94 0f0c 	teqne	r4, ip
 80a3710:	ea95 0f0c 	teqne	r5, ip
 80a3714:	f000 f8a7 	bleq	80a3866 <__aeabi_ddiv+0x16e>
 80a3718:	eba4 0405 	sub.w	r4, r4, r5
 80a371c:	ea81 0e03 	eor.w	lr, r1, r3
 80a3720:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3724:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3728:	f000 8088 	beq.w	80a383c <__aeabi_ddiv+0x144>
 80a372c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3730:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3734:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3738:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a373c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3740:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3744:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3748:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a374c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3750:	429d      	cmp	r5, r3
 80a3752:	bf08      	it	eq
 80a3754:	4296      	cmpeq	r6, r2
 80a3756:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a375a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a375e:	d202      	bcs.n	80a3766 <__aeabi_ddiv+0x6e>
 80a3760:	085b      	lsrs	r3, r3, #1
 80a3762:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3766:	1ab6      	subs	r6, r6, r2
 80a3768:	eb65 0503 	sbc.w	r5, r5, r3
 80a376c:	085b      	lsrs	r3, r3, #1
 80a376e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3772:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3776:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a377a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a377e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3782:	bf22      	ittt	cs
 80a3784:	1ab6      	subcs	r6, r6, r2
 80a3786:	4675      	movcs	r5, lr
 80a3788:	ea40 000c 	orrcs.w	r0, r0, ip
 80a378c:	085b      	lsrs	r3, r3, #1
 80a378e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3792:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3796:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a379a:	bf22      	ittt	cs
 80a379c:	1ab6      	subcs	r6, r6, r2
 80a379e:	4675      	movcs	r5, lr
 80a37a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a37a4:	085b      	lsrs	r3, r3, #1
 80a37a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a37aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a37ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a37b2:	bf22      	ittt	cs
 80a37b4:	1ab6      	subcs	r6, r6, r2
 80a37b6:	4675      	movcs	r5, lr
 80a37b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a37bc:	085b      	lsrs	r3, r3, #1
 80a37be:	ea4f 0232 	mov.w	r2, r2, rrx
 80a37c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a37c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a37ca:	bf22      	ittt	cs
 80a37cc:	1ab6      	subcs	r6, r6, r2
 80a37ce:	4675      	movcs	r5, lr
 80a37d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a37d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a37d8:	d018      	beq.n	80a380c <__aeabi_ddiv+0x114>
 80a37da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a37de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a37e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a37e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a37ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a37ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a37f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a37f6:	d1c0      	bne.n	80a377a <__aeabi_ddiv+0x82>
 80a37f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a37fc:	d10b      	bne.n	80a3816 <__aeabi_ddiv+0x11e>
 80a37fe:	ea41 0100 	orr.w	r1, r1, r0
 80a3802:	f04f 0000 	mov.w	r0, #0
 80a3806:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a380a:	e7b6      	b.n	80a377a <__aeabi_ddiv+0x82>
 80a380c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3810:	bf04      	itt	eq
 80a3812:	4301      	orreq	r1, r0
 80a3814:	2000      	moveq	r0, #0
 80a3816:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a381a:	bf88      	it	hi
 80a381c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3820:	f63f aeaf 	bhi.w	80a3582 <__aeabi_dmul+0xde>
 80a3824:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3828:	bf04      	itt	eq
 80a382a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a382e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3832:	f150 0000 	adcs.w	r0, r0, #0
 80a3836:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a383a:	bd70      	pop	{r4, r5, r6, pc}
 80a383c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3840:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3844:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3848:	bfc2      	ittt	gt
 80a384a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a384e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3852:	bd70      	popgt	{r4, r5, r6, pc}
 80a3854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3858:	f04f 0e00 	mov.w	lr, #0
 80a385c:	3c01      	subs	r4, #1
 80a385e:	e690      	b.n	80a3582 <__aeabi_dmul+0xde>
 80a3860:	ea45 0e06 	orr.w	lr, r5, r6
 80a3864:	e68d      	b.n	80a3582 <__aeabi_dmul+0xde>
 80a3866:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a386a:	ea94 0f0c 	teq	r4, ip
 80a386e:	bf08      	it	eq
 80a3870:	ea95 0f0c 	teqeq	r5, ip
 80a3874:	f43f af3b 	beq.w	80a36ee <__aeabi_dmul+0x24a>
 80a3878:	ea94 0f0c 	teq	r4, ip
 80a387c:	d10a      	bne.n	80a3894 <__aeabi_ddiv+0x19c>
 80a387e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3882:	f47f af34 	bne.w	80a36ee <__aeabi_dmul+0x24a>
 80a3886:	ea95 0f0c 	teq	r5, ip
 80a388a:	f47f af25 	bne.w	80a36d8 <__aeabi_dmul+0x234>
 80a388e:	4610      	mov	r0, r2
 80a3890:	4619      	mov	r1, r3
 80a3892:	e72c      	b.n	80a36ee <__aeabi_dmul+0x24a>
 80a3894:	ea95 0f0c 	teq	r5, ip
 80a3898:	d106      	bne.n	80a38a8 <__aeabi_ddiv+0x1b0>
 80a389a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a389e:	f43f aefd 	beq.w	80a369c <__aeabi_dmul+0x1f8>
 80a38a2:	4610      	mov	r0, r2
 80a38a4:	4619      	mov	r1, r3
 80a38a6:	e722      	b.n	80a36ee <__aeabi_dmul+0x24a>
 80a38a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a38ac:	bf18      	it	ne
 80a38ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a38b2:	f47f aec5 	bne.w	80a3640 <__aeabi_dmul+0x19c>
 80a38b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a38ba:	f47f af0d 	bne.w	80a36d8 <__aeabi_dmul+0x234>
 80a38be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a38c2:	f47f aeeb 	bne.w	80a369c <__aeabi_dmul+0x1f8>
 80a38c6:	e712      	b.n	80a36ee <__aeabi_dmul+0x24a>

080a38c8 <__gedf2>:
 80a38c8:	f04f 3cff 	mov.w	ip, #4294967295
 80a38cc:	e006      	b.n	80a38dc <__cmpdf2+0x4>
 80a38ce:	bf00      	nop

080a38d0 <__ledf2>:
 80a38d0:	f04f 0c01 	mov.w	ip, #1
 80a38d4:	e002      	b.n	80a38dc <__cmpdf2+0x4>
 80a38d6:	bf00      	nop

080a38d8 <__cmpdf2>:
 80a38d8:	f04f 0c01 	mov.w	ip, #1
 80a38dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a38e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a38e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a38ec:	bf18      	it	ne
 80a38ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a38f2:	d01b      	beq.n	80a392c <__cmpdf2+0x54>
 80a38f4:	b001      	add	sp, #4
 80a38f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a38fa:	bf0c      	ite	eq
 80a38fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3900:	ea91 0f03 	teqne	r1, r3
 80a3904:	bf02      	ittt	eq
 80a3906:	ea90 0f02 	teqeq	r0, r2
 80a390a:	2000      	moveq	r0, #0
 80a390c:	4770      	bxeq	lr
 80a390e:	f110 0f00 	cmn.w	r0, #0
 80a3912:	ea91 0f03 	teq	r1, r3
 80a3916:	bf58      	it	pl
 80a3918:	4299      	cmppl	r1, r3
 80a391a:	bf08      	it	eq
 80a391c:	4290      	cmpeq	r0, r2
 80a391e:	bf2c      	ite	cs
 80a3920:	17d8      	asrcs	r0, r3, #31
 80a3922:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3926:	f040 0001 	orr.w	r0, r0, #1
 80a392a:	4770      	bx	lr
 80a392c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3934:	d102      	bne.n	80a393c <__cmpdf2+0x64>
 80a3936:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a393a:	d107      	bne.n	80a394c <__cmpdf2+0x74>
 80a393c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3944:	d1d6      	bne.n	80a38f4 <__cmpdf2+0x1c>
 80a3946:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a394a:	d0d3      	beq.n	80a38f4 <__cmpdf2+0x1c>
 80a394c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3950:	4770      	bx	lr
 80a3952:	bf00      	nop

080a3954 <__aeabi_cdrcmple>:
 80a3954:	4684      	mov	ip, r0
 80a3956:	4610      	mov	r0, r2
 80a3958:	4662      	mov	r2, ip
 80a395a:	468c      	mov	ip, r1
 80a395c:	4619      	mov	r1, r3
 80a395e:	4663      	mov	r3, ip
 80a3960:	e000      	b.n	80a3964 <__aeabi_cdcmpeq>
 80a3962:	bf00      	nop

080a3964 <__aeabi_cdcmpeq>:
 80a3964:	b501      	push	{r0, lr}
 80a3966:	f7ff ffb7 	bl	80a38d8 <__cmpdf2>
 80a396a:	2800      	cmp	r0, #0
 80a396c:	bf48      	it	mi
 80a396e:	f110 0f00 	cmnmi.w	r0, #0
 80a3972:	bd01      	pop	{r0, pc}

080a3974 <__aeabi_dcmpeq>:
 80a3974:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3978:	f7ff fff4 	bl	80a3964 <__aeabi_cdcmpeq>
 80a397c:	bf0c      	ite	eq
 80a397e:	2001      	moveq	r0, #1
 80a3980:	2000      	movne	r0, #0
 80a3982:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3986:	bf00      	nop

080a3988 <__aeabi_dcmplt>:
 80a3988:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a398c:	f7ff ffea 	bl	80a3964 <__aeabi_cdcmpeq>
 80a3990:	bf34      	ite	cc
 80a3992:	2001      	movcc	r0, #1
 80a3994:	2000      	movcs	r0, #0
 80a3996:	f85d fb08 	ldr.w	pc, [sp], #8
 80a399a:	bf00      	nop

080a399c <__aeabi_dcmple>:
 80a399c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39a0:	f7ff ffe0 	bl	80a3964 <__aeabi_cdcmpeq>
 80a39a4:	bf94      	ite	ls
 80a39a6:	2001      	movls	r0, #1
 80a39a8:	2000      	movhi	r0, #0
 80a39aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39ae:	bf00      	nop

080a39b0 <__aeabi_dcmpge>:
 80a39b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39b4:	f7ff ffce 	bl	80a3954 <__aeabi_cdrcmple>
 80a39b8:	bf94      	ite	ls
 80a39ba:	2001      	movls	r0, #1
 80a39bc:	2000      	movhi	r0, #0
 80a39be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39c2:	bf00      	nop

080a39c4 <__aeabi_dcmpgt>:
 80a39c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a39c8:	f7ff ffc4 	bl	80a3954 <__aeabi_cdrcmple>
 80a39cc:	bf34      	ite	cc
 80a39ce:	2001      	movcc	r0, #1
 80a39d0:	2000      	movcs	r0, #0
 80a39d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39d6:	bf00      	nop

080a39d8 <__aeabi_dcmpun>:
 80a39d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a39dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a39e0:	d102      	bne.n	80a39e8 <__aeabi_dcmpun+0x10>
 80a39e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a39e6:	d10a      	bne.n	80a39fe <__aeabi_dcmpun+0x26>
 80a39e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a39ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a39f0:	d102      	bne.n	80a39f8 <__aeabi_dcmpun+0x20>
 80a39f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a39f6:	d102      	bne.n	80a39fe <__aeabi_dcmpun+0x26>
 80a39f8:	f04f 0000 	mov.w	r0, #0
 80a39fc:	4770      	bx	lr
 80a39fe:	f04f 0001 	mov.w	r0, #1
 80a3a02:	4770      	bx	lr

080a3a04 <__aeabi_d2iz>:
 80a3a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3a0c:	d215      	bcs.n	80a3a3a <__aeabi_d2iz+0x36>
 80a3a0e:	d511      	bpl.n	80a3a34 <__aeabi_d2iz+0x30>
 80a3a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3a18:	d912      	bls.n	80a3a40 <__aeabi_d2iz+0x3c>
 80a3a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3a2a:	fa23 f002 	lsr.w	r0, r3, r2
 80a3a2e:	bf18      	it	ne
 80a3a30:	4240      	negne	r0, r0
 80a3a32:	4770      	bx	lr
 80a3a34:	f04f 0000 	mov.w	r0, #0
 80a3a38:	4770      	bx	lr
 80a3a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3a3e:	d105      	bne.n	80a3a4c <__aeabi_d2iz+0x48>
 80a3a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3a44:	bf08      	it	eq
 80a3a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3a4a:	4770      	bx	lr
 80a3a4c:	f04f 0000 	mov.w	r0, #0
 80a3a50:	4770      	bx	lr
 80a3a52:	bf00      	nop

080a3a54 <__aeabi_d2uiz>:
 80a3a54:	004a      	lsls	r2, r1, #1
 80a3a56:	d211      	bcs.n	80a3a7c <__aeabi_d2uiz+0x28>
 80a3a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3a5c:	d211      	bcs.n	80a3a82 <__aeabi_d2uiz+0x2e>
 80a3a5e:	d50d      	bpl.n	80a3a7c <__aeabi_d2uiz+0x28>
 80a3a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3a68:	d40e      	bmi.n	80a3a88 <__aeabi_d2uiz+0x34>
 80a3a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3a76:	fa23 f002 	lsr.w	r0, r3, r2
 80a3a7a:	4770      	bx	lr
 80a3a7c:	f04f 0000 	mov.w	r0, #0
 80a3a80:	4770      	bx	lr
 80a3a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3a86:	d102      	bne.n	80a3a8e <__aeabi_d2uiz+0x3a>
 80a3a88:	f04f 30ff 	mov.w	r0, #4294967295
 80a3a8c:	4770      	bx	lr
 80a3a8e:	f04f 0000 	mov.w	r0, #0
 80a3a92:	4770      	bx	lr

080a3a94 <__aeabi_frsub>:
 80a3a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3a98:	e002      	b.n	80a3aa0 <__addsf3>
 80a3a9a:	bf00      	nop

080a3a9c <__aeabi_fsub>:
 80a3a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3aa0 <__addsf3>:
 80a3aa0:	0042      	lsls	r2, r0, #1
 80a3aa2:	bf1f      	itttt	ne
 80a3aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3aa8:	ea92 0f03 	teqne	r2, r3
 80a3aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3ab4:	d06a      	beq.n	80a3b8c <__addsf3+0xec>
 80a3ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3abe:	bfc1      	itttt	gt
 80a3ac0:	18d2      	addgt	r2, r2, r3
 80a3ac2:	4041      	eorgt	r1, r0
 80a3ac4:	4048      	eorgt	r0, r1
 80a3ac6:	4041      	eorgt	r1, r0
 80a3ac8:	bfb8      	it	lt
 80a3aca:	425b      	neglt	r3, r3
 80a3acc:	2b19      	cmp	r3, #25
 80a3ace:	bf88      	it	hi
 80a3ad0:	4770      	bxhi	lr
 80a3ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3ade:	bf18      	it	ne
 80a3ae0:	4240      	negne	r0, r0
 80a3ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3aee:	bf18      	it	ne
 80a3af0:	4249      	negne	r1, r1
 80a3af2:	ea92 0f03 	teq	r2, r3
 80a3af6:	d03f      	beq.n	80a3b78 <__addsf3+0xd8>
 80a3af8:	f1a2 0201 	sub.w	r2, r2, #1
 80a3afc:	fa41 fc03 	asr.w	ip, r1, r3
 80a3b00:	eb10 000c 	adds.w	r0, r0, ip
 80a3b04:	f1c3 0320 	rsb	r3, r3, #32
 80a3b08:	fa01 f103 	lsl.w	r1, r1, r3
 80a3b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3b10:	d502      	bpl.n	80a3b18 <__addsf3+0x78>
 80a3b12:	4249      	negs	r1, r1
 80a3b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3b1c:	d313      	bcc.n	80a3b46 <__addsf3+0xa6>
 80a3b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3b22:	d306      	bcc.n	80a3b32 <__addsf3+0x92>
 80a3b24:	0840      	lsrs	r0, r0, #1
 80a3b26:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3b2a:	f102 0201 	add.w	r2, r2, #1
 80a3b2e:	2afe      	cmp	r2, #254	; 0xfe
 80a3b30:	d251      	bcs.n	80a3bd6 <__addsf3+0x136>
 80a3b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3b3a:	bf08      	it	eq
 80a3b3c:	f020 0001 	biceq.w	r0, r0, #1
 80a3b40:	ea40 0003 	orr.w	r0, r0, r3
 80a3b44:	4770      	bx	lr
 80a3b46:	0049      	lsls	r1, r1, #1
 80a3b48:	eb40 0000 	adc.w	r0, r0, r0
 80a3b4c:	3a01      	subs	r2, #1
 80a3b4e:	bf28      	it	cs
 80a3b50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a3b54:	d2ed      	bcs.n	80a3b32 <__addsf3+0x92>
 80a3b56:	fab0 fc80 	clz	ip, r0
 80a3b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3b5e:	ebb2 020c 	subs.w	r2, r2, ip
 80a3b62:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3b66:	bfaa      	itet	ge
 80a3b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3b6c:	4252      	neglt	r2, r2
 80a3b6e:	4318      	orrge	r0, r3
 80a3b70:	bfbc      	itt	lt
 80a3b72:	40d0      	lsrlt	r0, r2
 80a3b74:	4318      	orrlt	r0, r3
 80a3b76:	4770      	bx	lr
 80a3b78:	f092 0f00 	teq	r2, #0
 80a3b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3b80:	bf06      	itte	eq
 80a3b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3b86:	3201      	addeq	r2, #1
 80a3b88:	3b01      	subne	r3, #1
 80a3b8a:	e7b5      	b.n	80a3af8 <__addsf3+0x58>
 80a3b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3b94:	bf18      	it	ne
 80a3b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3b9a:	d021      	beq.n	80a3be0 <__addsf3+0x140>
 80a3b9c:	ea92 0f03 	teq	r2, r3
 80a3ba0:	d004      	beq.n	80a3bac <__addsf3+0x10c>
 80a3ba2:	f092 0f00 	teq	r2, #0
 80a3ba6:	bf08      	it	eq
 80a3ba8:	4608      	moveq	r0, r1
 80a3baa:	4770      	bx	lr
 80a3bac:	ea90 0f01 	teq	r0, r1
 80a3bb0:	bf1c      	itt	ne
 80a3bb2:	2000      	movne	r0, #0
 80a3bb4:	4770      	bxne	lr
 80a3bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3bba:	d104      	bne.n	80a3bc6 <__addsf3+0x126>
 80a3bbc:	0040      	lsls	r0, r0, #1
 80a3bbe:	bf28      	it	cs
 80a3bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3bc4:	4770      	bx	lr
 80a3bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3bca:	bf3c      	itt	cc
 80a3bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3bd0:	4770      	bxcc	lr
 80a3bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3bde:	4770      	bx	lr
 80a3be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3be4:	bf16      	itet	ne
 80a3be6:	4608      	movne	r0, r1
 80a3be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3bec:	4601      	movne	r1, r0
 80a3bee:	0242      	lsls	r2, r0, #9
 80a3bf0:	bf06      	itte	eq
 80a3bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3bf6:	ea90 0f01 	teqeq	r0, r1
 80a3bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3bfe:	4770      	bx	lr

080a3c00 <__aeabi_ui2f>:
 80a3c00:	f04f 0300 	mov.w	r3, #0
 80a3c04:	e004      	b.n	80a3c10 <__aeabi_i2f+0x8>
 80a3c06:	bf00      	nop

080a3c08 <__aeabi_i2f>:
 80a3c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3c0c:	bf48      	it	mi
 80a3c0e:	4240      	negmi	r0, r0
 80a3c10:	ea5f 0c00 	movs.w	ip, r0
 80a3c14:	bf08      	it	eq
 80a3c16:	4770      	bxeq	lr
 80a3c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3c1c:	4601      	mov	r1, r0
 80a3c1e:	f04f 0000 	mov.w	r0, #0
 80a3c22:	e01c      	b.n	80a3c5e <__aeabi_l2f+0x2a>

080a3c24 <__aeabi_ul2f>:
 80a3c24:	ea50 0201 	orrs.w	r2, r0, r1
 80a3c28:	bf08      	it	eq
 80a3c2a:	4770      	bxeq	lr
 80a3c2c:	f04f 0300 	mov.w	r3, #0
 80a3c30:	e00a      	b.n	80a3c48 <__aeabi_l2f+0x14>
 80a3c32:	bf00      	nop

080a3c34 <__aeabi_l2f>:
 80a3c34:	ea50 0201 	orrs.w	r2, r0, r1
 80a3c38:	bf08      	it	eq
 80a3c3a:	4770      	bxeq	lr
 80a3c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3c40:	d502      	bpl.n	80a3c48 <__aeabi_l2f+0x14>
 80a3c42:	4240      	negs	r0, r0
 80a3c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3c48:	ea5f 0c01 	movs.w	ip, r1
 80a3c4c:	bf02      	ittt	eq
 80a3c4e:	4684      	moveq	ip, r0
 80a3c50:	4601      	moveq	r1, r0
 80a3c52:	2000      	moveq	r0, #0
 80a3c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3c58:	bf08      	it	eq
 80a3c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3c62:	fabc f28c 	clz	r2, ip
 80a3c66:	3a08      	subs	r2, #8
 80a3c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3c6c:	db10      	blt.n	80a3c90 <__aeabi_l2f+0x5c>
 80a3c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3c72:	4463      	add	r3, ip
 80a3c74:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3c78:	f1c2 0220 	rsb	r2, r2, #32
 80a3c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3c80:	fa20 f202 	lsr.w	r2, r0, r2
 80a3c84:	eb43 0002 	adc.w	r0, r3, r2
 80a3c88:	bf08      	it	eq
 80a3c8a:	f020 0001 	biceq.w	r0, r0, #1
 80a3c8e:	4770      	bx	lr
 80a3c90:	f102 0220 	add.w	r2, r2, #32
 80a3c94:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3c98:	f1c2 0220 	rsb	r2, r2, #32
 80a3c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3ca0:	fa21 f202 	lsr.w	r2, r1, r2
 80a3ca4:	eb43 0002 	adc.w	r0, r3, r2
 80a3ca8:	bf08      	it	eq
 80a3caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3cae:	4770      	bx	lr

080a3cb0 <__aeabi_fmul>:
 80a3cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3cb8:	bf1e      	ittt	ne
 80a3cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3cbe:	ea92 0f0c 	teqne	r2, ip
 80a3cc2:	ea93 0f0c 	teqne	r3, ip
 80a3cc6:	d06f      	beq.n	80a3da8 <__aeabi_fmul+0xf8>
 80a3cc8:	441a      	add	r2, r3
 80a3cca:	ea80 0c01 	eor.w	ip, r0, r1
 80a3cce:	0240      	lsls	r0, r0, #9
 80a3cd0:	bf18      	it	ne
 80a3cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3cd6:	d01e      	beq.n	80a3d16 <__aeabi_fmul+0x66>
 80a3cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3ce4:	fba0 3101 	umull	r3, r1, r0, r1
 80a3ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3cf0:	bf3e      	ittt	cc
 80a3cf2:	0049      	lslcc	r1, r1, #1
 80a3cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3cf8:	005b      	lslcc	r3, r3, #1
 80a3cfa:	ea40 0001 	orr.w	r0, r0, r1
 80a3cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3d02:	2afd      	cmp	r2, #253	; 0xfd
 80a3d04:	d81d      	bhi.n	80a3d42 <__aeabi_fmul+0x92>
 80a3d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3d0e:	bf08      	it	eq
 80a3d10:	f020 0001 	biceq.w	r0, r0, #1
 80a3d14:	4770      	bx	lr
 80a3d16:	f090 0f00 	teq	r0, #0
 80a3d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3d1e:	bf08      	it	eq
 80a3d20:	0249      	lsleq	r1, r1, #9
 80a3d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3d2a:	3a7f      	subs	r2, #127	; 0x7f
 80a3d2c:	bfc2      	ittt	gt
 80a3d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3d36:	4770      	bxgt	lr
 80a3d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d3c:	f04f 0300 	mov.w	r3, #0
 80a3d40:	3a01      	subs	r2, #1
 80a3d42:	dc5d      	bgt.n	80a3e00 <__aeabi_fmul+0x150>
 80a3d44:	f112 0f19 	cmn.w	r2, #25
 80a3d48:	bfdc      	itt	le
 80a3d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3d4e:	4770      	bxle	lr
 80a3d50:	f1c2 0200 	rsb	r2, r2, #0
 80a3d54:	0041      	lsls	r1, r0, #1
 80a3d56:	fa21 f102 	lsr.w	r1, r1, r2
 80a3d5a:	f1c2 0220 	rsb	r2, r2, #32
 80a3d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3d62:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3d66:	f140 0000 	adc.w	r0, r0, #0
 80a3d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3d6e:	bf08      	it	eq
 80a3d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3d74:	4770      	bx	lr
 80a3d76:	f092 0f00 	teq	r2, #0
 80a3d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3d7e:	bf02      	ittt	eq
 80a3d80:	0040      	lsleq	r0, r0, #1
 80a3d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3d86:	3a01      	subeq	r2, #1
 80a3d88:	d0f9      	beq.n	80a3d7e <__aeabi_fmul+0xce>
 80a3d8a:	ea40 000c 	orr.w	r0, r0, ip
 80a3d8e:	f093 0f00 	teq	r3, #0
 80a3d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3d96:	bf02      	ittt	eq
 80a3d98:	0049      	lsleq	r1, r1, #1
 80a3d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3d9e:	3b01      	subeq	r3, #1
 80a3da0:	d0f9      	beq.n	80a3d96 <__aeabi_fmul+0xe6>
 80a3da2:	ea41 010c 	orr.w	r1, r1, ip
 80a3da6:	e78f      	b.n	80a3cc8 <__aeabi_fmul+0x18>
 80a3da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3dac:	ea92 0f0c 	teq	r2, ip
 80a3db0:	bf18      	it	ne
 80a3db2:	ea93 0f0c 	teqne	r3, ip
 80a3db6:	d00a      	beq.n	80a3dce <__aeabi_fmul+0x11e>
 80a3db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3dbc:	bf18      	it	ne
 80a3dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3dc2:	d1d8      	bne.n	80a3d76 <__aeabi_fmul+0xc6>
 80a3dc4:	ea80 0001 	eor.w	r0, r0, r1
 80a3dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3dcc:	4770      	bx	lr
 80a3dce:	f090 0f00 	teq	r0, #0
 80a3dd2:	bf17      	itett	ne
 80a3dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3dd8:	4608      	moveq	r0, r1
 80a3dda:	f091 0f00 	teqne	r1, #0
 80a3dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3de2:	d014      	beq.n	80a3e0e <__aeabi_fmul+0x15e>
 80a3de4:	ea92 0f0c 	teq	r2, ip
 80a3de8:	d101      	bne.n	80a3dee <__aeabi_fmul+0x13e>
 80a3dea:	0242      	lsls	r2, r0, #9
 80a3dec:	d10f      	bne.n	80a3e0e <__aeabi_fmul+0x15e>
 80a3dee:	ea93 0f0c 	teq	r3, ip
 80a3df2:	d103      	bne.n	80a3dfc <__aeabi_fmul+0x14c>
 80a3df4:	024b      	lsls	r3, r1, #9
 80a3df6:	bf18      	it	ne
 80a3df8:	4608      	movne	r0, r1
 80a3dfa:	d108      	bne.n	80a3e0e <__aeabi_fmul+0x15e>
 80a3dfc:	ea80 0001 	eor.w	r0, r0, r1
 80a3e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3e0c:	4770      	bx	lr
 80a3e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3e16:	4770      	bx	lr

080a3e18 <__aeabi_fdiv>:
 80a3e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3e20:	bf1e      	ittt	ne
 80a3e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3e26:	ea92 0f0c 	teqne	r2, ip
 80a3e2a:	ea93 0f0c 	teqne	r3, ip
 80a3e2e:	d069      	beq.n	80a3f04 <__aeabi_fdiv+0xec>
 80a3e30:	eba2 0203 	sub.w	r2, r2, r3
 80a3e34:	ea80 0c01 	eor.w	ip, r0, r1
 80a3e38:	0249      	lsls	r1, r1, #9
 80a3e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3e3e:	d037      	beq.n	80a3eb0 <__aeabi_fdiv+0x98>
 80a3e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3e50:	428b      	cmp	r3, r1
 80a3e52:	bf38      	it	cc
 80a3e54:	005b      	lslcc	r3, r3, #1
 80a3e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3e5e:	428b      	cmp	r3, r1
 80a3e60:	bf24      	itt	cs
 80a3e62:	1a5b      	subcs	r3, r3, r1
 80a3e64:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3e6c:	bf24      	itt	cs
 80a3e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3e7a:	bf24      	itt	cs
 80a3e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3e88:	bf24      	itt	cs
 80a3e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3e92:	011b      	lsls	r3, r3, #4
 80a3e94:	bf18      	it	ne
 80a3e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3e9a:	d1e0      	bne.n	80a3e5e <__aeabi_fdiv+0x46>
 80a3e9c:	2afd      	cmp	r2, #253	; 0xfd
 80a3e9e:	f63f af50 	bhi.w	80a3d42 <__aeabi_fmul+0x92>
 80a3ea2:	428b      	cmp	r3, r1
 80a3ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3ea8:	bf08      	it	eq
 80a3eaa:	f020 0001 	biceq.w	r0, r0, #1
 80a3eae:	4770      	bx	lr
 80a3eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3eb8:	327f      	adds	r2, #127	; 0x7f
 80a3eba:	bfc2      	ittt	gt
 80a3ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3ec4:	4770      	bxgt	lr
 80a3ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3eca:	f04f 0300 	mov.w	r3, #0
 80a3ece:	3a01      	subs	r2, #1
 80a3ed0:	e737      	b.n	80a3d42 <__aeabi_fmul+0x92>
 80a3ed2:	f092 0f00 	teq	r2, #0
 80a3ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3eda:	bf02      	ittt	eq
 80a3edc:	0040      	lsleq	r0, r0, #1
 80a3ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3ee2:	3a01      	subeq	r2, #1
 80a3ee4:	d0f9      	beq.n	80a3eda <__aeabi_fdiv+0xc2>
 80a3ee6:	ea40 000c 	orr.w	r0, r0, ip
 80a3eea:	f093 0f00 	teq	r3, #0
 80a3eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3ef2:	bf02      	ittt	eq
 80a3ef4:	0049      	lsleq	r1, r1, #1
 80a3ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3efa:	3b01      	subeq	r3, #1
 80a3efc:	d0f9      	beq.n	80a3ef2 <__aeabi_fdiv+0xda>
 80a3efe:	ea41 010c 	orr.w	r1, r1, ip
 80a3f02:	e795      	b.n	80a3e30 <__aeabi_fdiv+0x18>
 80a3f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3f08:	ea92 0f0c 	teq	r2, ip
 80a3f0c:	d108      	bne.n	80a3f20 <__aeabi_fdiv+0x108>
 80a3f0e:	0242      	lsls	r2, r0, #9
 80a3f10:	f47f af7d 	bne.w	80a3e0e <__aeabi_fmul+0x15e>
 80a3f14:	ea93 0f0c 	teq	r3, ip
 80a3f18:	f47f af70 	bne.w	80a3dfc <__aeabi_fmul+0x14c>
 80a3f1c:	4608      	mov	r0, r1
 80a3f1e:	e776      	b.n	80a3e0e <__aeabi_fmul+0x15e>
 80a3f20:	ea93 0f0c 	teq	r3, ip
 80a3f24:	d104      	bne.n	80a3f30 <__aeabi_fdiv+0x118>
 80a3f26:	024b      	lsls	r3, r1, #9
 80a3f28:	f43f af4c 	beq.w	80a3dc4 <__aeabi_fmul+0x114>
 80a3f2c:	4608      	mov	r0, r1
 80a3f2e:	e76e      	b.n	80a3e0e <__aeabi_fmul+0x15e>
 80a3f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3f34:	bf18      	it	ne
 80a3f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3f3a:	d1ca      	bne.n	80a3ed2 <__aeabi_fdiv+0xba>
 80a3f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3f40:	f47f af5c 	bne.w	80a3dfc <__aeabi_fmul+0x14c>
 80a3f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3f48:	f47f af3c 	bne.w	80a3dc4 <__aeabi_fmul+0x114>
 80a3f4c:	e75f      	b.n	80a3e0e <__aeabi_fmul+0x15e>
 80a3f4e:	bf00      	nop

080a3f50 <__gesf2>:
 80a3f50:	f04f 3cff 	mov.w	ip, #4294967295
 80a3f54:	e006      	b.n	80a3f64 <__cmpsf2+0x4>
 80a3f56:	bf00      	nop

080a3f58 <__lesf2>:
 80a3f58:	f04f 0c01 	mov.w	ip, #1
 80a3f5c:	e002      	b.n	80a3f64 <__cmpsf2+0x4>
 80a3f5e:	bf00      	nop

080a3f60 <__cmpsf2>:
 80a3f60:	f04f 0c01 	mov.w	ip, #1
 80a3f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3f74:	bf18      	it	ne
 80a3f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3f7a:	d011      	beq.n	80a3fa0 <__cmpsf2+0x40>
 80a3f7c:	b001      	add	sp, #4
 80a3f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3f82:	bf18      	it	ne
 80a3f84:	ea90 0f01 	teqne	r0, r1
 80a3f88:	bf58      	it	pl
 80a3f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3f8e:	bf88      	it	hi
 80a3f90:	17c8      	asrhi	r0, r1, #31
 80a3f92:	bf38      	it	cc
 80a3f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3f98:	bf18      	it	ne
 80a3f9a:	f040 0001 	orrne.w	r0, r0, #1
 80a3f9e:	4770      	bx	lr
 80a3fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3fa4:	d102      	bne.n	80a3fac <__cmpsf2+0x4c>
 80a3fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3faa:	d105      	bne.n	80a3fb8 <__cmpsf2+0x58>
 80a3fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3fb0:	d1e4      	bne.n	80a3f7c <__cmpsf2+0x1c>
 80a3fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3fb6:	d0e1      	beq.n	80a3f7c <__cmpsf2+0x1c>
 80a3fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3fbc:	4770      	bx	lr
 80a3fbe:	bf00      	nop

080a3fc0 <__aeabi_cfrcmple>:
 80a3fc0:	4684      	mov	ip, r0
 80a3fc2:	4608      	mov	r0, r1
 80a3fc4:	4661      	mov	r1, ip
 80a3fc6:	e7ff      	b.n	80a3fc8 <__aeabi_cfcmpeq>

080a3fc8 <__aeabi_cfcmpeq>:
 80a3fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3fca:	f7ff ffc9 	bl	80a3f60 <__cmpsf2>
 80a3fce:	2800      	cmp	r0, #0
 80a3fd0:	bf48      	it	mi
 80a3fd2:	f110 0f00 	cmnmi.w	r0, #0
 80a3fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3fd8 <__aeabi_fcmpeq>:
 80a3fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3fdc:	f7ff fff4 	bl	80a3fc8 <__aeabi_cfcmpeq>
 80a3fe0:	bf0c      	ite	eq
 80a3fe2:	2001      	moveq	r0, #1
 80a3fe4:	2000      	movne	r0, #0
 80a3fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3fea:	bf00      	nop

080a3fec <__aeabi_fcmplt>:
 80a3fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ff0:	f7ff ffea 	bl	80a3fc8 <__aeabi_cfcmpeq>
 80a3ff4:	bf34      	ite	cc
 80a3ff6:	2001      	movcc	r0, #1
 80a3ff8:	2000      	movcs	r0, #0
 80a3ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3ffe:	bf00      	nop

080a4000 <__aeabi_fcmple>:
 80a4000:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4004:	f7ff ffe0 	bl	80a3fc8 <__aeabi_cfcmpeq>
 80a4008:	bf94      	ite	ls
 80a400a:	2001      	movls	r0, #1
 80a400c:	2000      	movhi	r0, #0
 80a400e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4012:	bf00      	nop

080a4014 <__aeabi_fcmpge>:
 80a4014:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4018:	f7ff ffd2 	bl	80a3fc0 <__aeabi_cfrcmple>
 80a401c:	bf94      	ite	ls
 80a401e:	2001      	movls	r0, #1
 80a4020:	2000      	movhi	r0, #0
 80a4022:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4026:	bf00      	nop

080a4028 <__aeabi_fcmpgt>:
 80a4028:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a402c:	f7ff ffc8 	bl	80a3fc0 <__aeabi_cfrcmple>
 80a4030:	bf34      	ite	cc
 80a4032:	2001      	movcc	r0, #1
 80a4034:	2000      	movcs	r0, #0
 80a4036:	f85d fb08 	ldr.w	pc, [sp], #8
 80a403a:	bf00      	nop

080a403c <__aeabi_uldivmod>:
 80a403c:	b953      	cbnz	r3, 80a4054 <__aeabi_uldivmod+0x18>
 80a403e:	b94a      	cbnz	r2, 80a4054 <__aeabi_uldivmod+0x18>
 80a4040:	2900      	cmp	r1, #0
 80a4042:	bf08      	it	eq
 80a4044:	2800      	cmpeq	r0, #0
 80a4046:	bf1c      	itt	ne
 80a4048:	f04f 31ff 	movne.w	r1, #4294967295
 80a404c:	f04f 30ff 	movne.w	r0, #4294967295
 80a4050:	f000 b98c 	b.w	80a436c <__aeabi_idiv0>
 80a4054:	f1ad 0c08 	sub.w	ip, sp, #8
 80a4058:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a405c:	f000 f824 	bl	80a40a8 <__udivmoddi4>
 80a4060:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4068:	b004      	add	sp, #16
 80a406a:	4770      	bx	lr

080a406c <__aeabi_d2ulz>:
 80a406c:	b5d0      	push	{r4, r6, r7, lr}
 80a406e:	2200      	movs	r2, #0
 80a4070:	4b0b      	ldr	r3, [pc, #44]	; (80a40a0 <__aeabi_d2ulz+0x34>)
 80a4072:	4606      	mov	r6, r0
 80a4074:	460f      	mov	r7, r1
 80a4076:	f7ff fa15 	bl	80a34a4 <__aeabi_dmul>
 80a407a:	f7ff fceb 	bl	80a3a54 <__aeabi_d2uiz>
 80a407e:	4604      	mov	r4, r0
 80a4080:	f7ff f996 	bl	80a33b0 <__aeabi_ui2d>
 80a4084:	2200      	movs	r2, #0
 80a4086:	4b07      	ldr	r3, [pc, #28]	; (80a40a4 <__aeabi_d2ulz+0x38>)
 80a4088:	f7ff fa0c 	bl	80a34a4 <__aeabi_dmul>
 80a408c:	4602      	mov	r2, r0
 80a408e:	460b      	mov	r3, r1
 80a4090:	4630      	mov	r0, r6
 80a4092:	4639      	mov	r1, r7
 80a4094:	f7ff f84e 	bl	80a3134 <__aeabi_dsub>
 80a4098:	f7ff fcdc 	bl	80a3a54 <__aeabi_d2uiz>
 80a409c:	4621      	mov	r1, r4
 80a409e:	bdd0      	pop	{r4, r6, r7, pc}
 80a40a0:	3df00000 	.word	0x3df00000
 80a40a4:	41f00000 	.word	0x41f00000

080a40a8 <__udivmoddi4>:
 80a40a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a40ac:	9e08      	ldr	r6, [sp, #32]
 80a40ae:	460d      	mov	r5, r1
 80a40b0:	4604      	mov	r4, r0
 80a40b2:	468e      	mov	lr, r1
 80a40b4:	2b00      	cmp	r3, #0
 80a40b6:	f040 8083 	bne.w	80a41c0 <__udivmoddi4+0x118>
 80a40ba:	428a      	cmp	r2, r1
 80a40bc:	4617      	mov	r7, r2
 80a40be:	d947      	bls.n	80a4150 <__udivmoddi4+0xa8>
 80a40c0:	fab2 f382 	clz	r3, r2
 80a40c4:	b14b      	cbz	r3, 80a40da <__udivmoddi4+0x32>
 80a40c6:	f1c3 0120 	rsb	r1, r3, #32
 80a40ca:	fa05 fe03 	lsl.w	lr, r5, r3
 80a40ce:	fa20 f101 	lsr.w	r1, r0, r1
 80a40d2:	409f      	lsls	r7, r3
 80a40d4:	ea41 0e0e 	orr.w	lr, r1, lr
 80a40d8:	409c      	lsls	r4, r3
 80a40da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a40de:	fbbe fcf8 	udiv	ip, lr, r8
 80a40e2:	fa1f f987 	uxth.w	r9, r7
 80a40e6:	fb08 e21c 	mls	r2, r8, ip, lr
 80a40ea:	fb0c f009 	mul.w	r0, ip, r9
 80a40ee:	0c21      	lsrs	r1, r4, #16
 80a40f0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a40f4:	4290      	cmp	r0, r2
 80a40f6:	d90a      	bls.n	80a410e <__udivmoddi4+0x66>
 80a40f8:	18ba      	adds	r2, r7, r2
 80a40fa:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a40fe:	f080 8118 	bcs.w	80a4332 <__udivmoddi4+0x28a>
 80a4102:	4290      	cmp	r0, r2
 80a4104:	f240 8115 	bls.w	80a4332 <__udivmoddi4+0x28a>
 80a4108:	f1ac 0c02 	sub.w	ip, ip, #2
 80a410c:	443a      	add	r2, r7
 80a410e:	1a12      	subs	r2, r2, r0
 80a4110:	fbb2 f0f8 	udiv	r0, r2, r8
 80a4114:	fb08 2210 	mls	r2, r8, r0, r2
 80a4118:	fb00 f109 	mul.w	r1, r0, r9
 80a411c:	b2a4      	uxth	r4, r4
 80a411e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4122:	42a1      	cmp	r1, r4
 80a4124:	d909      	bls.n	80a413a <__udivmoddi4+0x92>
 80a4126:	193c      	adds	r4, r7, r4
 80a4128:	f100 32ff 	add.w	r2, r0, #4294967295
 80a412c:	f080 8103 	bcs.w	80a4336 <__udivmoddi4+0x28e>
 80a4130:	42a1      	cmp	r1, r4
 80a4132:	f240 8100 	bls.w	80a4336 <__udivmoddi4+0x28e>
 80a4136:	3802      	subs	r0, #2
 80a4138:	443c      	add	r4, r7
 80a413a:	1a64      	subs	r4, r4, r1
 80a413c:	2100      	movs	r1, #0
 80a413e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a4142:	b11e      	cbz	r6, 80a414c <__udivmoddi4+0xa4>
 80a4144:	2200      	movs	r2, #0
 80a4146:	40dc      	lsrs	r4, r3
 80a4148:	e9c6 4200 	strd	r4, r2, [r6]
 80a414c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4150:	b902      	cbnz	r2, 80a4154 <__udivmoddi4+0xac>
 80a4152:	deff      	udf	#255	; 0xff
 80a4154:	fab2 f382 	clz	r3, r2
 80a4158:	2b00      	cmp	r3, #0
 80a415a:	d14f      	bne.n	80a41fc <__udivmoddi4+0x154>
 80a415c:	1a8d      	subs	r5, r1, r2
 80a415e:	2101      	movs	r1, #1
 80a4160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a4164:	fa1f f882 	uxth.w	r8, r2
 80a4168:	fbb5 fcfe 	udiv	ip, r5, lr
 80a416c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a4170:	fb08 f00c 	mul.w	r0, r8, ip
 80a4174:	0c22      	lsrs	r2, r4, #16
 80a4176:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a417a:	42a8      	cmp	r0, r5
 80a417c:	d907      	bls.n	80a418e <__udivmoddi4+0xe6>
 80a417e:	197d      	adds	r5, r7, r5
 80a4180:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a4184:	d202      	bcs.n	80a418c <__udivmoddi4+0xe4>
 80a4186:	42a8      	cmp	r0, r5
 80a4188:	f200 80e9 	bhi.w	80a435e <__udivmoddi4+0x2b6>
 80a418c:	4694      	mov	ip, r2
 80a418e:	1a2d      	subs	r5, r5, r0
 80a4190:	fbb5 f0fe 	udiv	r0, r5, lr
 80a4194:	fb0e 5510 	mls	r5, lr, r0, r5
 80a4198:	fb08 f800 	mul.w	r8, r8, r0
 80a419c:	b2a4      	uxth	r4, r4
 80a419e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a41a2:	45a0      	cmp	r8, r4
 80a41a4:	d907      	bls.n	80a41b6 <__udivmoddi4+0x10e>
 80a41a6:	193c      	adds	r4, r7, r4
 80a41a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80a41ac:	d202      	bcs.n	80a41b4 <__udivmoddi4+0x10c>
 80a41ae:	45a0      	cmp	r8, r4
 80a41b0:	f200 80d9 	bhi.w	80a4366 <__udivmoddi4+0x2be>
 80a41b4:	4610      	mov	r0, r2
 80a41b6:	eba4 0408 	sub.w	r4, r4, r8
 80a41ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a41be:	e7c0      	b.n	80a4142 <__udivmoddi4+0x9a>
 80a41c0:	428b      	cmp	r3, r1
 80a41c2:	d908      	bls.n	80a41d6 <__udivmoddi4+0x12e>
 80a41c4:	2e00      	cmp	r6, #0
 80a41c6:	f000 80b1 	beq.w	80a432c <__udivmoddi4+0x284>
 80a41ca:	2100      	movs	r1, #0
 80a41cc:	e9c6 0500 	strd	r0, r5, [r6]
 80a41d0:	4608      	mov	r0, r1
 80a41d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a41d6:	fab3 f183 	clz	r1, r3
 80a41da:	2900      	cmp	r1, #0
 80a41dc:	d14b      	bne.n	80a4276 <__udivmoddi4+0x1ce>
 80a41de:	42ab      	cmp	r3, r5
 80a41e0:	d302      	bcc.n	80a41e8 <__udivmoddi4+0x140>
 80a41e2:	4282      	cmp	r2, r0
 80a41e4:	f200 80b9 	bhi.w	80a435a <__udivmoddi4+0x2b2>
 80a41e8:	1a84      	subs	r4, r0, r2
 80a41ea:	eb65 0303 	sbc.w	r3, r5, r3
 80a41ee:	2001      	movs	r0, #1
 80a41f0:	469e      	mov	lr, r3
 80a41f2:	2e00      	cmp	r6, #0
 80a41f4:	d0aa      	beq.n	80a414c <__udivmoddi4+0xa4>
 80a41f6:	e9c6 4e00 	strd	r4, lr, [r6]
 80a41fa:	e7a7      	b.n	80a414c <__udivmoddi4+0xa4>
 80a41fc:	409f      	lsls	r7, r3
 80a41fe:	f1c3 0220 	rsb	r2, r3, #32
 80a4202:	40d1      	lsrs	r1, r2
 80a4204:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a4208:	fbb1 f0fe 	udiv	r0, r1, lr
 80a420c:	fa1f f887 	uxth.w	r8, r7
 80a4210:	fb0e 1110 	mls	r1, lr, r0, r1
 80a4214:	fa24 f202 	lsr.w	r2, r4, r2
 80a4218:	409d      	lsls	r5, r3
 80a421a:	fb00 fc08 	mul.w	ip, r0, r8
 80a421e:	432a      	orrs	r2, r5
 80a4220:	0c15      	lsrs	r5, r2, #16
 80a4222:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a4226:	45ac      	cmp	ip, r5
 80a4228:	fa04 f403 	lsl.w	r4, r4, r3
 80a422c:	d909      	bls.n	80a4242 <__udivmoddi4+0x19a>
 80a422e:	197d      	adds	r5, r7, r5
 80a4230:	f100 31ff 	add.w	r1, r0, #4294967295
 80a4234:	f080 808f 	bcs.w	80a4356 <__udivmoddi4+0x2ae>
 80a4238:	45ac      	cmp	ip, r5
 80a423a:	f240 808c 	bls.w	80a4356 <__udivmoddi4+0x2ae>
 80a423e:	3802      	subs	r0, #2
 80a4240:	443d      	add	r5, r7
 80a4242:	eba5 050c 	sub.w	r5, r5, ip
 80a4246:	fbb5 f1fe 	udiv	r1, r5, lr
 80a424a:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a424e:	fb01 f908 	mul.w	r9, r1, r8
 80a4252:	b295      	uxth	r5, r2
 80a4254:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a4258:	45a9      	cmp	r9, r5
 80a425a:	d907      	bls.n	80a426c <__udivmoddi4+0x1c4>
 80a425c:	197d      	adds	r5, r7, r5
 80a425e:	f101 32ff 	add.w	r2, r1, #4294967295
 80a4262:	d274      	bcs.n	80a434e <__udivmoddi4+0x2a6>
 80a4264:	45a9      	cmp	r9, r5
 80a4266:	d972      	bls.n	80a434e <__udivmoddi4+0x2a6>
 80a4268:	3902      	subs	r1, #2
 80a426a:	443d      	add	r5, r7
 80a426c:	eba5 0509 	sub.w	r5, r5, r9
 80a4270:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a4274:	e778      	b.n	80a4168 <__udivmoddi4+0xc0>
 80a4276:	f1c1 0720 	rsb	r7, r1, #32
 80a427a:	408b      	lsls	r3, r1
 80a427c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a4280:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4284:	fa25 f407 	lsr.w	r4, r5, r7
 80a4288:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a428c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a4290:	fa1f f88c 	uxth.w	r8, ip
 80a4294:	fb0e 4419 	mls	r4, lr, r9, r4
 80a4298:	fa20 f307 	lsr.w	r3, r0, r7
 80a429c:	fb09 fa08 	mul.w	sl, r9, r8
 80a42a0:	408d      	lsls	r5, r1
 80a42a2:	431d      	orrs	r5, r3
 80a42a4:	0c2b      	lsrs	r3, r5, #16
 80a42a6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a42aa:	45a2      	cmp	sl, r4
 80a42ac:	fa02 f201 	lsl.w	r2, r2, r1
 80a42b0:	fa00 f301 	lsl.w	r3, r0, r1
 80a42b4:	d909      	bls.n	80a42ca <__udivmoddi4+0x222>
 80a42b6:	eb1c 0404 	adds.w	r4, ip, r4
 80a42ba:	f109 30ff 	add.w	r0, r9, #4294967295
 80a42be:	d248      	bcs.n	80a4352 <__udivmoddi4+0x2aa>
 80a42c0:	45a2      	cmp	sl, r4
 80a42c2:	d946      	bls.n	80a4352 <__udivmoddi4+0x2aa>
 80a42c4:	f1a9 0902 	sub.w	r9, r9, #2
 80a42c8:	4464      	add	r4, ip
 80a42ca:	eba4 040a 	sub.w	r4, r4, sl
 80a42ce:	fbb4 f0fe 	udiv	r0, r4, lr
 80a42d2:	fb0e 4410 	mls	r4, lr, r0, r4
 80a42d6:	fb00 fa08 	mul.w	sl, r0, r8
 80a42da:	b2ad      	uxth	r5, r5
 80a42dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a42e0:	45a2      	cmp	sl, r4
 80a42e2:	d908      	bls.n	80a42f6 <__udivmoddi4+0x24e>
 80a42e4:	eb1c 0404 	adds.w	r4, ip, r4
 80a42e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80a42ec:	d22d      	bcs.n	80a434a <__udivmoddi4+0x2a2>
 80a42ee:	45a2      	cmp	sl, r4
 80a42f0:	d92b      	bls.n	80a434a <__udivmoddi4+0x2a2>
 80a42f2:	3802      	subs	r0, #2
 80a42f4:	4464      	add	r4, ip
 80a42f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a42fa:	fba0 8902 	umull	r8, r9, r0, r2
 80a42fe:	eba4 040a 	sub.w	r4, r4, sl
 80a4302:	454c      	cmp	r4, r9
 80a4304:	46c6      	mov	lr, r8
 80a4306:	464d      	mov	r5, r9
 80a4308:	d319      	bcc.n	80a433e <__udivmoddi4+0x296>
 80a430a:	d016      	beq.n	80a433a <__udivmoddi4+0x292>
 80a430c:	b15e      	cbz	r6, 80a4326 <__udivmoddi4+0x27e>
 80a430e:	ebb3 020e 	subs.w	r2, r3, lr
 80a4312:	eb64 0405 	sbc.w	r4, r4, r5
 80a4316:	fa04 f707 	lsl.w	r7, r4, r7
 80a431a:	fa22 f301 	lsr.w	r3, r2, r1
 80a431e:	431f      	orrs	r7, r3
 80a4320:	40cc      	lsrs	r4, r1
 80a4322:	e9c6 7400 	strd	r7, r4, [r6]
 80a4326:	2100      	movs	r1, #0
 80a4328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a432c:	4631      	mov	r1, r6
 80a432e:	4630      	mov	r0, r6
 80a4330:	e70c      	b.n	80a414c <__udivmoddi4+0xa4>
 80a4332:	468c      	mov	ip, r1
 80a4334:	e6eb      	b.n	80a410e <__udivmoddi4+0x66>
 80a4336:	4610      	mov	r0, r2
 80a4338:	e6ff      	b.n	80a413a <__udivmoddi4+0x92>
 80a433a:	4543      	cmp	r3, r8
 80a433c:	d2e6      	bcs.n	80a430c <__udivmoddi4+0x264>
 80a433e:	ebb8 0e02 	subs.w	lr, r8, r2
 80a4342:	eb69 050c 	sbc.w	r5, r9, ip
 80a4346:	3801      	subs	r0, #1
 80a4348:	e7e0      	b.n	80a430c <__udivmoddi4+0x264>
 80a434a:	4628      	mov	r0, r5
 80a434c:	e7d3      	b.n	80a42f6 <__udivmoddi4+0x24e>
 80a434e:	4611      	mov	r1, r2
 80a4350:	e78c      	b.n	80a426c <__udivmoddi4+0x1c4>
 80a4352:	4681      	mov	r9, r0
 80a4354:	e7b9      	b.n	80a42ca <__udivmoddi4+0x222>
 80a4356:	4608      	mov	r0, r1
 80a4358:	e773      	b.n	80a4242 <__udivmoddi4+0x19a>
 80a435a:	4608      	mov	r0, r1
 80a435c:	e749      	b.n	80a41f2 <__udivmoddi4+0x14a>
 80a435e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4362:	443d      	add	r5, r7
 80a4364:	e713      	b.n	80a418e <__udivmoddi4+0xe6>
 80a4366:	3802      	subs	r0, #2
 80a4368:	443c      	add	r4, r7
 80a436a:	e724      	b.n	80a41b6 <__udivmoddi4+0x10e>

080a436c <__aeabi_idiv0>:
 80a436c:	4770      	bx	lr
 80a436e:	bf00      	nop

080a4370 <atexit>:
 80a4370:	2300      	movs	r3, #0
 80a4372:	4601      	mov	r1, r0
 80a4374:	461a      	mov	r2, r3
 80a4376:	4618      	mov	r0, r3
 80a4378:	f000 b870 	b.w	80a445c <__register_exitproc>

080a437c <memcpy>:
 80a437c:	440a      	add	r2, r1
 80a437e:	4291      	cmp	r1, r2
 80a4380:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4384:	d100      	bne.n	80a4388 <memcpy+0xc>
 80a4386:	4770      	bx	lr
 80a4388:	b510      	push	{r4, lr}
 80a438a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a438e:	4291      	cmp	r1, r2
 80a4390:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4394:	d1f9      	bne.n	80a438a <memcpy+0xe>
 80a4396:	bd10      	pop	{r4, pc}

080a4398 <memset>:
 80a4398:	4603      	mov	r3, r0
 80a439a:	4402      	add	r2, r0
 80a439c:	4293      	cmp	r3, r2
 80a439e:	d100      	bne.n	80a43a2 <memset+0xa>
 80a43a0:	4770      	bx	lr
 80a43a2:	f803 1b01 	strb.w	r1, [r3], #1
 80a43a6:	e7f9      	b.n	80a439c <memset+0x4>

080a43a8 <srand>:
 80a43a8:	b538      	push	{r3, r4, r5, lr}
 80a43aa:	4b0d      	ldr	r3, [pc, #52]	; (80a43e0 <srand+0x38>)
 80a43ac:	4604      	mov	r4, r0
 80a43ae:	681d      	ldr	r5, [r3, #0]
 80a43b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a43b2:	b97b      	cbnz	r3, 80a43d4 <srand+0x2c>
 80a43b4:	2018      	movs	r0, #24
 80a43b6:	f7fd fbdb 	bl	80a1b70 <malloc>
 80a43ba:	4a0a      	ldr	r2, [pc, #40]	; (80a43e4 <srand+0x3c>)
 80a43bc:	4b0a      	ldr	r3, [pc, #40]	; (80a43e8 <srand+0x40>)
 80a43be:	63a8      	str	r0, [r5, #56]	; 0x38
 80a43c0:	e9c0 2300 	strd	r2, r3, [r0]
 80a43c4:	4b09      	ldr	r3, [pc, #36]	; (80a43ec <srand+0x44>)
 80a43c6:	2201      	movs	r2, #1
 80a43c8:	6083      	str	r3, [r0, #8]
 80a43ca:	230b      	movs	r3, #11
 80a43cc:	8183      	strh	r3, [r0, #12]
 80a43ce:	2300      	movs	r3, #0
 80a43d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a43d4:	2200      	movs	r2, #0
 80a43d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a43d8:	611c      	str	r4, [r3, #16]
 80a43da:	615a      	str	r2, [r3, #20]
 80a43dc:	bd38      	pop	{r3, r4, r5, pc}
 80a43de:	bf00      	nop
 80a43e0:	20000004 	.word	0x20000004
 80a43e4:	abcd330e 	.word	0xabcd330e
 80a43e8:	e66d1234 	.word	0xe66d1234
 80a43ec:	0005deec 	.word	0x0005deec

080a43f0 <strdup>:
 80a43f0:	4b02      	ldr	r3, [pc, #8]	; (80a43fc <strdup+0xc>)
 80a43f2:	4601      	mov	r1, r0
 80a43f4:	6818      	ldr	r0, [r3, #0]
 80a43f6:	f000 b803 	b.w	80a4400 <_strdup_r>
 80a43fa:	bf00      	nop
 80a43fc:	20000004 	.word	0x20000004

080a4400 <_strdup_r>:
 80a4400:	b570      	push	{r4, r5, r6, lr}
 80a4402:	4604      	mov	r4, r0
 80a4404:	4608      	mov	r0, r1
 80a4406:	460d      	mov	r5, r1
 80a4408:	f000 f80d 	bl	80a4426 <strlen>
 80a440c:	1c46      	adds	r6, r0, #1
 80a440e:	4631      	mov	r1, r6
 80a4410:	4620      	mov	r0, r4
 80a4412:	f7fd fbd5 	bl	80a1bc0 <_malloc_r>
 80a4416:	4604      	mov	r4, r0
 80a4418:	b118      	cbz	r0, 80a4422 <_strdup_r+0x22>
 80a441a:	4632      	mov	r2, r6
 80a441c:	4629      	mov	r1, r5
 80a441e:	f7ff ffad 	bl	80a437c <memcpy>
 80a4422:	4620      	mov	r0, r4
 80a4424:	bd70      	pop	{r4, r5, r6, pc}

080a4426 <strlen>:
 80a4426:	4603      	mov	r3, r0
 80a4428:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a442c:	2a00      	cmp	r2, #0
 80a442e:	d1fb      	bne.n	80a4428 <strlen+0x2>
 80a4430:	1a18      	subs	r0, r3, r0
 80a4432:	3801      	subs	r0, #1
 80a4434:	4770      	bx	lr

080a4436 <strncpy>:
 80a4436:	4603      	mov	r3, r0
 80a4438:	b510      	push	{r4, lr}
 80a443a:	3901      	subs	r1, #1
 80a443c:	b132      	cbz	r2, 80a444c <strncpy+0x16>
 80a443e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a4442:	3a01      	subs	r2, #1
 80a4444:	f803 4b01 	strb.w	r4, [r3], #1
 80a4448:	2c00      	cmp	r4, #0
 80a444a:	d1f7      	bne.n	80a443c <strncpy+0x6>
 80a444c:	2100      	movs	r1, #0
 80a444e:	441a      	add	r2, r3
 80a4450:	4293      	cmp	r3, r2
 80a4452:	d100      	bne.n	80a4456 <strncpy+0x20>
 80a4454:	bd10      	pop	{r4, pc}
 80a4456:	f803 1b01 	strb.w	r1, [r3], #1
 80a445a:	e7f9      	b.n	80a4450 <strncpy+0x1a>

080a445c <__register_exitproc>:
 80a445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4460:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a4520 <__register_exitproc+0xc4>
 80a4464:	4606      	mov	r6, r0
 80a4466:	f8d8 0000 	ldr.w	r0, [r8]
 80a446a:	461f      	mov	r7, r3
 80a446c:	460d      	mov	r5, r1
 80a446e:	4691      	mov	r9, r2
 80a4470:	f000 f858 	bl	80a4524 <__retarget_lock_acquire_recursive>
 80a4474:	4b26      	ldr	r3, [pc, #152]	; (80a4510 <__register_exitproc+0xb4>)
 80a4476:	681c      	ldr	r4, [r3, #0]
 80a4478:	b934      	cbnz	r4, 80a4488 <__register_exitproc+0x2c>
 80a447a:	4c26      	ldr	r4, [pc, #152]	; (80a4514 <__register_exitproc+0xb8>)
 80a447c:	601c      	str	r4, [r3, #0]
 80a447e:	4b26      	ldr	r3, [pc, #152]	; (80a4518 <__register_exitproc+0xbc>)
 80a4480:	b113      	cbz	r3, 80a4488 <__register_exitproc+0x2c>
 80a4482:	681b      	ldr	r3, [r3, #0]
 80a4484:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a4488:	6863      	ldr	r3, [r4, #4]
 80a448a:	2b1f      	cmp	r3, #31
 80a448c:	dd07      	ble.n	80a449e <__register_exitproc+0x42>
 80a448e:	f8d8 0000 	ldr.w	r0, [r8]
 80a4492:	f000 f849 	bl	80a4528 <__retarget_lock_release_recursive>
 80a4496:	f04f 30ff 	mov.w	r0, #4294967295
 80a449a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a449e:	b35e      	cbz	r6, 80a44f8 <__register_exitproc+0x9c>
 80a44a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a44a4:	b988      	cbnz	r0, 80a44ca <__register_exitproc+0x6e>
 80a44a6:	4b1d      	ldr	r3, [pc, #116]	; (80a451c <__register_exitproc+0xc0>)
 80a44a8:	b923      	cbnz	r3, 80a44b4 <__register_exitproc+0x58>
 80a44aa:	f8d8 0000 	ldr.w	r0, [r8]
 80a44ae:	f000 f83a 	bl	80a4526 <__retarget_lock_release>
 80a44b2:	e7f0      	b.n	80a4496 <__register_exitproc+0x3a>
 80a44b4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a44b8:	f7fd fb5a 	bl	80a1b70 <malloc>
 80a44bc:	2800      	cmp	r0, #0
 80a44be:	d0f4      	beq.n	80a44aa <__register_exitproc+0x4e>
 80a44c0:	2300      	movs	r3, #0
 80a44c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a44c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a44ca:	2201      	movs	r2, #1
 80a44cc:	6863      	ldr	r3, [r4, #4]
 80a44ce:	2e02      	cmp	r6, #2
 80a44d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a44d4:	fa02 f203 	lsl.w	r2, r2, r3
 80a44d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a44dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a44e0:	ea43 0302 	orr.w	r3, r3, r2
 80a44e4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a44e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a44ec:	bf02      	ittt	eq
 80a44ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a44f2:	431a      	orreq	r2, r3
 80a44f4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a44f8:	6863      	ldr	r3, [r4, #4]
 80a44fa:	f8d8 0000 	ldr.w	r0, [r8]
 80a44fe:	1c5a      	adds	r2, r3, #1
 80a4500:	3302      	adds	r3, #2
 80a4502:	6062      	str	r2, [r4, #4]
 80a4504:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a4508:	f000 f80e 	bl	80a4528 <__retarget_lock_release_recursive>
 80a450c:	2000      	movs	r0, #0
 80a450e:	e7c4      	b.n	80a449a <__register_exitproc+0x3e>
 80a4510:	200006d4 	.word	0x200006d4
 80a4514:	20000648 	.word	0x20000648
 80a4518:	00000000 	.word	0x00000000
 80a451c:	080a1b71 	.word	0x080a1b71
 80a4520:	20000068 	.word	0x20000068

080a4524 <__retarget_lock_acquire_recursive>:
 80a4524:	4770      	bx	lr

080a4526 <__retarget_lock_release>:
 80a4526:	4770      	bx	lr

080a4528 <__retarget_lock_release_recursive>:
 80a4528:	4770      	bx	lr

080a452a <link_code_end>:
	...

080a452c <dynalib_user>:
 80a452c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a453c:	0000 0000 534c 394d 5344 2031 6164 6174     ....LSM9DS1 data
 80a454c:	7220 6165 2064 6564 6f6d 4f00 706f 2073      read demo.Oops 
 80a455c:	2e2e 202e 6e75 6261 656c 7420 206f 6e69     ... unable to in
 80a456c:	7469 6169 696c 657a 7420 6568 4c20 4d53     itialize the LSM
 80a457c:	4439 3153 202e 6843 6365 206b 6f79 7275     9DS1. Check your
 80a458c:	7720 7269 6e69 2167 4600 756f 646e 4c20      wiring!.Found L
 80a459c:	4d53 4439 3153 3920 4f44 0046 614d 2078     SM9DS1 9DOF.Max 
 80a45ac:	6176 756c 7365 6f20 6576 2072 616c 7473     values over last
 80a45bc:	3120 3030 2030 6974 6b63 3a73 0020 2020      1000 ticks: .  
 80a45cc:	616d 5f78 3a79 0020 2020 616d 5f78 3a7a     max_y: .  max_z:
 80a45dc:	0020 616d 5f78 0078 616d 5f78 0079 616d      .max_x.max_y.ma
 80a45ec:	5f78 007a 614d 2078 6176 756c 7365 6f20     x_z.Max values o
 80a45fc:	6576 2072 6c61 206c 6974 6b63 3a73 0020     ver all ticks: .
 80a460c:	6d70 7861 785f 203a 2000 7020 616d 5f78     pmax_x: .  pmax_
 80a461c:	3a79 0020 2020 6d70 7861 7a5f 203a 2d00     y: .  pmax_z: .-
 80a462c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a463c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a464c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a465c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a466c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a467c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a468c:	2d2d 2d2d 6400 6665 7561 746c 0020 534d     ----.default .MS
 80a469c:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
 80a46ac:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
 80a46bc:	6553 7474 6e69 7367 2520 2573 2075 7325     Settings %s%u %s
 80a46cc:	4d20 444f 2545 3e75 0000 0000                MODE%u>....

080a46d8 <_ZTVN8particle11SPISettingsE>:
	...
 80a46e0:	041d 080a 03dd 080a 03e1 080a 534c 394d     ............LSM9
 80a46f0:	5344 5f31 0041 534c 394d 5344 5f31 0047     DS1_A.LSM9DS1_G.
 80a4700:	534c 394d 5344 5f31 0054 0000               LSM9DS1_T...

080a470c <_ZTVN16Adafruit_LSM9DS16SensorE>:
	...
 80a4714:	0c09 080a 0c4f 080a 03df 080a 0c0b 080a     ....O...........
 80a4724:	0beb 080a 494c 3353 444d 004c               ....LIS3MDL.

080a4730 <CSWTCH.26>:
 80a4730:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

080a4740 <_ZTV16Adafruit_LIS3MDL>:
	...
 80a4748:	12cd 080a 1319 080a 03df 080a 13d9 080a     ................
 80a4758:	12d1 080a                                   ....

080a475c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a475c:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80a476c:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 80a477c:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80a478c:	7463 6d69 0065 0000                         ctime...

080a4794 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a479c:	2469 080a 246f 080a 24ad 080a 247d 080a     i$..o$...$..}$..
 80a47ac:	246b 080a                                   k$..

080a47b0 <_ZTV9IPAddress>:
	...
 80a47b8:	29b1 080a 29a1 080a 29a3 080a               .)...)...)..

080a47c4 <_ZTV9USBSerial>:
	...
 80a47cc:	2a6f 080a 2ad5 080a 2aad 080a 1f89 080a     o*...*...*......
 80a47dc:	2a9f 080a 2a71 080a 2a81 080a 2acf 080a     .*..q*...*...*..
 80a47ec:	2a91 080a 2a69 080a                         .*..i*..

080a47f4 <_ZTV11USARTSerial>:
	...
 80a47fc:	2c09 080a 2c73 080a 2c4f 080a 1f89 080a     .,..s,..O,......
 80a480c:	2c1f 080a 2c3b 080a 2c2d 080a 2c49 080a     .,..;,..-,..I,..
 80a481c:	2c0b 080a 2c11 080a                         .,...,..

080a4824 <_ZTV7TwoWire>:
	...
 80a482c:	2d1d 080a 2d67 080a 2d3f 080a 2d1f 080a     .-..g-..?-...-..
 80a483c:	2d47 080a 2d4f 080a 2d57 080a 2d5f 080a     G-..O-..W-.._-..

080a484c <_ZTVN5spark9WiFiClassE>:
	...
 80a4854:	2ea3 080a 2e99 080a 2e8f 080a 2e0d 080a     ................
 80a4864:	2281 080a 2e83 080a 2f01 080a 2f09 080a     ."......./.../..
 80a4874:	2e77 080a 2e6f 080a 2e65 080a 2e5b 080a     w...o...e...[...
 80a4884:	2e17 080a                                   ....

080a4888 <_ZTVN5spark12NetworkClassE>:
	...
 80a4890:	2ec1 080a 2ecb 080a 2ed5 080a 2edf 080a     ................
 80a48a0:	2ee9 080a 2ef5 080a 2f01 080a 2f09 080a     ........./.../..
 80a48b0:	2f11 080a 2f1d 080a 2f25 080a 2f2f 080a     ./.../..%/..//..
 80a48c0:	2f39 080a                                   9/..

080a48c4 <_ZSt7nothrow>:
	...

080a48c5 <link_const_variable_data_end>:
 80a48c5:	00          	.byte	0x00
	...

080a48c8 <link_constructors_location>:
 80a48c8:	080a03c9 	.word	0x080a03c9
 80a48cc:	080a1d55 	.word	0x080a1d55
 80a48d0:	080a229d 	.word	0x080a229d
 80a48d4:	080a22ad 	.word	0x080a22ad
 80a48d8:	080a22fd 	.word	0x080a22fd
 80a48dc:	080a2ead 	.word	0x080a2ead
 80a48e0:	080a2f89 	.word	0x080a2f89
 80a48e4:	080a3085 	.word	0x080a3085

080a48e8 <link_constructors_end>:
	...
